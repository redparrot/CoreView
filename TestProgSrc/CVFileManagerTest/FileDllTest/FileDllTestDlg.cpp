/*$T FileDllTestDlg.cpp GC 1.140 04/18/07 08:50:56 */

/*
 * FileDllTestDlg.cpp : 实现文件 ;
 */
#include "stdafx.h"
#include "FileDllTest.h"
#include "FileDllTestDlg.h"
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <share.h>
#include <io.h>
#include "C:/CoreView_Src/Include/CVZipCompressComm.h"
#include "C:/CoreView_Src/Include/CVEncryptComm.h"
#include "afxstat_.h"
#pragma warning(disable:4309)
#include "C:/CoreView_Src/Include/CVOSAutoCheckSetDll.h"
#include "AutoSetDlg.h"
#include "SnapshotDlg.h"
#include "cvadmincomm.h"
#include "C:\CoreView_src\Include\CVRDComposeDBStandDBDllCommon.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

int LangID = 1;
CString DBFileName = "C:\\CoreView\\SystemExec\\Offline Data\\TagDB\\CVTagDB.mdb";
AFX_MODULE_STATE* pState;

void WriteDB();
char buf[] = 
{
	0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 
	0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xD0, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 
	0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 
	0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 
	0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 
	0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 
	0x53, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A, 
	0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE, 0x02, 
	0x7A, 0x00, 0x8A, 0x63, 0x14, 0x53, 0x8A, 0x63, 0x14, 0x53, 
	0x8A, 0x63, 0x14, 0x53, 0x8A, 0x63, 0x15, 0x53, 0xC9, 0x63, 
	0x14, 0x53, 0x09, 0x6B, 0x49, 0x53, 0x83, 0x63, 0x14, 0x53, 
	0x09, 0x6B, 0x1B, 0x53, 0x82, 0x63, 0x14, 0x53, 0x04, 0x6B, 
	0x74, 0x53, 0x8B, 0x63, 0x14, 0x53, 0x04, 0x6B, 0x4B, 0x53, 
	0xB5, 0x63, 0x14, 0x53, 0x09, 0x6B, 0x4E, 0x53, 0x8B, 0x63, 
	0x14, 0x53, 0x52, 0x69, 0x63, 0x68, 0x8A, 0x63, 0x14, 0x53, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x45, 
	0x00, 0x00, 0x4C, 0x01, 0x02, 0x00, 0xFB, 0xA0, 0xA0, 0x3E, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 
	0x0F, 0x01, 0x0B, 0x01, 0x07, 0x0A, 0x00, 0x72, 0x00, 0x00, 
	0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x2D, 
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 
	0x00, 0x00, 0x05, 0x00, 0x02, 0x00, 0x05, 0x00, 0x02, 0x00, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xF0, 0x39, 0x01, 0x00, 
	0x03, 0x00, 0x00, 0x80, 0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x7B, 0x00, 0x00, 
	0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x11, 0x00, 0x00, 
	0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x23, 
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x18, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 
	0x74, 0x00, 0x00, 0x00, 0x74, 0x71, 0x00, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x2E, 0x64, 0x61, 0x74, 
	0x61, 0x00, 0x00, 0x00, 0x80, 0x2A, 0x00, 0x00, 0x00, 0x90, 
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x40, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x8C, 0x80, 0x00, 0x00, 0x7C, 0x80, 
	0x00, 0x00, 0x64, 0x80, 0x00, 0x00, 0x4C, 0x80, 0x00, 0x00, 
	0x36, 0x80, 0x00, 0x00, 0x1C, 0x80, 0x00, 0x00, 0x06, 0x80, 
	0x00, 0x00, 0xF6, 0x7F, 0x00, 0x00, 0xA4, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x28, 0x7D, 0x00, 0x00, 0x3A, 0x7D, 
	0x00, 0x00, 0x4A, 0x7D, 0x00, 0x00, 0x58, 0x7D, 0x00, 0x00, 
	0x6A, 0x7D, 0x00, 0x00, 0x7E, 0x7D, 0x00, 0x00, 0x8A, 0x7D, 
	0x00, 0x00, 0x9A, 0x7D, 0x00, 0x00, 0xB0, 0x7D, 0x00, 0x00, 
	0xCC, 0x7D, 0x00, 0x00, 0xE6, 0x7D, 0x00, 0x00, 0xFE, 0x7D, 
	0x00, 0x00, 0x18, 0x7E, 0x00, 0x00, 0x2E, 0x7E, 0x00, 0x00, 
	0x48, 0x7E, 0x00, 0x00, 0x5A, 0x7E, 0x00, 0x00, 0x68, 0x7E, 
	0x00, 0x00, 0x7A, 0x7E, 0x00, 0x00, 0x88, 0x7E, 0x00, 0x00, 
	0x96, 0x7E, 0x00, 0x00, 0xA4, 0x7E, 0x00, 0x00, 0x18, 0x7D, 
	0x00, 0x00, 0xCA, 0x7E, 0x00, 0x00, 0xDA, 0x7E, 0x00, 0x00, 
	0xE2, 0x7E, 0x00, 0x00, 0x5A, 0x81, 0x00, 0x00, 0xF8, 0x7E, 
	0x00, 0x00, 0x04, 0x7F, 0x00, 0x00, 0x14, 0x7F, 0x00, 0x00, 
	0x26, 0x7F, 0x00, 0x00, 0x36, 0x7F, 0x00, 0x00, 0x46, 0x7F, 
	0x00, 0x00, 0x58, 0x7F, 0x00, 0x00, 0x6A, 0x7F, 0x00, 0x00, 
	0x7E, 0x7F, 0x00, 0x00, 0x8E, 0x7F, 0x00, 0x00, 0xA0, 0x7F, 
	0x00, 0x00, 0xB2, 0x7F, 0x00, 0x00, 0xC2, 0x7F, 0x00, 0x00, 
	0x2E, 0x81, 0x00, 0x00, 0x1E, 0x81, 0x00, 0x00, 0x0C, 0x7D, 
	0x00, 0x00, 0xF6, 0x7C, 0x00, 0x00, 0xE4, 0x7C, 0x00, 0x00, 
	0xD8, 0x7C, 0x00, 0x00, 0xCA, 0x7C, 0x00, 0x00, 0xBA, 0x7C, 
	0x00, 0x00, 0xAE, 0x7C, 0x00, 0x00, 0x44, 0x81, 0x00, 0x00, 
	0xBA, 0x7E, 0x00, 0x00, 0xEC, 0x7E, 0x00, 0x00, 0xBE, 0x80, 
	0x00, 0x00, 0xD2, 0x80, 0x00, 0x00, 0xE6, 0x80, 0x00, 0x00, 
	0x04, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x7F, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x7C, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x7A, 
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xD3, 0x47, 0x00, 0x01, 0x7C, 0x58, 0x00, 0x01, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x48, 0x00, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xFB, 0xA0, 0xA0, 0x3E, 0x00, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1D, 0x00, 0x00, 0x00, 
	0x78, 0x23, 0x00, 0x00, 0x78, 0x17, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 
	0x37, 0x25, 0x00, 0x01, 0x25, 0x73, 0x0A, 0x00, 0x3A, 0x20, 
	0x00, 0x00, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4D, 0x61, 
	0x63, 0x68, 0x69, 0x6E, 0x65, 0x3A, 0x25, 0x73, 0x20, 0x00, 
	0x00, 0x00, 0x72, 0x65, 0x76, 0x6F, 0x6B, 0x69, 0x6E, 0x67, 
	0x20, 0x70, 0x72, 0x69, 0x76, 0x69, 0x6C, 0x65, 0x67, 0x65, 
	0x3A, 0x25, 0x73, 0x20, 0x00, 0x00, 0x67, 0x72, 0x61, 0x6E, 
	0x74, 0x69, 0x6E, 0x67, 0x20, 0x70, 0x72, 0x69, 0x76, 0x69, 
	0x6C, 0x65, 0x67, 0x65, 0x3A, 0x25, 0x73, 0x20, 0x00, 0x00, 
	0x74, 0x6F, 0x2F, 0x66, 0x72, 0x6F, 0x6D, 0x3A, 0x25, 0x73, 
	0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x41, 0x00, 0x75, 0x00, 
	0x64, 0x00, 0x69, 0x00, 0x74, 0x00, 0x50, 0x00, 0x72, 0x00, 
	0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 
	0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 
	0x65, 0x00, 0x53, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 
	0x65, 0x00, 0x6D, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x76, 0x00, 
	0x69, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6D, 0x00, 
	0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x50, 0x00, 0x72, 0x00, 
	0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 
	0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 
	0x65, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 
	0x67, 0x00, 0x65, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x74, 0x00, 
	0x69, 0x00, 0x66, 0x00, 0x79, 0x00, 0x50, 0x00, 0x72, 0x00, 
	0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 
	0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 
	0x52, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x74, 0x00, 
	0x65, 0x00, 0x53, 0x00, 0x68, 0x00, 0x75, 0x00, 0x74, 0x00, 
	0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x50, 0x00, 
	0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 
	0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x53, 0x00, 
	0x65, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 
	0x74, 0x00, 0x65, 0x00, 0x50, 0x00, 0x65, 0x00, 0x72, 0x00, 
	0x6D, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x6E, 0x00, 
	0x74, 0x00, 0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 
	0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 0x42, 0x00, 
	0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x75, 0x00, 0x70, 0x00, 
	0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 
	0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 
	0x53, 0x00, 0x65, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 
	0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x50, 0x00, 
	0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 
	0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x53, 0x00, 0x65, 0x00, 0x53, 0x00, 0x68, 0x00, 0x75, 0x00, 
	0x74, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 
	0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 
	0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 
	0x53, 0x00, 0x65, 0x00, 0x44, 0x00, 0x65, 0x00, 0x62, 0x00, 
	0x75, 0x00, 0x67, 0x00, 0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 
	0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 
	0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x25, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x25, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x25, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x53, 0x00, 
	0x65, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x66, 0x00, 
	0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x53, 0x00, 0x69, 0x00, 
	0x6E, 0x00, 0x67, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x50, 0x00, 
	0x72, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x65, 0x00, 0x73, 0x00, 
	0x73, 0x00, 0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 
	0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 
	0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 0x49, 0x00, 0x6E, 0x00, 
	0x63, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x73, 0x00, 
	0x65, 0x00, 0x42, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 
	0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x72, 0x00, 
	0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x50, 0x00, 0x72, 0x00, 
	0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 
	0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 
	0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 
	0x65, 0x00, 0x50, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 
	0x66, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x50, 0x00, 
	0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 
	0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x53, 0x00, 
	0x65, 0x00, 0x54, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x65, 0x00, 
	0x4F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x72, 0x00, 
	0x73, 0x00, 0x68, 0x00, 0x69, 0x00, 0x70, 0x00, 0x50, 0x00, 
	0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 
	0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x53, 0x00, 0x65, 0x00, 0x4C, 0x00, 0x6F, 0x00, 0x61, 0x00, 
	0x64, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 
	0x65, 0x00, 0x72, 0x00, 0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 
	0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 
	0x65, 0x00, 0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 0x53, 0x00, 
	0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 
	0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x69, 0x00, 
	0x6C, 0x00, 0x65, 0x00, 0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 
	0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 
	0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 
	0x53, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 
	0x6D, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 
	0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 
	0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 
	0x53, 0x00, 0x65, 0x00, 0x55, 0x00, 0x6E, 0x00, 0x73, 0x00, 
	0x6F, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x63, 0x00, 0x69, 0x00, 
	0x74, 0x00, 0x65, 0x00, 0x64, 0x00, 0x49, 0x00, 0x6E, 0x00, 
	0x70, 0x00, 0x75, 0x00, 0x74, 0x00, 0x50, 0x00, 0x72, 0x00, 
	0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 
	0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 
	0x4D, 0x00, 0x61, 0x00, 0x63, 0x00, 0x68, 0x00, 0x69, 0x00, 
	0x6E, 0x00, 0x65, 0x00, 0x41, 0x00, 0x63, 0x00, 0x63, 0x00, 
	0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x50, 0x00, 
	0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 
	0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x53, 0x00, 
	0x65, 0x00, 0x54, 0x00, 0x63, 0x00, 0x62, 0x00, 0x50, 0x00, 
	0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 
	0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x53, 0x00, 0x65, 0x00, 0x53, 0x00, 0x65, 0x00, 0x63, 0x00, 
	0x75, 0x00, 0x72, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 
	0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 
	0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x25, 0x00, 0x73, 0x00, 0x0A, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x25, 0x00, 0x73, 0x00, 0x0A, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x25, 0x00, 0x73, 0x00, 0x0A, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x25, 0x00, 0x73, 0x00, 0x0A, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 0x43, 0x00, 
	0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 
	0x54, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x6E, 0x00, 
	0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 
	0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 0x41, 0x00, 0x73, 0x00, 
	0x73, 0x00, 0x69, 0x00, 0x67, 0x00, 0x6E, 0x00, 0x50, 0x00, 
	0x72, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x72, 0x00, 
	0x79, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x65, 0x00, 
	0x6E, 0x00, 0x50, 0x00, 0x72, 0x00, 0x69, 0x00, 0x76, 0x00, 
	0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 
	0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 0x4C, 0x00, 0x6F, 0x00, 
	0x63, 0x00, 0x6B, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x6D, 0x00, 
	0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x50, 0x00, 0x72, 0x00, 
	0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 
	0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x53, 0x00, 0x65, 0x00, 
	0x49, 0x00, 0x6E, 0x00, 0x63, 0x00, 0x72, 0x00, 0x65, 0x00, 
	0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x51, 0x00, 0x75, 0x00, 
	0x6F, 0x00, 0x74, 0x00, 0x61, 0x00, 0x50, 0x00, 0x72, 0x00, 
	0x69, 0x00, 0x76, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 
	0x67, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x61, 
	0x6C, 0x69, 0x64, 0x20, 0x4E, 0x54, 0x52, 0x69, 0x67, 0x68, 
	0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x3A, 0x0A, 0x00, 0x00, 
	0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2B, 
	0x72, 0x20, 0x78, 0x78, 0x78, 0x20, 0x20, 0x67, 0x72, 0x61, 
	0x6E, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x78, 0x78, 
	0x78, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x0A, 0x00, 0x00, 
	0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 
	0x72, 0x20, 0x78, 0x78, 0x78, 0x20, 0x20, 0x72, 0x65, 0x76, 
	0x6F, 0x6B, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x78, 
	0x78, 0x78, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x0A, 0x00, 
	0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 
	0x65, 0x20, 0x78, 0x78, 0x78, 0x78, 0x78, 0x20, 0x41, 0x64, 
	0x64, 0x20, 0x78, 0x78, 0x78, 0x78, 0x78, 0x20, 0x74, 0x6F, 
	0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x76, 0x65, 0x6E, 0x74, 
	0x20, 0x6C, 0x6F, 0x67, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x6D, 0x20, 
	0x5C, 0x5C, 0x78, 0x78, 0x78, 0x20, 0x20, 0x6D, 0x61, 0x63, 
	0x68, 0x69, 0x6E, 0x65, 0x20, 0x74, 0x6F, 0x20, 0x70, 0x65, 
	0x72, 0x66, 0x6F, 0x72, 0x6D, 0x20, 0x74, 0x68, 0x65, 0x20, 
	0x6F, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 
	0x6F, 0x6E, 0x20, 0x28, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 
	0x74, 0x20, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x20, 0x6D, 0x61, 
	0x63, 0x68, 0x69, 0x6E, 0x65, 0x29, 0x0A, 0x00, 0x00, 0x00, 
	0x75, 0x73, 0x61, 0x67, 0x65, 0x3A, 0x20, 0x2D, 0x75, 0x20, 
	0x78, 0x78, 0x78, 0x20, 0x20, 0x55, 0x73, 0x65, 0x72, 0x2F, 
	0x47, 0x72, 0x6F, 0x75, 0x70, 0x0A, 0x00, 0x00, 0x47, 0x72, 
	0x61, 0x6E, 0x74, 0x73, 0x2F, 0x52, 0x65, 0x76, 0x6F, 0x6B, 
	0x65, 0x73, 0x20, 0x4E, 0x54, 0x2D, 0x52, 0x69, 0x67, 0x68, 
	0x74, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x61, 0x20, 0x75, 0x73, 
	0x65, 0x72, 0x2F, 0x67, 0x72, 0x6F, 0x75, 0x70, 0x0A, 0x00, 
	0x00, 0x00, 0x4E, 0x54, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 
	0x2E, 0x45, 0x78, 0x65, 0x20, 0x2D, 0x20, 0x42, 0x65, 0x74, 
	0x61, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x20, 
	0x62, 0x79, 0x20, 0x47, 0x65, 0x6F, 0x72, 0x67, 0x20, 0x5A, 
	0x61, 0x6E, 0x7A, 0x65, 0x6E, 0x0A, 0x00, 0x00, 0x00, 0x00, 
	0x0A, 0x2A, 0x2A, 0x2A, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x2A, 
	0x2A, 0x2A, 0x20, 0x25, 0x73, 0x20, 0x25, 0x69, 0x0A, 0x00, 
	0x4E, 0x00, 0x54, 0x00, 0x52, 0x00, 0x69, 0x00, 0x67, 0x00, 
	0x68, 0x00, 0x74, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x2E, 0x2E, 0x2E, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 
	0x20, 0x28, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6F, 0x75, 
	0x6E, 0x74, 0x53, 0x69, 0x64, 0x28, 0x25, 0x73, 0x29, 0x3D, 
	0x25, 0x69, 0x20, 0x0A, 0x00, 0x00, 0x41, 0x64, 0x64, 0x55, 
	0x73, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x6F, 
	0x41, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x00, 0x00, 0x00, 
	0x2E, 0x2E, 0x2E, 0x20, 0x66, 0x61, 0x69, 0x6C, 0x65, 0x64, 
	0x0A, 0x00, 0x4E, 0x54, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 
	0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6E, 0x20, 
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6C, 
	0x00, 0x00, 0x00, 0x00, 0x2E, 0x2E, 0x2E, 0x20, 0x73, 0x75, 
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6C, 0x0A, 0x00, 
	0x47, 0x72, 0x61, 0x6E, 0x74, 0x69, 0x6E, 0x67, 0x00, 0x00, 
	0x00, 0x00, 0x4F, 0x70, 0x65, 0x6E, 0x50, 0x6F, 0x6C, 0x69, 
	0x63, 0x79, 0x00, 0x00, 0x25, 0x00, 0x68, 0x00, 0x53, 0x00, 
	0x00, 0x00, 0x20, 0x25, 0x73, 0x20, 0x25, 0x73, 0x20, 0x25, 
	0x73, 0x20, 0x25, 0x73, 0x20, 0x25, 0x73, 0x20, 0x25, 0x73, 
	0x00, 0x00, 0x52, 0x65, 0x76, 0x6F, 0x6B, 0x69, 0x6E, 0x67, 
	0x00, 0x00, 0x00, 0x00, 0x66, 0x72, 0x6F, 0x6D, 0x00, 0x00, 
	0x00, 0x00, 0x74, 0x6F, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 
	0x6F, 0x6E, 0x00, 0x00, 0x53, 0x6F, 0x72, 0x72, 0x79, 0x20, 
	0x64, 0x6F, 0x6E, 0x27, 0x74, 0x20, 0x6B, 0x6E, 0x6F, 0x77, 
	0x20, 0x61, 0x62, 0x6F, 0x75, 0x74, 0x20, 0x74, 0x68, 0x69, 
	0x73, 0x20, 0x4F, 0x53, 0x20, 0x2D, 0x20, 0x72, 0x75, 0x6E, 
	0x73, 0x20, 0x6F, 0x6E, 0x20, 0x4E, 0x54, 0x20, 0x6F, 0x6E, 
	0x6C, 0x79, 0x21, 0x0A, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x6A, 0x2E, 0x00, 0x01, 0x7E, 0x2E, 0x00, 0x01, 0x43, 0x6F, 
	0x72, 0x45, 0x78, 0x69, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 
	0x73, 0x73, 0x00, 0x00, 0x6D, 0x73, 0x63, 0x6F, 0x72, 0x65, 
	0x65, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x72, 0x75, 0x6E, 0x74, 
	0x69, 0x6D, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x20, 
	0x00, 0x00, 0x0D, 0x0A, 0x00, 0x00, 0x54, 0x4C, 0x4F, 0x53, 
	0x53, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x0D, 0x0A, 0x00, 
	0x00, 0x00, 0x53, 0x49, 0x4E, 0x47, 0x20, 0x65, 0x72, 0x72, 
	0x6F, 0x72, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x44, 0x4F, 
	0x4D, 0x41, 0x49, 0x4E, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 
	0x0D, 0x0A, 0x00, 0x00, 0x52, 0x36, 0x30, 0x32, 0x38, 0x0D, 
	0x0A, 0x2D, 0x20, 0x75, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x20, 
	0x74, 0x6F, 0x20, 0x69, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 
	0x69, 0x7A, 0x65, 0x20, 0x68, 0x65, 0x61, 0x70, 0x0D, 0x0A, 
	0x00, 0x00, 0x00, 0x00, 0x52, 0x36, 0x30, 0x32, 0x37, 0x0D, 
	0x0A, 0x2D, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x65, 0x6E, 0x6F, 
	0x75, 0x67, 0x68, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 
	0x66, 0x6F, 0x72, 0x20, 0x6C, 0x6F, 0x77, 0x69, 0x6F, 0x20, 
	0x69, 0x6E, 0x69, 0x74, 0x69, 0x61, 0x6C, 0x69, 0x7A, 0x61, 
	0x74, 0x69, 0x6F, 0x6E, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 
	0x52, 0x36, 0x30, 0x32, 0x36, 0x0D, 0x0A, 0x2D, 0x20, 0x6E, 
	0x6F, 0x74, 0x20, 0x65, 0x6E, 0x6F, 0x75, 0x67, 0x68, 0x20, 
	0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 
	0x73, 0x74, 0x64, 0x69, 0x6F, 0x20, 0x69, 0x6E, 0x69, 0x74, 
	0x69, 0x61, 0x6C, 0x69, 0x7A, 0x61, 0x74, 0x69, 0x6F, 0x6E, 
	0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x52, 0x36, 0x30, 0x32, 
	0x35, 0x0D, 0x0A, 0x2D, 0x20, 0x70, 0x75, 0x72, 0x65, 0x20, 
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6C, 0x20, 0x66, 0x75, 
	0x6E, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x63, 0x61, 0x6C, 
	0x6C, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x52, 0x36, 0x30, 0x32, 
	0x34, 0x0D, 0x0A, 0x2D, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x65, 
	0x6E, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x73, 0x70, 0x61, 0x63, 
	0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x5F, 0x6F, 0x6E, 0x65, 
	0x78, 0x69, 0x74, 0x2F, 0x61, 0x74, 0x65, 0x78, 0x69, 0x74, 
	0x20, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x0D, 0x0A, 0x00, 0x00, 
	0x00, 0x00, 0x52, 0x36, 0x30, 0x31, 0x39, 0x0D, 0x0A, 0x2D, 
	0x20, 0x75, 0x6E, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x74, 0x6F, 
	0x20, 0x6F, 0x70, 0x65, 0x6E, 0x20, 0x63, 0x6F, 0x6E, 0x73, 
	0x6F, 0x6C, 0x65, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 
	0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x52, 0x36, 0x30, 0x31, 
	0x38, 0x0D, 0x0A, 0x2D, 0x20, 0x75, 0x6E, 0x65, 0x78, 0x70, 
	0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x68, 0x65, 0x61, 0x70, 
	0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0x0D, 0x0A, 0x00, 0x00, 
	0x00, 0x00, 0x52, 0x36, 0x30, 0x31, 0x37, 0x0D, 0x0A, 0x2D, 
	0x20, 0x75, 0x6E, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 
	0x64, 0x20, 0x6D, 0x75, 0x6C, 0x74, 0x69, 0x74, 0x68, 0x72, 
	0x65, 0x61, 0x64, 0x20, 0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x65, 
	0x72, 0x72, 0x6F, 0x72, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 
	0x52, 0x36, 0x30, 0x31, 0x36, 0x0D, 0x0A, 0x2D, 0x20, 0x6E, 
	0x6F, 0x74, 0x20, 0x65, 0x6E, 0x6F, 0x75, 0x67, 0x68, 0x20, 
	0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x64, 0x61, 0x74, 
	0x61, 0x0D, 0x0A, 0x00, 0x0D, 0x0A, 0x54, 0x68, 0x69, 0x73, 
	0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 
	0x6F, 0x6E, 0x20, 0x68, 0x61, 0x73, 0x20, 0x72, 0x65, 0x71, 
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 
	0x20, 0x52, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x20, 0x74, 
	0x6F, 0x20, 0x74, 0x65, 0x72, 0x6D, 0x69, 0x6E, 0x61, 0x74, 
	0x65, 0x20, 0x69, 0x74, 0x20, 0x69, 0x6E, 0x20, 0x61, 0x6E, 
	0x20, 0x75, 0x6E, 0x75, 0x73, 0x75, 0x61, 0x6C, 0x20, 0x77, 
	0x61, 0x79, 0x2E, 0x0A, 0x50, 0x6C, 0x65, 0x61, 0x73, 0x65, 
	0x20, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x63, 0x74, 0x20, 0x74, 
	0x68, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 
	0x74, 0x69, 0x6F, 0x6E, 0x27, 0x73, 0x20, 0x73, 0x75, 0x70, 
	0x70, 0x6F, 0x72, 0x74, 0x20, 0x74, 0x65, 0x61, 0x6D, 0x20, 
	0x66, 0x6F, 0x72, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x69, 
	0x6E, 0x66, 0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 
	0x2E, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x52, 0x36, 0x30, 0x30, 
	0x39, 0x0D, 0x0A, 0x2D, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x65, 
	0x6E, 0x6F, 0x75, 0x67, 0x68, 0x20, 0x73, 0x70, 0x61, 0x63, 
	0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x65, 0x6E, 0x76, 0x69, 
	0x72, 0x6F, 0x6E, 0x6D, 0x65, 0x6E, 0x74, 0x0D, 0x0A, 0x00, 
	0x52, 0x36, 0x30, 0x30, 0x38, 0x0D, 0x0A, 0x2D, 0x20, 0x6E, 
	0x6F, 0x74, 0x20, 0x65, 0x6E, 0x6F, 0x75, 0x67, 0x68, 0x20, 
	0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 
	0x61, 0x72, 0x67, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x0D, 
	0x0A, 0x00, 0x00, 0x00, 0x52, 0x36, 0x30, 0x30, 0x32, 0x0D, 
	0x0A, 0x2D, 0x20, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0x69, 0x6E, 
	0x67, 0x20, 0x70, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x6E, 0x6F, 
	0x74, 0x20, 0x6C, 0x6F, 0x61, 0x64, 0x65, 0x64, 0x0D, 0x0A, 
	0x00, 0x00, 0x00, 0x00, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 
	0x6F, 0x66, 0x74, 0x20, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6C, 
	0x20, 0x43, 0x2B, 0x2B, 0x20, 0x52, 0x75, 0x6E, 0x74, 0x69, 
	0x6D, 0x65, 0x20, 0x4C, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 
	0x00, 0x00, 0x00, 0x00, 0x0A, 0x0A, 0x00, 0x00, 0x2E, 0x2E, 
	0x2E, 0x00, 0x3C, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 
	0x20, 0x6E, 0x61, 0x6D, 0x65, 0x20, 0x75, 0x6E, 0x6B, 0x6E, 
	0x6F, 0x77, 0x6E, 0x3E, 0x00, 0x00, 0x52, 0x75, 0x6E, 0x74, 
	0x69, 0x6D, 0x65, 0x20, 0x45, 0x72, 0x72, 0x6F, 0x72, 0x21, 
	0x0A, 0x0A, 0x50, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x3A, 
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 
	0xFF, 0xFF, 0x57, 0x3B, 0x00, 0x01, 0x5B, 0x3B, 0x00, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06, 0x00, 0x01, 
	0x00, 0x00, 0x10, 0x00, 0x03, 0x06, 0x00, 0x06, 0x02, 0x10, 
	0x04, 0x45, 0x45, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x35, 
	0x30, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x20, 0x28, 0x38, 
	0x50, 0x58, 0x07, 0x08, 0x00, 0x37, 0x30, 0x30, 0x57, 0x50, 
	0x07, 0x00, 0x00, 0x20, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 
	0x08, 0x60, 0x68, 0x60, 0x60, 0x60, 0x60, 0x00, 0x00, 0x70, 
	0x70, 0x78, 0x78, 0x78, 0x78, 0x08, 0x07, 0x08, 0x00, 0x00, 
	0x07, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08, 0x00, 0x08, 
	0x00, 0x07, 0x08, 0x00, 0x00, 0x00, 0x28, 0x00, 0x6E, 0x00, 
	0x75, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x29, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x28, 0x6E, 0x75, 0x6C, 0x6C, 0x29, 0x00, 0x00, 
	0x47, 0x65, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 
	0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x53, 0x74, 0x61, 0x74, 
	0x69, 0x6F, 0x6E, 0x00, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 
	0x72, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x49, 0x6E, 0x66, 
	0x6F, 0x72, 0x6D, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x41, 0x00, 
	0x00, 0x00, 0x47, 0x65, 0x74, 0x4C, 0x61, 0x73, 0x74, 0x41, 
	0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6F, 0x70, 0x75, 0x70, 
	0x00, 0x00, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 
	0x65, 0x57, 0x69, 0x6E, 0x64, 0x6F, 0x77, 0x00, 0x4D, 0x65, 
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6F, 0x78, 0x41, 0x00, 
	0x75, 0x73, 0x65, 0x72, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 0x28, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x48, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x84, 0x00, 
	0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 
	0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x81, 0x00, 0x81, 0x00, 0x81, 0x00, 0x81, 0x00, 
	0x81, 0x00, 0x81, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 
	0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 
	0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 
	0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 
	0x01, 0x00, 0x01, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x82, 0x00, 0x82, 0x00, 
	0x82, 0x00, 0x82, 0x00, 0x82, 0x00, 0x82, 0x00, 0x02, 0x00, 
	0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 
	0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 
	0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 
	0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x68, 0x00, 0x28, 0x00, 0x28, 0x00, 
	0x28, 0x00, 0x28, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x48, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 
	0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 0x84, 0x00, 
	0x84, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x81, 0x01, 0x81, 0x01, 
	0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x81, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x82, 0x01, 0x82, 0x01, 0x82, 0x01, 0x82, 0x01, 0x82, 0x01, 
	0x82, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 
	0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 
	0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 
	0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 
	0x02, 0x01, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 
	0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x48, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x14, 0x00, 0x14, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x14, 0x00, 0x10, 0x00, 
	0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x10, 0x00, 0x01, 0x01, 
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x01, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 
	0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 
	0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 
	0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 
	0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 
	0x10, 0x00, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 
	0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x02, 0x01, 0x01, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x73, 0x6B, 
	0x00, 0x01, 0x77, 0x6B, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 
	0x68, 0x69, 0x00, 0x01, 0x6C, 0x69, 0x00, 0x01, 0xFF, 0xFF, 
	0xFF, 0xFF, 0x35, 0x6A, 0x00, 0x01, 0x39, 0x6A, 0x00, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x19, 0x6D, 
	0x00, 0x01, 0x1D, 0x6D, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0x75, 0x00, 0x01, 0xF5, 0x75, 
	0x00, 0x01, 0x55, 0x6E, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 
	0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 
	0x46, 0x69, 0x6C, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 
	0x6B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 0x33, 0x32, 0x2E, 0x64, 
	0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x90, 0x00, 0x01, 
	0xD0, 0x23, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x4E, 0x42, 
	0x31, 0x30, 0x00, 0x00, 0x00, 0x00, 0xFB, 0xA0, 0xA0, 0x3E, 
	0x01, 0x00, 0x00, 0x00, 0x6E, 0x74, 0x72, 0x69, 0x67, 0x68, 
	0x74, 0x73, 0x2E, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x2F, 0x00, 0x00, 
	0xF8, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x56, 0x8B, 0x74, 0x24, 0x0C, 0x33, 0xC9, 0x3B, 
	0xF1, 0x75, 0x10, 0x8B, 0x44, 0x24, 0x08, 0x89, 0x48, 0x04, 
	0x66, 0x89, 0x08, 0x66, 0x89, 0x48, 0x02, 0xEB, 0x1A, 0x56, 
	0xE8, 0xA0, 0x0A, 0x00, 0x00, 0x59, 0x8B, 0x4C, 0x24, 0x08, 
	0x03, 0xC0, 0x66, 0x89, 0x01, 0x83, 0xC0, 0x02, 0x89, 0x71, 
	0x04, 0x66, 0x89, 0x41, 0x02, 0x5E, 0xC2, 0x08, 0x00, 0x55, 
	0x8B, 0xEC, 0x83, 0xEC, 0x20, 0x57, 0x6A, 0x06, 0x59, 0x33, 
	0xC0, 0x33, 0xD2, 0x39, 0x55, 0x08, 0x8D, 0x7D, 0xE0, 0xF3, 
	0xAB, 0x5F, 0x74, 0x0F, 0xFF, 0x75, 0x08, 0x8D, 0x45, 0xF8, 
	0x50, 0xE8, 0xA2, 0xFF, 0xFF, 0xFF, 0x8D, 0x55, 0xF8, 0xFF, 
	0x75, 0x10, 0x8D, 0x45, 0xE0, 0xFF, 0x75, 0x0C, 0x50, 0x52, 
	0xE8, 0x89, 0x55, 0x00, 0x00, 0xC9, 0xC2, 0x0C, 0x00, 0x6A, 
	0x20, 0x68, 0x70, 0x11, 0x00, 0x01, 0xE8, 0x57, 0x0A, 0x00, 
	0x00, 0x33, 0xC9, 0x89, 0x4D, 0xE4, 0xB8, 0x80, 0x00, 0x00, 
	0x00, 0x89, 0x45, 0xD8, 0xC7, 0x45, 0xE0, 0x32, 0x00, 0x00, 
	0x00, 0x89, 0x4D, 0xDC, 0x89, 0x4D, 0xFC, 0x50, 0x51, 0x8B, 
	0x35, 0xD4, 0x10, 0x00, 0x01, 0xFF, 0xD6, 0x50, 0x8B, 0x1D, 
	0xD8, 0x10, 0x00, 0x01, 0xFF, 0xD3, 0x8B, 0x7D, 0x10, 0x89, 
	0x07, 0x85, 0xC0, 0x74, 0x78, 0xFF, 0x75, 0xE0, 0x6A, 0x00, 
	0xFF, 0xD6, 0x50, 0xFF, 0xD3, 0x89, 0x45, 0xE4, 0x85, 0xC0, 
	0x74, 0x67, 0x8B, 0x1D, 0xDC, 0x10, 0x00, 0x01, 0x8D, 0x45, 
	0xD4, 0x50, 0x8D, 0x45, 0xE0, 0x50, 0xFF, 0x75, 0xE4, 0x8D, 
	0x45, 0xD8, 0x50, 0xFF, 0x37, 0xFF, 0x75, 0x0C, 0xFF, 0x75, 
	0x08, 0xFF, 0x15, 0x18, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x75, 
	0x39, 0xFF, 0x15, 0xE0, 0x10, 0x00, 0x01, 0x83, 0xF8, 0x7A, 
	0x75, 0x35, 0xFF, 0x75, 0xD8, 0xFF, 0x37, 0x6A, 0x00, 0xFF, 
	0xD6, 0x50, 0xFF, 0xD3, 0x33, 0xC9, 0x89, 0x01, 0x85, 0xC0, 
	0x74, 0x21, 0x89, 0x07, 0xFF, 0x75, 0xE0, 0xFF, 0x75, 0xE4, 
	0x51, 0xFF, 0xD6, 0x50, 0xFF, 0xD3, 0x89, 0x45, 0xD0, 0x85, 
	0xC0, 0x74, 0x0C, 0x89, 0x45, 0xE4, 0xEB, 0xA6, 0xC7, 0x45, 
	0xDC, 0x01, 0x00, 0x00, 0x00, 0x83, 0x4D, 0xFC, 0xFF, 0xE8, 
	0x28, 0x00, 0x00, 0x00, 0x83, 0x7D, 0xE4, 0x00, 0x74, 0x0E, 
	0xFF, 0x75, 0xE4, 0x6A, 0x00, 0xFF, 0xD6, 0x50, 0xFF, 0x15, 
	0xE4, 0x10, 0x00, 0x01, 0x8B, 0x45, 0xDC, 0xE8, 0xBF, 0x09, 
	0x00, 0x00, 0xC2, 0x0C, 0x00, 0x8B, 0x7D, 0x10, 0x8B, 0x35, 
	0xD4, 0x10, 0x00, 0x01, 0x83, 0x7D, 0xE4, 0x00, 0x74, 0x12, 
	0xFF, 0x75, 0xE4, 0x6A, 0x00, 0xFF, 0xD6, 0x50, 0xFF, 0x15, 
	0xE4, 0x10, 0x00, 0x01, 0x83, 0x65, 0xE4, 0x00, 0x83, 0x7D, 
	0xDC, 0x00, 0x75, 0x15, 0x8B, 0x07, 0x85, 0xC0, 0x74, 0x0F, 
	0x50, 0x6A, 0x00, 0xFF, 0xD6, 0x50, 0xFF, 0x15, 0xE4, 0x10, 
	0x00, 0x01, 0x83, 0x27, 0x00, 0xC3, 0x55, 0x8B, 0xEC, 0x51, 
	0x51, 0xFF, 0x75, 0x10, 0x8D, 0x45, 0xF8, 0x50, 0xE8, 0x5B, 
	0xFE, 0xFF, 0xFF, 0x83, 0x7D, 0x14, 0x00, 0x8D, 0x45, 0xF8, 
	0x6A, 0x01, 0x50, 0x74, 0x0D, 0xFF, 0x75, 0x0C, 0xFF, 0x75, 
	0x08, 0xE8, 0x4A, 0x54, 0x00, 0x00, 0xEB, 0x0D, 0x6A, 0x00, 
	0xFF, 0x75, 0x0C, 0xFF, 0x75, 0x08, 0xE8, 0x35, 0x54, 0x00, 
	0x00, 0xC9, 0xC2, 0x10, 0x00, 0x55, 0x8B, 0xEC, 0x81, 0xEC, 
	0x04, 0x01, 0x00, 0x00, 0xA1, 0x0C, 0x90, 0x00, 0x01, 0x89, 
	0x45, 0xFC, 0x8B, 0x45, 0x08, 0x85, 0xC0, 0x74, 0x40, 0x8D, 
	0x95, 0xFC, 0xFE, 0xFF, 0xFF, 0x2B, 0xD0, 0x8A, 0x08, 0x88, 
	0x0C, 0x02, 0x40, 0x84, 0xC9, 0x75, 0xF6, 0x56, 0x57, 0x8D, 
	0xBD, 0xFC, 0xFE, 0xFF, 0xFF, 0x4F, 0x8A, 0x47, 0x01, 0x47, 
	0x84, 0xC0, 0x75, 0xF8, 0xBE, 0x80, 0x11, 0x00, 0x01, 0x66, 
	0xA5, 0x8D, 0x85, 0xFC, 0xFE, 0xFF, 0xFF, 0x50, 0x68, 0x7C, 
	0x11, 0x00, 0x01, 0xA4, 0xE8, 0x0A, 0x0A, 0x00, 0x00, 0x59, 
	0x59, 0x5F, 0x5E, 0x8B, 0x4D, 0xFC, 0xE8, 0xE9, 0x53, 0x00, 
	0x00, 0xC9, 0xC2, 0x08, 0x00, 0x55, 0x8D, 0xAC, 0x24, 0x84, 
	0xFE, 0xFF, 0xFF, 0x81, 0xEC, 0xFC, 0x01, 0x00, 0x00, 0xA1, 
	0x0C, 0x90, 0x00, 0x01, 0x89, 0x85, 0x78, 0x01, 0x00, 0x00, 
	0x33, 0xC0, 0x57, 0x8B, 0xBD, 0x84, 0x01, 0x00, 0x00, 0x40, 
	0x3B, 0xF8, 0x89, 0x45, 0x80, 0x0F, 0x8E, 0xD3, 0x01, 0x00, 
	0x00, 0x53, 0x8B, 0x9D, 0x88, 0x01, 0x00, 0x00, 0x56, 0x6A, 
	0x04, 0x5E, 0x03, 0xDE, 0x8B, 0x03, 0x8A, 0x10, 0x80, 0xFA, 
	0x2D, 0x74, 0x10, 0x8A, 0xCA, 0x80, 0xF9, 0x2B, 0x74, 0x09, 
	0x80, 0xF9, 0x2F, 0x0F, 0x85, 0x99, 0x01, 0x00, 0x00, 0x0F, 
	0xBE, 0x40, 0x01, 0x83, 0xF8, 0x64, 0x7F, 0x36, 0x74, 0x28, 
	0x83, 0xE8, 0x44, 0x74, 0x23, 0x48, 0x0F, 0x84, 0x67, 0x01, 
	0x00, 0x00, 0x83, 0xE8, 0x08, 0x0F, 0x84, 0x0F, 0x01, 0x00, 
	0x00, 0x83, 0xE8, 0x05, 0x0F, 0x84, 0x9A, 0x00, 0x00, 0x00, 
	0x83, 0xE8, 0x03, 0x74, 0x31, 0xE9, 0x66, 0x01, 0x00, 0x00, 
	0xC6, 0x05, 0x80, 0x99, 0x00, 0x01, 0x01, 0xE9, 0x5A, 0x01, 
	0x00, 0x00, 0x83, 0xF8, 0x65, 0x0F, 0x84, 0x36, 0x01, 0x00, 
	0x00, 0x83, 0xF8, 0x6D, 0x0F, 0x84, 0xDE, 0x00, 0x00, 0x00, 
	0x83, 0xF8, 0x72, 0x74, 0x6D, 0x83, 0xF8, 0x75, 0x0F, 0x85, 
	0x3A, 0x01, 0x00, 0x00, 0x03, 0xDE, 0xFF, 0x45, 0x80, 0x39, 
	0x7D, 0x80, 0x0F, 0x8D, 0x2C, 0x01, 0x00, 0x00, 0x8B, 0x0B, 
	0xBE, 0x80, 0x98, 0x00, 0x01, 0x8B, 0xD6, 0x8A, 0x01, 0x41, 
	0x88, 0x02, 0x42, 0x84, 0xC0, 0x75, 0xF6, 0x56, 0x8D, 0x45, 
	0x84, 0x68, 0xC8, 0x11, 0x00, 0x01, 0x50, 0xE8, 0x48, 0x09, 
	0x00, 0x00, 0x8D, 0x45, 0x84, 0x83, 0xC4, 0x0C, 0x8B, 0xD0, 
	0x8A, 0x08, 0x40, 0x84, 0xC9, 0x75, 0xF9, 0xBF, 0xC0, 0xA2, 
	0x00, 0x01, 0x2B, 0xC2, 0x4F, 0x8A, 0x4F, 0x01, 0x47, 0x84, 
	0xC9, 0x75, 0xF8, 0x8B, 0xF2, 0x8B, 0xC8, 0xC1, 0xE9, 0x02, 
	0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0xE9, 
	0xD6, 0x00, 0x00, 0x00, 0x03, 0xDE, 0xFF, 0x45, 0x80, 0x39, 
	0x7D, 0x80, 0x0F, 0x8D, 0xC8, 0x00, 0x00, 0x00, 0x33, 0xC0, 
	0x80, 0xFA, 0x2B, 0x0F, 0x94, 0xC0, 0xBE, 0x80, 0x96, 0x00, 
	0x01, 0x8B, 0xD0, 0x89, 0x15, 0x00, 0x90, 0x00, 0x01, 0x8B, 
	0x03, 0x8A, 0x08, 0x40, 0x88, 0x0E, 0x46, 0x84, 0xC9, 0x75, 
	0xF6, 0x85, 0xD2, 0xB8, 0xB0, 0x11, 0x00, 0x01, 0x75, 0x05, 
	0xB8, 0x98, 0x11, 0x00, 0x01, 0xFF, 0x33, 0x50, 0x8D, 0x45, 
	0x84, 0x50, 0xE8, 0xCB, 0x08, 0x00, 0x00, 0x8D, 0x45, 0x84, 
	0x83, 0xC4, 0x0C, 0x8B, 0xC8, 0x8A, 0x10, 0x40, 0x84, 0xD2, 
	0x75, 0xF9, 0xBF, 0xC0, 0xA2, 0x00, 0x01, 0x2B, 0xC1, 0x8B, 
	0xF1, 0x4F, 0x8A, 0x4F, 0x01, 0x47, 0x84, 0xC9, 0x75, 0xF8, 
	0xEB, 0x81, 0x03, 0xDE, 0xFF, 0x45, 0x80, 0x39, 0x7D, 0x80, 
	0x7D, 0x60, 0x8B, 0x0B, 0xBA, 0x80, 0x97, 0x00, 0x01, 0x8A, 
	0x01, 0x41, 0x88, 0x02, 0x42, 0x84, 0xC0, 0x75, 0xF6, 0xFF, 
	0x33, 0x8D, 0x45, 0x84, 0x68, 0x84, 0x11, 0x00, 0x01, 0x50, 
	0xE8, 0x7D, 0x08, 0x00, 0x00, 0x8D, 0x45, 0x84, 0x83, 0xC4, 
	0x0C, 0x8B, 0xD0, 0x8A, 0x08, 0x40, 0x84, 0xC9, 0x75, 0xF9, 
	0xBF, 0xC0, 0xA2, 0x00, 0x01, 0x2B, 0xC2, 0x4F, 0x8A, 0x4F, 
	0x01, 0x47, 0x84, 0xC9, 0x75, 0xF8, 0xE9, 0x30, 0xFF, 0xFF, 
	0xFF, 0x03, 0xDE, 0xFF, 0x45, 0x80, 0x39, 0x7D, 0x80, 0x7D, 
	0x11, 0x8B, 0x0B, 0xBA, 0xC0, 0x9E, 0x00, 0x01, 0x8A, 0x01, 
	0x41, 0x88, 0x02, 0x42, 0x84, 0xC0, 0x75, 0xF6, 0xFF, 0x45, 
	0x80, 0x8B, 0xBD, 0x84, 0x01, 0x00, 0x00, 0x39, 0x7D, 0x80, 
	0x0F, 0x8C, 0x37, 0xFE, 0xFF, 0xFF, 0x5E, 0x5B, 0x8B, 0x8D, 
	0x78, 0x01, 0x00, 0x00, 0x5F, 0xE8, 0xD8, 0x51, 0x00, 0x00, 
	0x81, 0xC5, 0x7C, 0x01, 0x00, 0x00, 0xC9, 0xC2, 0x08, 0x00, 
	0x56, 0x68, 0xD8, 0x17, 0x00, 0x01, 0xE8, 0xD8, 0x07, 0x00, 
	0x00, 0xC7, 0x04, 0x24, 0xAC, 0x17, 0x00, 0x01, 0xE8, 0xCC, 
	0x07, 0x00, 0x00, 0xC7, 0x04, 0x24, 0x90, 0x17, 0x00, 0x01, 
	0xE8, 0xC0, 0x07, 0x00, 0x00, 0xC7, 0x04, 0x24, 0x40, 0x17, 
	0x00, 0x01, 0xE8, 0xB4, 0x07, 0x00, 0x00, 0xC7, 0x04, 0x24, 
	0x10, 0x17, 0x00, 0x01, 0xE8, 0xA8, 0x07, 0x00, 0x00, 0xC7, 
	0x04, 0x24, 0xE8, 0x16, 0x00, 0x01, 0xE8, 0x9C, 0x07, 0x00, 
	0x00, 0xC7, 0x04, 0x24, 0xC0, 0x16, 0x00, 0x01, 0xE8, 0x90, 
	0x07, 0x00, 0x00, 0xC7, 0x04, 0x24, 0xA8, 0x16, 0x00, 0x01, 
	0xE8, 0x84, 0x07, 0x00, 0x00, 0xC7, 0x04, 0x24, 0x74, 0x16, 
	0x00, 0x01, 0x68, 0x48, 0x16, 0x00, 0x01, 0x68, 0x0C, 0x16, 
	0x00, 0x01, 0x68, 0xDC, 0x15, 0x00, 0x01, 0xBE, 0xB0, 0x15, 
	0x00, 0x01, 0x56, 0xE8, 0xEC, 0x07, 0x00, 0x00, 0x68, 0x88, 
	0x15, 0x00, 0x01, 0x68, 0x68, 0x15, 0x00, 0x01, 0x68, 0x34, 
	0x15, 0x00, 0x01, 0x68, 0xFC, 0x14, 0x00, 0x01, 0x56, 0xE8, 
	0xD2, 0x07, 0x00, 0x00, 0x68, 0xD0, 0x14, 0x00, 0x01, 0x68, 
	0x9C, 0x14, 0x00, 0x01, 0x68, 0x70, 0x14, 0x00, 0x01, 0x68, 
	0x3C, 0x14, 0x00, 0x01, 0x56, 0xE8, 0xB8, 0x07, 0x00, 0x00, 
	0x68, 0x08, 0x14, 0x00, 0x01, 0x68, 0xC8, 0x13, 0x00, 0x01, 
	0x68, 0x88, 0x13, 0x00, 0x01, 0x68, 0x68, 0x13, 0x00, 0x01, 
	0xE8, 0x9F, 0x07, 0x00, 0x00, 0x83, 0xC4, 0x4C, 0x68, 0x44, 
	0x13, 0x00, 0x01, 0x68, 0x1C, 0x13, 0x00, 0x01, 0x68, 0xF4, 
	0x12, 0x00, 0x01, 0x68, 0xD0, 0x12, 0x00, 0x01, 0x68, 0x98, 
	0x12, 0x00, 0x01, 0x56, 0xE8, 0x7D, 0x07, 0x00, 0x00, 0x68, 
	0x64, 0x12, 0x00, 0x01, 0x68, 0x34, 0x12, 0x00, 0x01, 0x68, 
	0xF8, 0x11, 0x00, 0x01, 0x68, 0xD4, 0x11, 0x00, 0x01, 0x56, 
	0xE8, 0x63, 0x07, 0x00, 0x00, 0x83, 0xC4, 0x2C, 0x5E, 0xC3, 
	0xFF, 0x74, 0x24, 0x0C, 0xFF, 0x74, 0x24, 0x0C, 0xFF, 0x74, 
	0x24, 0x0C, 0xFF, 0x15, 0xCC, 0x10, 0x00, 0x01, 0x8D, 0x44, 
	0x00, 0x01, 0x50, 0xFF, 0x74, 0x24, 0x10, 0x6A, 0x01, 0x6A, 
	0x00, 0xFF, 0x15, 0xD0, 0x10, 0x00, 0x01, 0xC2, 0x0C, 0x00, 
	0xFF, 0x74, 0x24, 0x08, 0xE8, 0x83, 0x50, 0x00, 0x00, 0x50, 
	0xFF, 0x74, 0x24, 0x08, 0xE8, 0x3C, 0xFC, 0xFF, 0xFF, 0xFF, 
	0x74, 0x24, 0x08, 0xFF, 0x74, 0x24, 0x08, 0x68, 0x08, 0x18, 
	0x00, 0x01, 0xE8, 0x88, 0x06, 0x00, 0x00, 0x83, 0xC4, 0x0C, 
	0xC2, 0x08, 0x00, 0x55, 0x8B, 0xEC, 0xB8, 0x14, 0x30, 0x00, 
	0x00, 0xE8, 0x38, 0x07, 0x00, 0x00, 0xA1, 0x0C, 0x90, 0x00, 
	0x01, 0x56, 0x57, 0x89, 0x45, 0xFC, 0xBE, 0x00, 0x08, 0x00, 
	0x00, 0x56, 0x8D, 0x85, 0xFC, 0xEF, 0xFF, 0xFF, 0x50, 0xFF, 
	0x75, 0x0C, 0xE8, 0x81, 0xFF, 0xFF, 0xFF, 0x56, 0x8D, 0x85, 
	0xFC, 0xDF, 0xFF, 0xFF, 0x50, 0xFF, 0x75, 0x10, 0xE8, 0x71, 
	0xFF, 0xFF, 0xFF, 0x56, 0x8D, 0x85, 0xFC, 0xCF, 0xFF, 0xFF, 
	0x50, 0xFF, 0x75, 0x14, 0xE8, 0x61, 0xFF, 0xFF, 0xFF, 0x68, 
	0x1C, 0x18, 0x00, 0x01, 0x33, 0xF6, 0x56, 0xFF, 0x15, 0x00, 
	0x10, 0x00, 0x01, 0x8B, 0xF8, 0x3B, 0xFE, 0x8D, 0x85, 0xFC, 
	0xEF, 0xFF, 0xFF, 0x89, 0x85, 0xEC, 0xCF, 0xFF, 0xFF, 0x8D, 
	0x85, 0xFC, 0xDF, 0xFF, 0xFF, 0x89, 0x85, 0xF0, 0xCF, 0xFF, 
	0xFF, 0x8D, 0x85, 0xFC, 0xCF, 0xFF, 0xFF, 0x89, 0x85, 0xF4, 
	0xCF, 0xFF, 0xFF, 0x89, 0xB5, 0xF8, 0xCF, 0xFF, 0xFF, 0x74, 
	0x20, 0x56, 0x8D, 0x85, 0xEC, 0xCF, 0xFF, 0xFF, 0x50, 0x56, 
	0x6A, 0x03, 0x56, 0xFF, 0x75, 0x18, 0x56, 0x6A, 0x04, 0x57, 
	0xFF, 0x15, 0x04, 0x10, 0x00, 0x01, 0x57, 0xFF, 0x15, 0x08, 
	0x10, 0x00, 0x01, 0x8B, 0x4D, 0xFC, 0x5F, 0x5E, 0xE8, 0xB9, 
	0x4F, 0x00, 0x00, 0xC9, 0xC2, 0x14, 0x00, 0x55, 0x8D, 0xAC, 
	0x24, 0x58, 0xF9, 0xFF, 0xFF, 0x81, 0xEC, 0x28, 0x07, 0x00, 
	0x00, 0xA1, 0x0C, 0x90, 0x00, 0x01, 0x66, 0x83, 0xA5, 0x90, 
	0x03, 0x00, 0x00, 0x00, 0x57, 0x89, 0x85, 0xA4, 0x06, 0x00, 
	0x00, 0x6A, 0x7F, 0x59, 0x33, 0xC0, 0x8D, 0xBD, 0x92, 0x03, 
	0x00, 0x00, 0xF3, 0xAB, 0x66, 0xAB, 0x8D, 0x85, 0x90, 0x05, 
	0x00, 0x00, 0x50, 0xC7, 0x45, 0x84, 0x0D, 0x00, 0x00, 0x00, 
	0xC7, 0x85, 0x90, 0x05, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 
	0xFF, 0x15, 0x7C, 0x10, 0x00, 0x01, 0x83, 0xBD, 0xA0, 0x05, 
	0x00, 0x00, 0x02, 0x74, 0x13, 0x68, 0xFC, 0x18, 0x00, 0x01, 
	0xE8, 0x68, 0x05, 0x00, 0x00, 0x59, 0x6A, 0x65, 0x58, 0xE9, 
	0xC0, 0x01, 0x00, 0x00, 0xFF, 0xB5, 0xB4, 0x06, 0x00, 0x00, 
	0xFF, 0xB5, 0xB0, 0x06, 0x00, 0x00, 0xE8, 0x54, 0xFB, 0xFF, 
	0xFF, 0xBF, 0x80, 0x96, 0x00, 0x01, 0x8B, 0xC7, 0x8D, 0x50, 
	0x01, 0x8A, 0x08, 0x40, 0x84, 0xC9, 0x75, 0xF9, 0x53, 0x2B, 
	0xC2, 0x56, 0xBE, 0x80, 0x98, 0x00, 0x01, 0x8B, 0xD8, 0x8B, 
	0xC6, 0x8D, 0x48, 0x01, 0x8A, 0x10, 0x40, 0x84, 0xD2, 0x75, 
	0xF9, 0x2B, 0xC1, 0x89, 0x45, 0x80, 0x6A, 0x00, 0x58, 0x0F, 
	0x94, 0xC0, 0x33, 0xC9, 0x85, 0xDB, 0x0F, 0x94, 0xC1, 0x0B, 
	0xC1, 0x74, 0x0D, 0xE8, 0x28, 0xFD, 0xFF, 0xFF, 0x33, 0xC0, 
	0x40, 0xE9, 0x62, 0x01, 0x00, 0x00, 0xBB, 0x80, 0x97, 0x00, 
	0x01, 0x8B, 0xC3, 0x8D, 0x50, 0x01, 0x8A, 0x08, 0x40, 0x84, 
	0xC9, 0x75, 0xF9, 0x2B, 0xC2, 0x89, 0x45, 0x80, 0xBA, 0xF8, 
	0x18, 0x00, 0x01, 0x75, 0x05, 0xBA, 0xF4, 0x18, 0x00, 0x01, 
	0xA1, 0x00, 0x90, 0x00, 0x01, 0x85, 0xC0, 0xB9, 0xF0, 0x18, 
	0x00, 0x01, 0x75, 0x78, 0xB9, 0xE8, 0x18, 0x00, 0x01, 0xB8, 
	0xDC, 0x18, 0x00, 0x01, 0x53, 0x52, 0x56, 0x51, 0x57, 0x50, 
	0x68, 0xC8, 0x18, 0x00, 0x01, 0xE8, 0xB9, 0x04, 0x00, 0x00, 
	0x56, 0x8B, 0x35, 0x08, 0x11, 0x00, 0x01, 0xBF, 0xC0, 0x18, 
	0x00, 0x01, 0x8D, 0x45, 0x90, 0x57, 0x50, 0xFF, 0xD6, 0x68, 
	0x80, 0x96, 0x00, 0x01, 0x8D, 0x85, 0x90, 0x01, 0x00, 0x00, 
	0x57, 0x50, 0xFF, 0xD6, 0x53, 0x8D, 0x85, 0x90, 0x03, 0x00, 
	0x00, 0x57, 0x50, 0xFF, 0xD6, 0x83, 0xC4, 0x40, 0x8D, 0x45, 
	0x88, 0x50, 0x68, 0x10, 0x08, 0x00, 0x00, 0x8D, 0x85, 0x90, 
	0x03, 0x00, 0x00, 0x50, 0xE8, 0x80, 0xF8, 0xFF, 0xFF, 0x33, 
	0xFF, 0x3B, 0xC7, 0x74, 0x1A, 0x50, 0x68, 0xB4, 0x18, 0x00, 
	0x01, 0xE8, 0xB6, 0xFD, 0xFF, 0xFF, 0x6A, 0x0D, 0x58, 0xE9, 
	0xBA, 0x00, 0x00, 0x00, 0xB8, 0xA8, 0x18, 0x00, 0x01, 0xEB, 
	0x8B, 0x8D, 0x45, 0x8C, 0x50, 0x8D, 0x45, 0x90, 0x50, 0x8D, 
	0x85, 0x90, 0x03, 0x00, 0x00, 0x50, 0xE8, 0x88, 0xF8, 0xFF, 
	0xFF, 0x85, 0xC0, 0x74, 0x61, 0xFF, 0x35, 0x00, 0x90, 0x00, 
	0x01, 0x8D, 0x85, 0x90, 0x01, 0x00, 0x00, 0x50, 0xFF, 0x75, 
	0x8C, 0xFF, 0x75, 0x88, 0xE8, 0x8B, 0xF9, 0xFF, 0xFF, 0x8B, 
	0xF0, 0x3B, 0xF7, 0x75, 0x2B, 0x68, 0x98, 0x18, 0x00, 0x01, 
	0x89, 0x7D, 0x84, 0xE8, 0x11, 0x04, 0x00, 0x00, 0xC7, 0x04, 
	0x24, 0x88, 0x13, 0x00, 0x00, 0x68, 0xC0, 0x9E, 0x00, 0x01, 
	0x68, 0xC0, 0xA2, 0x00, 0x01, 0x68, 0x78, 0x18, 0x00, 0x01, 
	0x53, 0xE8, 0x73, 0xFD, 0xFF, 0xFF, 0xEB, 0x31, 0x68, 0x6C, 
	0x18, 0x00, 0x01, 0xE8, 0xE9, 0x03, 0x00, 0x00, 0x59, 0x56, 
	0x68, 0x54, 0x18, 0x00, 0x01, 0xE8, 0x30, 0xFD, 0xFF, 0xFF, 
	0xEB, 0x19, 0xFF, 0x15, 0xE0, 0x10, 0x00, 0x01, 0x50, 0x68, 
	0x80, 0x98, 0x00, 0x01, 0x68, 0x30, 0x18, 0x00, 0x01, 0xE8, 
	0xC5, 0x03, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0xFF, 0x75, 0x88, 
	0xE8, 0x9F, 0x4D, 0x00, 0x00, 0x39, 0x7D, 0x8C, 0x74, 0x11, 
	0xFF, 0x75, 0x8C, 0x57, 0xFF, 0x15, 0xD4, 0x10, 0x00, 0x01, 
	0x50, 0xFF, 0x15, 0xE4, 0x10, 0x00, 0x01, 0x8B, 0x45, 0x84, 
	0x5E, 0x5B, 0x8B, 0x8D, 0xA4, 0x06, 0x00, 0x00, 0x5F, 0xE8, 
	0x7E, 0x4D, 0x00, 0x00, 0x81, 0xC5, 0xA8, 0x06, 0x00, 0x00, 
	0xC9, 0xC3, 0x83, 0x3D, 0x8C, 0x99, 0x00, 0x01, 0x02, 0x74, 
	0x05, 0xE8, 0x5C, 0x07, 0x00, 0x00, 0xFF, 0x74, 0x24, 0x04, 
	0xE8, 0xF2, 0x05, 0x00, 0x00, 0x68, 0xFF, 0x00, 0x00, 0x00, 
	0xFF, 0x15, 0x04, 0x90, 0x00, 0x01, 0x59, 0x59, 0xC3, 0x66, 
	0x81, 0x3D, 0x00, 0x00, 0x00, 0x01, 0x4D, 0x5A, 0x75, 0x27, 
	0xA1, 0x3C, 0x00, 0x00, 0x01, 0x8D, 0x80, 0x00, 0x00, 0x00, 
	0x01, 0x81, 0x38, 0x50, 0x45, 0x00, 0x00, 0x75, 0x14, 0x0F, 
	0xB7, 0x48, 0x18, 0x81, 0xF9, 0x0B, 0x01, 0x00, 0x00, 0x74, 
	0x1E, 0x81, 0xF9, 0x0B, 0x02, 0x00, 0x00, 0x74, 0x03, 0x33, 
	0xC0, 0xC3, 0x83, 0xB8, 0x84, 0x00, 0x00, 0x00, 0x0E, 0x76, 
	0xF4, 0x33, 0xC9, 0x39, 0x88, 0xF8, 0x00, 0x00, 0x00, 0xEB, 
	0x0E, 0x83, 0x78, 0x74, 0x0E, 0x76, 0xE4, 0x33, 0xC9, 0x39, 
	0x88, 0xE8, 0x00, 0x00, 0x00, 0x0F, 0x95, 0xC1, 0x8B, 0xC1, 
	0xC3, 0x6A, 0x18, 0x68, 0x30, 0x19, 0x00, 0x01, 0xE8, 0xA9, 
	0x01, 0x00, 0x00, 0xBB, 0x94, 0x00, 0x00, 0x00, 0x53, 0x6A, 
	0x00, 0x8B, 0x3D, 0xD4, 0x10, 0x00, 0x01, 0xFF, 0xD7, 0x50, 
	0xFF, 0x15, 0xD8, 0x10, 0x00, 0x01, 0x8B, 0xF0, 0x85, 0xF6, 
	0x74, 0x18, 0x89, 0x1E, 0x56, 0xFF, 0x15, 0x2C, 0x10, 0x00, 
	0x01, 0x56, 0x85, 0xC0, 0x75, 0x14, 0x50, 0xFF, 0xD7, 0x50, 
	0xFF, 0x15, 0xE4, 0x10, 0x00, 0x01, 0xB8, 0xFF, 0x00, 0x00, 
	0x00, 0xE9, 0x4D, 0x01, 0x00, 0x00, 0x8B, 0x46, 0x10, 0xA3, 
	0x9C, 0x99, 0x00, 0x01, 0x8B, 0x46, 0x04, 0xA3, 0xA8, 0x99, 
	0x00, 0x01, 0x8B, 0x46, 0x08, 0xA3, 0xAC, 0x99, 0x00, 0x01, 
	0x8B, 0x46, 0x0C, 0x25, 0xFF, 0x7F, 0x00, 0x00, 0xA3, 0xA0, 
	0x99, 0x00, 0x01, 0x33, 0xDB, 0x53, 0xFF, 0xD7, 0x50, 0xFF, 
	0x15, 0xE4, 0x10, 0x00, 0x01, 0x83, 0x3D, 0x9C, 0x99, 0x00, 
	0x01, 0x02, 0x74, 0x07, 0x80, 0x0D, 0xA1, 0x99, 0x00, 0x01, 
	0x80, 0xA1, 0xA8, 0x99, 0x00, 0x01, 0xC1, 0xE0, 0x08, 0x03, 
	0x05, 0xAC, 0x99, 0x00, 0x01, 0xA3, 0xA4, 0x99, 0x00, 0x01, 
	0xE8, 0x00, 0xFF, 0xFF, 0xFF, 0x89, 0x45, 0xE4, 0x53, 0xE8, 
	0xD4, 0x0D, 0x00, 0x00, 0x59, 0x85, 0xC0, 0x75, 0x21, 0x83, 
	0x3D, 0x8C, 0x99, 0x00, 0x01, 0x02, 0x74, 0x05, 0xE8, 0x29, 
	0x06, 0x00, 0x00, 0x6A, 0x1C, 0xE8, 0xC1, 0x04, 0x00, 0x00, 
	0x68, 0xFF, 0x00, 0x00, 0x00, 0xE8, 0x39, 0x03, 0x00, 0x00, 
	0x59, 0x59, 0x89, 0x5D, 0xFC, 0xE8, 0xC9, 0x0B, 0x00, 0x00, 
	0x85, 0xC0, 0x7D, 0x08, 0x6A, 0x1B, 0xE8, 0x99, 0xFE, 0xFF, 
	0xFF, 0x59, 0xFF, 0x15, 0x28, 0x10, 0x00, 0x01, 0xA3, 0x74, 
	0xBA, 0x00, 0x01, 0xE8, 0x87, 0x0A, 0x00, 0x00, 0xA3, 0x84, 
	0x99, 0x00, 0x01, 0xE8, 0xDC, 0x09, 0x00, 0x00, 0x85, 0xC0, 
	0x7D, 0x08, 0x6A, 0x08, 0xE8, 0x73, 0xFE, 0xFF, 0xFF, 0x59, 
	0xE8, 0x81, 0x07, 0x00, 0x00, 0x85, 0xC0, 0x7D, 0x08, 0x6A, 
	0x09, 0xE8, 0x62, 0xFE, 0xFF, 0xFF, 0x59, 0xE8, 0x17, 0x03, 
	0x00, 0x00, 0x89, 0x45, 0xDC, 0x3B, 0xC3, 0x74, 0x07, 0x50, 
	0xE8, 0x4F, 0xFE, 0xFF, 0xFF, 0x59, 0xA1, 0xBC, 0x99, 0x00, 
	0x01, 0xA3, 0xC0, 0x99, 0x00, 0x01, 0x50, 0xFF, 0x35, 0xB4, 
	0x99, 0x00, 0x01, 0xFF, 0x35, 0xB0, 0x99, 0x00, 0x01, 0xE8, 
	0xF3, 0xFB, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0xF0, 0x89, 
	0x75, 0xD8, 0x39, 0x5D, 0xE4, 0x75, 0x06, 0x56, 0xE8, 0xE8, 
	0x03, 0x00, 0x00, 0xE8, 0x05, 0x04, 0x00, 0x00, 0xEB, 0x2B, 
	0x8B, 0x45, 0xEC, 0x8B, 0x08, 0x8B, 0x09, 0x89, 0x4D, 0xE0, 
	0x50, 0x51, 0xE8, 0xAA, 0x05, 0x00, 0x00, 0x59, 0x59, 0xC3, 
	0x8B, 0x65, 0xE8, 0x8B, 0x75, 0xE0, 0x83, 0x7D, 0xE4, 0x00, 
	0x75, 0x06, 0x56, 0xE8, 0xCC, 0x03, 0x00, 0x00, 0xE8, 0xE7, 
	0x03, 0x00, 0x00, 0x83, 0x4D, 0xFC, 0xFF, 0x8B, 0xC6, 0xE8, 
	0x53, 0x00, 0x00, 0x00, 0xC3, 0x8B, 0x44, 0x24, 0x04, 0x66, 
	0x8B, 0x08, 0x40, 0x40, 0x66, 0x85, 0xC9, 0x75, 0xF6, 0x2B, 
	0x44, 0x24, 0x04, 0xD1, 0xF8, 0x48, 0xC3, 0xCC, 0x68, 0x0C, 
	0x2F, 0x00, 0x01, 0x64, 0xA1, 0x00, 0x00, 0x00, 0x00, 0x50, 
	0x8B, 0x44, 0x24, 0x10, 0x89, 0x6C, 0x24, 0x10, 0x8D, 0x6C, 
	0x24, 0x10, 0x2B, 0xE0, 0x53, 0x56, 0x57, 0x8B, 0x45, 0xF8, 
	0x89, 0x65, 0xE8, 0x50, 0x8B, 0x45, 0xFC, 0xC7, 0x45, 0xFC, 
	0xFF, 0xFF, 0xFF, 0xFF, 0x89, 0x45, 0xF8, 0x8D, 0x45, 0xF0, 
	0x64, 0xA3, 0x00, 0x00, 0x00, 0x00, 0xC3, 0x8B, 0x4D, 0xF0, 
	0x64, 0x89, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x59, 0x5F, 0x5E, 
	0x5B, 0xC9, 0x51, 0xC3, 0x56, 0x43, 0x32, 0x30, 0x58, 0x43, 
	0x30, 0x30, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x08, 0x53, 0x56, 
	0x57, 0x55, 0xFC, 0x8B, 0x5D, 0x0C, 0x8B, 0x45, 0x08, 0xF7, 
	0x40, 0x04, 0x06, 0x00, 0x00, 0x00, 0x0F, 0x85, 0xAB, 0x00, 
	0x00, 0x00, 0x89, 0x45, 0xF8, 0x8B, 0x45, 0x10, 0x89, 0x45, 
	0xFC, 0x8D, 0x45, 0xF8, 0x89, 0x43, 0xFC, 0x8B, 0x73, 0x0C, 
	0x8B, 0x7B, 0x08, 0x53, 0xE8, 0x81, 0x0D, 0x00, 0x00, 0x83, 
	0xC4, 0x04, 0x0B, 0xC0, 0x74, 0x7B, 0x83, 0xFE, 0xFF, 0x74, 
	0x7D, 0x8D, 0x0C, 0x76, 0x8B, 0x44, 0x8F, 0x04, 0x0B, 0xC0, 
	0x74, 0x59, 0x56, 0x55, 0x8D, 0x6B, 0x10, 0x33, 0xDB, 0x33, 
	0xC9, 0x33, 0xD2, 0x33, 0xF6, 0x33, 0xFF, 0xFF, 0xD0, 0x5D, 
	0x5E, 0x8B, 0x5D, 0x0C, 0x0B, 0xC0, 0x74, 0x3F, 0x78, 0x48, 
	0x8B, 0x7B, 0x08, 0x53, 0xE8, 0x57, 0x0C, 0x00, 0x00, 0x83, 
	0xC4, 0x04, 0x8D, 0x6B, 0x10, 0x56, 0x53, 0xE8, 0x8C, 0x0C, 
	0x00, 0x00, 0x83, 0xC4, 0x08, 0x8D, 0x0C, 0x76, 0x6A, 0x01, 
	0x8B, 0x44, 0x8F, 0x08, 0xE8, 0x0F, 0x0D, 0x00, 0x00, 0x8B, 
	0x04, 0x8F, 0x89, 0x43, 0x0C, 0x8B, 0x44, 0x8F, 0x08, 0x33, 
	0xDB, 0x33, 0xC9, 0x33, 0xD2, 0x33, 0xF6, 0x33, 0xFF, 0xFF, 
	0xD0, 0x8B, 0x7B, 0x08, 0x8D, 0x0C, 0x76, 0x8B, 0x34, 0x8F, 
	0xEB, 0x8C, 0xB8, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x23, 0x8B, 
	0x45, 0x08, 0x83, 0x48, 0x04, 0x08, 0xB8, 0x01, 0x00, 0x00, 
	0x00, 0xEB, 0x15, 0x55, 0x8D, 0x6B, 0x10, 0x6A, 0xFF, 0x53, 
	0xE8, 0x39, 0x0C, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x5D, 0xB8, 
	0x01, 0x00, 0x00, 0x00, 0x5D, 0x5F, 0x5E, 0x5B, 0x8B, 0xE5, 
	0x5D, 0xC3, 0x55, 0x8B, 0x4C, 0x24, 0x08, 0x8B, 0x29, 0x8B, 
	0x41, 0x1C, 0x50, 0x8B, 0x41, 0x18, 0x50, 0xE8, 0x14, 0x0C, 
	0x00, 0x00, 0x83, 0xC4, 0x08, 0x5D, 0xC2, 0x04, 0x00, 0x53, 
	0x56, 0x57, 0xBE, 0x70, 0x91, 0x00, 0x01, 0x56, 0xE8, 0xD4, 
	0x0E, 0x00, 0x00, 0x8B, 0xF8, 0x8D, 0x44, 0x24, 0x18, 0x50, 
	0xFF, 0x74, 0x24, 0x18, 0x56, 0xE8, 0x15, 0x10, 0x00, 0x00, 
	0x56, 0x57, 0x8B, 0xD8, 0xE8, 0x42, 0x0F, 0x00, 0x00, 0x83, 
	0xC4, 0x18, 0x5F, 0x5E, 0x8B, 0xC3, 0x5B, 0xC3, 0x55, 0x8B, 
	0xEC, 0x83, 0xEC, 0x20, 0x56, 0x8B, 0x75, 0x08, 0x57, 0x8D, 
	0x45, 0x10, 0x50, 0xFF, 0x75, 0x0C, 0x8D, 0x45, 0xE0, 0x50, 
	0xC7, 0x45, 0xE4, 0xFF, 0xFF, 0xFF, 0x7F, 0xC7, 0x45, 0xEC, 
	0x42, 0x00, 0x00, 0x00, 0x89, 0x75, 0xE8, 0x89, 0x75, 0xE0, 
	0xE8, 0xD4, 0x0F, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x85, 0xF6, 
	0x8B, 0xF8, 0x74, 0x1A, 0xFF, 0x4D, 0xE4, 0x78, 0x08, 0x8B, 
	0x45, 0xE0, 0xC6, 0x00, 0x00, 0xEB, 0x0D, 0x8D, 0x45, 0xE0, 
	0x50, 0x6A, 0x00, 0xE8, 0x0B, 0x18, 0x00, 0x00, 0x59, 0x59, 
	0x8B, 0xC7, 0x5F, 0x5E, 0xC9, 0xC3, 0x53, 0x56, 0x57, 0xBE, 
	0x70, 0x91, 0x00, 0x01, 0x56, 0xE8, 0x4B, 0x0E, 0x00, 0x00, 
	0x8B, 0xF8, 0x8D, 0x44, 0x24, 0x18, 0x50, 0xFF, 0x74, 0x24, 
	0x18, 0x56, 0xE8, 0x81, 0x19, 0x00, 0x00, 0x56, 0x57, 0x8B, 
	0xD8, 0xE8, 0xB9, 0x0E, 0x00, 0x00, 0x83, 0xC4, 0x18, 0x5F, 
	0x5E, 0x8B, 0xC3, 0x5B, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 
	0xCC, 0xCC, 0xCC, 0xCC, 0x3D, 0x00, 0x10, 0x00, 0x00, 0x73, 
	0x0E, 0xF7, 0xD8, 0x03, 0xC4, 0x83, 0xC0, 0x04, 0x85, 0x00, 
	0x94, 0x8B, 0x00, 0x50, 0xC3, 0x51, 0x8D, 0x4C, 0x24, 0x08, 
	0x81, 0xE9, 0x00, 0x10, 0x00, 0x00, 0x2D, 0x00, 0x10, 0x00, 
	0x00, 0x85, 0x01, 0x3D, 0x00, 0x10, 0x00, 0x00, 0x73, 0xEC, 
	0x2B, 0xC8, 0x8B, 0xC4, 0x85, 0x01, 0x8B, 0xE1, 0x8B, 0x08, 
	0x8B, 0x40, 0x04, 0x50, 0xC3, 0x68, 0x4C, 0x19, 0x00, 0x01, 
	0xFF, 0x15, 0x38, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x74, 0x16, 
	0x68, 0x3C, 0x19, 0x00, 0x01, 0x50, 0xFF, 0x15, 0x34, 0x10, 
	0x00, 0x01, 0x85, 0xC0, 0x74, 0x06, 0xFF, 0x74, 0x24, 0x04, 
	0xFF, 0xD0, 0xFF, 0x74, 0x24, 0x04, 0xFF, 0x15, 0x30, 0x10, 
	0x00, 0x01, 0xCC, 0xA1, 0x70, 0xBA, 0x00, 0x01, 0x85, 0xC0, 
	0x74, 0x02, 0xFF, 0xD0, 0x56, 0x57, 0xB9, 0x24, 0x11, 0x00, 
	0x01, 0xBF, 0x30, 0x11, 0x00, 0x01, 0x33, 0xC0, 0x3B, 0xCF, 
	0x8B, 0xF1, 0x73, 0x17, 0x85, 0xC0, 0x75, 0x34, 0x8B, 0x0E, 
	0x85, 0xC9, 0x74, 0x02, 0xFF, 0xD1, 0x83, 0xC6, 0x04, 0x3B, 
	0xF7, 0x72, 0xED, 0x85, 0xC0, 0x75, 0x21, 0xBE, 0x18, 0x11, 
	0x00, 0x01, 0x8B, 0xC6, 0xBF, 0x20, 0x11, 0x00, 0x01, 0x3B, 
	0xC7, 0x73, 0x0F, 0x8B, 0x06, 0x85, 0xC0, 0x74, 0x02, 0xFF, 
	0xD0, 0x83, 0xC6, 0x04, 0x3B, 0xF7, 0x72, 0xF1, 0x33, 0xC0, 
	0x5F, 0x5E, 0xC3, 0x33, 0xC0, 0x40, 0x39, 0x05, 0xDC, 0x99, 
	0x00, 0x01, 0x0F, 0x84, 0x8A, 0x00, 0x00, 0x00, 0x83, 0x7C, 
	0x24, 0x08, 0x00, 0xA3, 0xD8, 0x99, 0x00, 0x01, 0x8A, 0x44, 
	0x24, 0x0C, 0x56, 0x57, 0xA2, 0xD4, 0x99, 0x00, 0x01, 0x75, 
	0x52, 0x8B, 0x0D, 0x68, 0xBA, 0x00, 0x01, 0x85, 0xC9, 0x74, 
	0x29, 0xA1, 0x64, 0xBA, 0x00, 0x01, 0x83, 0xE8, 0x04, 0x3B, 
	0xC1, 0xEB, 0x16, 0x8B, 0x00, 0x85, 0xC0, 0x74, 0x02, 0xFF, 
	0xD0, 0xA1, 0x64, 0xBA, 0x00, 0x01, 0x83, 0xE8, 0x04, 0x3B, 
	0x05, 0x68, 0xBA, 0x00, 0x01, 0xA3, 0x64, 0xBA, 0x00, 0x01, 
	0x73, 0xE3, 0xB8, 0x34, 0x11, 0x00, 0x01, 0xBE, 0x3C, 0x11, 
	0x00, 0x01, 0x3B, 0xC6, 0x8B, 0xF8, 0x73, 0x0F, 0x8B, 0x07, 
	0x85, 0xC0, 0x74, 0x02, 0xFF, 0xD0, 0x83, 0xC7, 0x04, 0x3B, 
	0xFE, 0x72, 0xF1, 0xB8, 0x40, 0x11, 0x00, 0x01, 0xBE, 0x44, 
	0x11, 0x00, 0x01, 0x3B, 0xC6, 0x8B, 0xF8, 0x73, 0x0F, 0x8B, 
	0x07, 0x85, 0xC0, 0x74, 0x02, 0xFF, 0xD0, 0x83, 0xC7, 0x04, 
	0x3B, 0xFE, 0x72, 0xF1, 0x5F, 0x5E, 0x83, 0x7C, 0x24, 0x0C, 
	0x00, 0x75, 0x13, 0xFF, 0x74, 0x24, 0x04, 0xC7, 0x05, 0xDC, 
	0x99, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0xE8, 0xC3, 0xFE, 
	0xFF, 0xFF, 0xC3, 0x6A, 0x00, 0x6A, 0x00, 0xFF, 0x74, 0x24, 
	0x0C, 0xE8, 0x3F, 0xFF, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0xC3, 
	0x6A, 0x00, 0x6A, 0x01, 0xFF, 0x74, 0x24, 0x0C, 0xE8, 0x2E, 
	0xFF, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0xC3, 0x6A, 0x01, 0x6A, 
	0x00, 0x6A, 0x00, 0xE8, 0x1F, 0xFF, 0xFF, 0xFF, 0x83, 0xC4, 
	0x0C, 0xC3, 0x6A, 0x01, 0x6A, 0x01, 0x6A, 0x00, 0xE8, 0x10, 
	0xFF, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0xC3, 0x55, 0x8B, 0xEC, 
	0x51, 0x8B, 0x4D, 0x08, 0x33, 0xC0, 0x3B, 0x0C, 0xC5, 0x10, 
	0x90, 0x00, 0x01, 0x74, 0x06, 0x40, 0x83, 0xF8, 0x12, 0x72, 
	0xF1, 0x56, 0x8B, 0xF0, 0xC1, 0xE6, 0x03, 0x3B, 0x8E, 0x10, 
	0x90, 0x00, 0x01, 0x89, 0x75, 0x08, 0x0F, 0x85, 0x31, 0x01, 
	0x00, 0x00, 0xA1, 0x8C, 0x99, 0x00, 0x01, 0x83, 0xF8, 0x01, 
	0x53, 0x0F, 0x84, 0xF2, 0x00, 0x00, 0x00, 0x85, 0xC0, 0x75, 
	0x0D, 0x83, 0x3D, 0x08, 0x90, 0x00, 0x01, 0x01, 0x0F, 0x84, 
	0xE1, 0x00, 0x00, 0x00, 0x81, 0xF9, 0xFC, 0x00, 0x00, 0x00, 
	0x0F, 0x84, 0x04, 0x01, 0x00, 0x00, 0x57, 0x6A, 0x06, 0x59, 
	0xBE, 0xA0, 0x1C, 0x00, 0x01, 0xBF, 0xE0, 0x99, 0x00, 0x01, 
	0xF3, 0xA5, 0x68, 0x04, 0x01, 0x00, 0x00, 0xBB, 0xFA, 0x99, 
	0x00, 0x01, 0x53, 0x66, 0xA5, 0x6A, 0x00, 0xC6, 0x05, 0xFE, 
	0x9A, 0x00, 0x01, 0x00, 0xFF, 0x15, 0x44, 0x10, 0x00, 0x01, 
	0x85, 0xC0, 0x75, 0x12, 0x6A, 0x05, 0x59, 0xBE, 0x88, 0x1C, 
	0x00, 0x01, 0xBF, 0xFA, 0x99, 0x00, 0x01, 0xF3, 0xA5, 0x66, 
	0xA5, 0xA4, 0x8B, 0xC3, 0x8D, 0x50, 0x01, 0x8A, 0x08, 0x40, 
	0x84, 0xC9, 0x75, 0xF9, 0x2B, 0xC2, 0x40, 0x83, 0xF8, 0x3C, 
	0x76, 0x24, 0x8B, 0xC3, 0x8D, 0x50, 0x01, 0x8A, 0x08, 0x40, 
	0x84, 0xC9, 0x75, 0xF9, 0x2B, 0xC2, 0x6A, 0x03, 0x8D, 0x80, 
	0xBF, 0x99, 0x00, 0x01, 0x68, 0x84, 0x1C, 0x00, 0x01, 0x50, 
	0xE8, 0xA5, 0x1F, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0xBA, 0xE0, 
	0x99, 0x00, 0x01, 0x8B, 0xFA, 0x4F, 0x8A, 0x47, 0x01, 0x47, 
	0x84, 0xC0, 0x75, 0xF8, 0x8B, 0x45, 0x08, 0x8B, 0x80, 0x14, 
	0x90, 0x00, 0x01, 0xBE, 0x80, 0x1C, 0x00, 0x01, 0x66, 0xA5, 
	0xA4, 0x8B, 0xF0, 0x8A, 0x08, 0x40, 0x84, 0xC9, 0x75, 0xF9, 
	0x8B, 0xFA, 0x2B, 0xC6, 0x4F, 0x8A, 0x4F, 0x01, 0x47, 0x84, 
	0xC9, 0x75, 0xF8, 0x8B, 0xC8, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 
	0x68, 0x10, 0x20, 0x01, 0x00, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 
	0x68, 0x58, 0x1C, 0x00, 0x01, 0x52, 0xF3, 0xA4, 0xE8, 0x52, 
	0x1E, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x5F, 0xEB, 0x2F, 0x6A, 
	0xF4, 0xFF, 0x15, 0x40, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x74, 
	0x23, 0x8B, 0xB6, 0x14, 0x90, 0x00, 0x01, 0x8B, 0xCE, 0x8D, 
	0x51, 0x01, 0x8A, 0x19, 0x41, 0x84, 0xDB, 0x75, 0xF9, 0x6A, 
	0x00, 0x2B, 0xCA, 0x8D, 0x55, 0xFC, 0x52, 0x51, 0x56, 0x50, 
	0xFF, 0x15, 0x3C, 0x10, 0x00, 0x01, 0x5B, 0x5E, 0xC9, 0xC3, 
	0xA1, 0x8C, 0x99, 0x00, 0x01, 0x83, 0xF8, 0x01, 0x74, 0x0D, 
	0x85, 0xC0, 0x75, 0x2A, 0x83, 0x3D, 0x08, 0x90, 0x00, 0x01, 
	0x01, 0x75, 0x21, 0x68, 0xFC, 0x00, 0x00, 0x00, 0xE8, 0x7E, 
	0xFE, 0xFF, 0xFF, 0xA1, 0xF4, 0x9C, 0x00, 0x01, 0x85, 0xC0, 
	0x59, 0x74, 0x02, 0xFF, 0xD0, 0x68, 0xFF, 0x00, 0x00, 0x00, 
	0xE8, 0x68, 0xFE, 0xFF, 0xFF, 0x59, 0xC3, 0x55, 0x8B, 0xEC, 
	0x8B, 0x55, 0x08, 0xA1, 0x20, 0x91, 0x00, 0x01, 0x53, 0xB9, 
	0xA0, 0x90, 0x00, 0x01, 0x56, 0x39, 0x11, 0x74, 0x11, 0x8D, 
	0x34, 0x40, 0x83, 0xC1, 0x0C, 0x8D, 0x34, 0xB5, 0xA0, 0x90, 
	0x00, 0x01, 0x3B, 0xCE, 0x72, 0xEB, 0x8D, 0x04, 0x40, 0x8D, 
	0x04, 0x85, 0xA0, 0x90, 0x00, 0x01, 0x3B, 0xC8, 0x73, 0x04, 
	0x39, 0x11, 0x74, 0x02, 0x33, 0xC9, 0x85, 0xC9, 0x0F, 0x84, 
	0x21, 0x01, 0x00, 0x00, 0x8B, 0x59, 0x08, 0x85, 0xDB, 0x0F, 
	0x84, 0x16, 0x01, 0x00, 0x00, 0x83, 0xFB, 0x05, 0x75, 0x0C, 
	0x83, 0x61, 0x08, 0x00, 0x33, 0xC0, 0x40, 0xE9, 0x0E, 0x01, 
	0x00, 0x00, 0x83, 0xFB, 0x01, 0x0F, 0x84, 0xF7, 0x00, 0x00, 
	0x00, 0xA1, 0xF8, 0x9C, 0x00, 0x01, 0x89, 0x45, 0x08, 0x8B, 
	0x45, 0x0C, 0xA3, 0xF8, 0x9C, 0x00, 0x01, 0x8B, 0x41, 0x04, 
	0x83, 0xF8, 0x08, 0x0F, 0x85, 0xCB, 0x00, 0x00, 0x00, 0xA1, 
	0x18, 0x91, 0x00, 0x01, 0x8B, 0x15, 0x1C, 0x91, 0x00, 0x01, 
	0x03, 0xD0, 0x3B, 0xC2, 0x7D, 0x15, 0x8D, 0x34, 0x40, 0x8D, 
	0x34, 0xB5, 0xA8, 0x90, 0x00, 0x01, 0x2B, 0xD0, 0x83, 0x26, 
	0x00, 0x83, 0xC6, 0x0C, 0x4A, 0x75, 0xF7, 0x8B, 0x09, 0x81, 
	0xF9, 0x8E, 0x00, 0x00, 0xC0, 0x8B, 0x35, 0x24, 0x91, 0x00, 
	0x01, 0x75, 0x0C, 0xC7, 0x05, 0x24, 0x91, 0x00, 0x01, 0x83, 
	0x00, 0x00, 0x00, 0xEB, 0x76, 0x81, 0xF9, 0x90, 0x00, 0x00, 
	0xC0, 0x75, 0x0C, 0xC7, 0x05, 0x24, 0x91, 0x00, 0x01, 0x81, 
	0x00, 0x00, 0x00, 0xEB, 0x62, 0x81, 0xF9, 0x91, 0x00, 0x00, 
	0xC0, 0x75, 0x0C, 0xC7, 0x05, 0x24, 0x91, 0x00, 0x01, 0x84, 
	0x00, 0x00, 0x00, 0xEB, 0x4E, 0x81, 0xF9, 0x93, 0x00, 0x00, 
	0xC0, 0x75, 0x0C, 0xC7, 0x05, 0x24, 0x91, 0x00, 0x01, 0x85, 
	0x00, 0x00, 0x00, 0xEB, 0x3A, 0x81, 0xF9, 0x8D, 0x00, 0x00, 
	0xC0, 0x75, 0x0C, 0xC7, 0x05, 0x24, 0x91, 0x00, 0x01, 0x82, 
	0x00, 0x00, 0x00, 0xEB, 0x26, 0x81, 0xF9, 0x8F, 0x00, 0x00, 
	0xC0, 0x75, 0x0C, 0xC7, 0x05, 0x24, 0x91, 0x00, 0x01, 0x86, 
	0x00, 0x00, 0x00, 0xEB, 0x12, 0x81, 0xF9, 0x92, 0x00, 0x00, 
	0xC0, 0x75, 0x0A, 0xC7, 0x05, 0x24, 0x91, 0x00, 0x01, 0x8A, 
	0x00, 0x00, 0x00, 0xFF, 0x35, 0x24, 0x91, 0x00, 0x01, 0x6A, 
	0x08, 0xFF, 0xD3, 0x59, 0x89, 0x35, 0x24, 0x91, 0x00, 0x01, 
	0xEB, 0x07, 0x83, 0x61, 0x08, 0x00, 0x50, 0xFF, 0xD3, 0x8B, 
	0x45, 0x08, 0x59, 0xA3, 0xF8, 0x9C, 0x00, 0x01, 0x83, 0xC8, 
	0xFF, 0xEB, 0x09, 0xFF, 0x75, 0x0C, 0xFF, 0x15, 0x48, 0x10, 
	0x00, 0x01, 0x5E, 0x5B, 0x5D, 0xC3, 0x57, 0x33, 0xFF, 0x39, 
	0x3D, 0x6C, 0xBA, 0x00, 0x01, 0x75, 0x05, 0xE8, 0xD6, 0x22, 
	0x00, 0x00, 0xA1, 0x84, 0x99, 0x00, 0x01, 0x3B, 0xC7, 0x75, 
	0x05, 0x83, 0xC8, 0xFF, 0x5F, 0xC3, 0x56, 0xEB, 0x18, 0x80, 
	0xF9, 0x3D, 0x74, 0x01, 0x47, 0x8B, 0xC8, 0x8D, 0x71, 0x01, 
	0x8A, 0x11, 0x41, 0x84, 0xD2, 0x75, 0xF9, 0x2B, 0xCE, 0x8D, 
	0x44, 0x08, 0x01, 0x8A, 0x08, 0x84, 0xC9, 0x75, 0xE2, 0x53, 
	0x8D, 0x0C, 0xBD, 0x04, 0x00, 0x00, 0x00, 0xE8, 0x7A, 0x1E, 
	0x00, 0x00, 0x8B, 0xD8, 0x85, 0xDB, 0x89, 0x1D, 0xBC, 0x99, 
	0x00, 0x01, 0x75, 0x05, 0x83, 0xC8, 0xFF, 0xEB, 0x66, 0x8B, 
	0x35, 0x84, 0x99, 0x00, 0x01, 0xEB, 0x36, 0x8B, 0xC6, 0x8D, 
	0x78, 0x01, 0x8A, 0x10, 0x40, 0x84, 0xD2, 0x75, 0xF9, 0x2B, 
	0xC7, 0x80, 0xF9, 0x3D, 0x8D, 0x78, 0x01, 0x74, 0x1E, 0x8B, 
	0xCF, 0xE8, 0x44, 0x1E, 0x00, 0x00, 0x85, 0xC0, 0x89, 0x03, 
	0x74, 0x3F, 0x8B, 0xCE, 0x8B, 0xD0, 0x8A, 0x01, 0x41, 0x88, 
	0x02, 0x42, 0x84, 0xC0, 0x75, 0xF6, 0x83, 0xC3, 0x04, 0x03, 
	0xF7, 0x8A, 0x0E, 0x84, 0xC9, 0x75, 0xC4, 0xFF, 0x35, 0x84, 
	0x99, 0x00, 0x01, 0xE8, 0xE2, 0x1D, 0x00, 0x00, 0x83, 0x25, 
	0x84, 0x99, 0x00, 0x01, 0x00, 0x83, 0x23, 0x00, 0xC7, 0x05, 
	0x60, 0xBA, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x33, 0xC0, 
	0x59, 0x5B, 0x5E, 0x5F, 0xC3, 0xFF, 0x35, 0xBC, 0x99, 0x00, 
	0x01, 0xE8, 0xBC, 0x1D, 0x00, 0x00, 0x83, 0x25, 0xBC, 0x99, 
	0x00, 0x01, 0x00, 0x83, 0xC8, 0xFF, 0xEB, 0xE4, 0x55, 0x8B, 
	0xEC, 0x51, 0x53, 0x8B, 0x5D, 0x0C, 0x33, 0xD2, 0x39, 0x55, 
	0x08, 0x57, 0x89, 0x16, 0x8B, 0xF9, 0xC7, 0x03, 0x01, 0x00, 
	0x00, 0x00, 0x74, 0x09, 0x8B, 0x4D, 0x08, 0x83, 0x45, 0x08, 
	0x04, 0x89, 0x39, 0x80, 0x38, 0x22, 0x75, 0x0E, 0x33, 0xC9, 
	0x85, 0xD2, 0x0F, 0x94, 0xC1, 0x40, 0x8B, 0xD1, 0xB1, 0x22, 
	0xEB, 0x2D, 0xFF, 0x06, 0x85, 0xFF, 0x74, 0x05, 0x8A, 0x08, 
	0x88, 0x0F, 0x47, 0x8A, 0x08, 0x0F, 0xB6, 0xD9, 0x40, 0xF6, 
	0x83, 0x01, 0xA7, 0x00, 0x01, 0x04, 0x74, 0x0C, 0xFF, 0x06, 
	0x85, 0xFF, 0x74, 0x05, 0x8A, 0x18, 0x88, 0x1F, 0x47, 0x40, 
	0x84, 0xC9, 0x8B, 0x5D, 0x0C, 0x74, 0x32, 0x85, 0xD2, 0x75, 
	0xBC, 0x80, 0xF9, 0x20, 0x74, 0x05, 0x80, 0xF9, 0x09, 0x75, 
	0xB2, 0x85, 0xFF, 0x74, 0x04, 0xC6, 0x47, 0xFF, 0x00, 0x83, 
	0x65, 0xFC, 0x00, 0x80, 0x38, 0x00, 0x0F, 0x84, 0xD6, 0x00, 
	0x00, 0x00, 0x8A, 0x08, 0x80, 0xF9, 0x20, 0x74, 0x05, 0x80, 
	0xF9, 0x09, 0x75, 0x06, 0x40, 0xEB, 0xF1, 0x48, 0xEB, 0xE1, 
	0x80, 0x38, 0x00, 0x0F, 0x84, 0xBB, 0x00, 0x00, 0x00, 0x83, 
	0x7D, 0x08, 0x00, 0x74, 0x09, 0x8B, 0x4D, 0x08, 0x83, 0x45, 
	0x08, 0x04, 0x89, 0x39, 0xFF, 0x03, 0x33, 0xDB, 0x43, 0x33, 
	0xD2, 0xEB, 0x02, 0x40, 0x42, 0x80, 0x38, 0x5C, 0x74, 0xF9, 
	0x80, 0x38, 0x22, 0x75, 0x26, 0xF6, 0xC2, 0x01, 0x75, 0x1F, 
	0x83, 0x7D, 0xFC, 0x00, 0x74, 0x0C, 0x8D, 0x48, 0x01, 0x80, 
	0x39, 0x22, 0x75, 0x04, 0x8B, 0xC1, 0xEB, 0x02, 0x33, 0xDB, 
	0x33, 0xC9, 0x39, 0x4D, 0xFC, 0x0F, 0x94, 0xC1, 0x89, 0x4D, 
	0xFC, 0xD1, 0xEA, 0x85, 0xD2, 0x74, 0x0D, 0x85, 0xFF, 0x74, 
	0x04, 0xC6, 0x07, 0x5C, 0x47, 0xFF, 0x06, 0x4A, 0x75, 0xF3, 
	0x8A, 0x08, 0x84, 0xC9, 0x74, 0x48, 0x83, 0x7D, 0xFC, 0x00, 
	0x75, 0x0A, 0x80, 0xF9, 0x20, 0x74, 0x3D, 0x80, 0xF9, 0x09, 
	0x74, 0x38, 0x85, 0xDB, 0x74, 0x2E, 0x85, 0xFF, 0x74, 0x19, 
	0x0F, 0xB6, 0xD1, 0xF6, 0x82, 0x01, 0xA7, 0x00, 0x01, 0x04, 
	0x74, 0x06, 0x88, 0x0F, 0x47, 0x40, 0xFF, 0x06, 0x8A, 0x08, 
	0x88, 0x0F, 0x47, 0xEB, 0x0F, 0x0F, 0xB6, 0xC9, 0xF6, 0x81, 
	0x01, 0xA7, 0x00, 0x01, 0x04, 0x74, 0x03, 0x40, 0xFF, 0x06, 
	0xFF, 0x06, 0x40, 0xE9, 0x68, 0xFF, 0xFF, 0xFF, 0x85, 0xFF, 
	0x74, 0x04, 0xC6, 0x07, 0x00, 0x47, 0xFF, 0x06, 0x8B, 0x5D, 
	0x0C, 0xE9, 0x21, 0xFF, 0xFF, 0xFF, 0x8B, 0x45, 0x08, 0x85, 
	0xC0, 0x74, 0x03, 0x83, 0x20, 0x00, 0xFF, 0x03, 0x5F, 0x5B, 
	0xC9, 0xC3, 0x55, 0x8B, 0xEC, 0x51, 0x51, 0x53, 0x56, 0x57, 
	0x33, 0xFF, 0x39, 0x3D, 0x6C, 0xBA, 0x00, 0x01, 0x75, 0x05, 
	0xE8, 0x85, 0x20, 0x00, 0x00, 0x68, 0x04, 0x01, 0x00, 0x00, 
	0xBE, 0x00, 0x9D, 0x00, 0x01, 0x56, 0x57, 0xC6, 0x05, 0x04, 
	0x9E, 0x00, 0x01, 0x00, 0xFF, 0x15, 0x44, 0x10, 0x00, 0x01, 
	0xA1, 0x74, 0xBA, 0x00, 0x01, 0x3B, 0xC7, 0x89, 0x35, 0xCC, 
	0x99, 0x00, 0x01, 0x74, 0x07, 0x80, 0x38, 0x00, 0x8B, 0xD8, 
	0x75, 0x02, 0x8B, 0xDE, 0x8D, 0x45, 0xFC, 0x50, 0x57, 0x8D, 
	0x75, 0xF8, 0x33, 0xC9, 0x8B, 0xC3, 0xE8, 0x3B, 0xFE, 0xFF, 
	0xFF, 0x8B, 0x75, 0xFC, 0x8B, 0x45, 0xF8, 0x59, 0x59, 0xC1, 
	0xE6, 0x02, 0x8D, 0x0C, 0x06, 0xE8, 0x10, 0x1C, 0x00, 0x00, 
	0x8B, 0xF8, 0x85, 0xFF, 0x75, 0x05, 0x83, 0xC8, 0xFF, 0xEB, 
	0x25, 0x8D, 0x45, 0xFC, 0x50, 0x8D, 0x0C, 0x3E, 0x57, 0x8D, 
	0x75, 0xF8, 0x8B, 0xC3, 0xE8, 0x0B, 0xFE, 0xFF, 0xFF, 0x8B, 
	0x45, 0xFC, 0x48, 0x59, 0xA3, 0xB0, 0x99, 0x00, 0x01, 0x59, 
	0x89, 0x3D, 0xB4, 0x99, 0x00, 0x01, 0x33, 0xC0, 0x5F, 0x5E, 
	0x5B, 0xC9, 0xC3, 0x51, 0x51, 0xA1, 0x08, 0x9E, 0x00, 0x01, 
	0x53, 0x55, 0x56, 0x57, 0x8B, 0x3D, 0x5C, 0x10, 0x00, 0x01, 
	0x33, 0xDB, 0x33, 0xF6, 0x3B, 0xC3, 0x6A, 0x02, 0x5D, 0x75, 
	0x2D, 0xFF, 0xD7, 0x8B, 0xF0, 0x3B, 0xF3, 0x74, 0x0C, 0xC7, 
	0x05, 0x08, 0x9E, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0xEB, 
	0x1E, 0xFF, 0x15, 0xE0, 0x10, 0x00, 0x01, 0x83, 0xF8, 0x78, 
	0x75, 0x09, 0x8B, 0xC5, 0xA3, 0x08, 0x9E, 0x00, 0x01, 0xEB, 
	0x05, 0xA1, 0x08, 0x9E, 0x00, 0x01, 0x83, 0xF8, 0x01, 0x75, 
	0x7B, 0x3B, 0xF3, 0x75, 0x08, 0xFF, 0xD7, 0x8B, 0xF0, 0x3B, 
	0xF3, 0x74, 0x77, 0x66, 0x39, 0x1E, 0x8B, 0xC6, 0x74, 0x0E, 
	0x03, 0xC5, 0x66, 0x39, 0x18, 0x75, 0xF9, 0x03, 0xC5, 0x66, 
	0x39, 0x18, 0x75, 0xF2, 0x8B, 0x3D, 0x58, 0x10, 0x00, 0x01, 
	0x53, 0x53, 0x53, 0x2B, 0xC6, 0x53, 0xD1, 0xF8, 0x40, 0x50, 
	0x56, 0x53, 0x53, 0x89, 0x44, 0x24, 0x34, 0xFF, 0xD7, 0x8B, 
	0xE8, 0x3B, 0xEB, 0x74, 0x32, 0x8B, 0xCD, 0xE8, 0x46, 0x1B, 
	0x00, 0x00, 0x3B, 0xC3, 0x89, 0x44, 0x24, 0x10, 0x74, 0x23, 
	0x53, 0x53, 0x55, 0x50, 0xFF, 0x74, 0x24, 0x24, 0x56, 0x53, 
	0x53, 0xFF, 0xD7, 0x85, 0xC0, 0x75, 0x0E, 0xFF, 0x74, 0x24, 
	0x10, 0xE8, 0xEC, 0x1A, 0x00, 0x00, 0x59, 0x89, 0x5C, 0x24, 
	0x10, 0x8B, 0x5C, 0x24, 0x10, 0x56, 0xFF, 0x15, 0x54, 0x10, 
	0x00, 0x01, 0xEB, 0x54, 0x3B, 0xC5, 0x74, 0x08, 0x3B, 0xC3, 
	0x74, 0x04, 0x33, 0xC0, 0xEB, 0x4A, 0xFF, 0x15, 0x50, 0x10, 
	0x00, 0x01, 0x8B, 0xE8, 0x3B, 0xEB, 0x74, 0xF0, 0x38, 0x5D, 
	0x00, 0x74, 0x0A, 0x40, 0x38, 0x18, 0x75, 0xFB, 0x40, 0x38, 
	0x18, 0x75, 0xF6, 0x2B, 0xC5, 0x40, 0x8B, 0xF0, 0x8B, 0xCE, 
	0xE8, 0xDF, 0x1A, 0x00, 0x00, 0x3B, 0xC3, 0x74, 0x16, 0x8B, 
	0xCE, 0x8B, 0xD1, 0xC1, 0xE9, 0x02, 0x8B, 0xF5, 0x8B, 0xF8, 
	0xF3, 0xA5, 0x8B, 0xCA, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0x8B, 
	0xD8, 0x55, 0xFF, 0x15, 0x4C, 0x10, 0x00, 0x01, 0x8B, 0xC3, 
	0x5F, 0x5E, 0x5D, 0x5B, 0x59, 0x59, 0xC3, 0x6A, 0x50, 0x68, 
	0xC0, 0x1C, 0x00, 0x01, 0xE8, 0x05, 0xF5, 0xFF, 0xFF, 0x83, 
	0x65, 0xFC, 0x00, 0x8D, 0x45, 0xA0, 0x50, 0xFF, 0x15, 0x68, 
	0x10, 0x00, 0x01, 0x83, 0x4D, 0xFC, 0xFF, 0xB9, 0x00, 0x01, 
	0x00, 0x00, 0xE8, 0x8D, 0x1A, 0x00, 0x00, 0x85, 0xC0, 0x75, 
	0x08, 0x83, 0xC8, 0xFF, 0xE9, 0x89, 0x01, 0x00, 0x00, 0xA3, 
	0x60, 0xB9, 0x00, 0x01, 0xC7, 0x05, 0x4C, 0xB9, 0x00, 0x01, 
	0x20, 0x00, 0x00, 0x00, 0x8D, 0x88, 0x00, 0x01, 0x00, 0x00, 
	0xEB, 0x1A, 0xC6, 0x40, 0x04, 0x00, 0x83, 0x08, 0xFF, 0xC6, 
	0x40, 0x05, 0x0A, 0x83, 0xC0, 0x08, 0x8B, 0x0D, 0x60, 0xB9, 
	0x00, 0x01, 0x81, 0xC1, 0x00, 0x01, 0x00, 0x00, 0x3B, 0xC1, 
	0x72, 0xE2, 0x66, 0x83, 0x7D, 0xD2, 0x00, 0x0F, 0x84, 0xC6, 
	0x00, 0x00, 0x00, 0x8B, 0x45, 0xD4, 0x85, 0xC0, 0x0F, 0x84, 
	0xBB, 0x00, 0x00, 0x00, 0x8B, 0x30, 0x8D, 0x78, 0x04, 0x8D, 
	0x04, 0x37, 0x89, 0x45, 0xE4, 0xB8, 0x00, 0x08, 0x00, 0x00, 
	0x3B, 0xF0, 0x7C, 0x02, 0x8B, 0xF0, 0x33, 0xDB, 0x43, 0xEB, 
	0x41, 0xB9, 0x00, 0x01, 0x00, 0x00, 0xE8, 0x11, 0x1A, 0x00, 
	0x00, 0x85, 0xC0, 0x74, 0x3D, 0x8D, 0x0C, 0x9D, 0x60, 0xB9, 
	0x00, 0x01, 0x89, 0x01, 0x83, 0x05, 0x4C, 0xB9, 0x00, 0x01, 
	0x20, 0x8D, 0x90, 0x00, 0x01, 0x00, 0x00, 0xEB, 0x16, 0xC6, 
	0x40, 0x04, 0x00, 0x83, 0x08, 0xFF, 0xC6, 0x40, 0x05, 0x0A, 
	0x83, 0xC0, 0x08, 0x8B, 0x11, 0x81, 0xC2, 0x00, 0x01, 0x00, 
	0x00, 0x3B, 0xC2, 0x72, 0xE6, 0x43, 0x39, 0x35, 0x4C, 0xB9, 
	0x00, 0x01, 0x7C, 0xB7, 0xEB, 0x06, 0x8B, 0x35, 0x4C, 0xB9, 
	0x00, 0x01, 0x33, 0xDB, 0x85, 0xF6, 0x7E, 0x49, 0x8B, 0x45, 
	0xE4, 0x8B, 0x08, 0x83, 0xF9, 0xFF, 0x74, 0x35, 0x8A, 0x07, 
	0xA8, 0x01, 0x74, 0x2F, 0xA8, 0x08, 0x75, 0x0B, 0x51, 0xFF, 
	0x15, 0x64, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x74, 0x20, 0x8B, 
	0xC3, 0xC1, 0xF8, 0x05, 0x8B, 0xCB, 0x83, 0xE1, 0x1F, 0x8B, 
	0x04, 0x85, 0x60, 0xB9, 0x00, 0x01, 0x8D, 0x04, 0xC8, 0x8B, 
	0x4D, 0xE4, 0x8B, 0x09, 0x89, 0x08, 0x8A, 0x0F, 0x88, 0x48, 
	0x04, 0x43, 0x47, 0x83, 0x45, 0xE4, 0x04, 0x3B, 0xDE, 0x7C, 
	0xB7, 0x33, 0xDB, 0xA1, 0x60, 0xB9, 0x00, 0x01, 0x8D, 0x34, 
	0xD8, 0x83, 0x3E, 0xFF, 0x75, 0x4D, 0xC6, 0x46, 0x04, 0x81, 
	0x85, 0xDB, 0x75, 0x05, 0x6A, 0xF6, 0x58, 0xEB, 0x0A, 0x8B, 
	0xC3, 0x48, 0xF7, 0xD8, 0x1B, 0xC0, 0x83, 0xC0, 0xF5, 0x50, 
	0xFF, 0x15, 0x40, 0x10, 0x00, 0x01, 0x8B, 0xF8, 0x83, 0xFF, 
	0xFF, 0x74, 0x17, 0x57, 0xFF, 0x15, 0x64, 0x10, 0x00, 0x01, 
	0x85, 0xC0, 0x74, 0x0C, 0x89, 0x3E, 0x25, 0xFF, 0x00, 0x00, 
	0x00, 0x83, 0xF8, 0x02, 0x75, 0x06, 0x80, 0x4E, 0x04, 0x40, 
	0xEB, 0x0F, 0x83, 0xF8, 0x03, 0x75, 0x0A, 0x80, 0x4E, 0x04, 
	0x08, 0xEB, 0x04, 0x80, 0x4E, 0x04, 0x80, 0x43, 0x83, 0xFB, 
	0x03, 0x7C, 0x9C, 0xFF, 0x35, 0x4C, 0xB9, 0x00, 0x01, 0xFF, 
	0x15, 0x60, 0x10, 0x00, 0x01, 0x33, 0xC0, 0xEB, 0x0D, 0x33, 
	0xC0, 0x40, 0xC3, 0x8B, 0x65, 0xE8, 0x83, 0xC8, 0xFF, 0x89, 
	0x45, 0xFC, 0xE8, 0x8A, 0xF3, 0xFF, 0xFF, 0xC3, 0x83, 0x3D, 
	0x9C, 0x99, 0x00, 0x01, 0x02, 0x75, 0x0D, 0x83, 0x3D, 0xA8, 
	0x99, 0x00, 0x01, 0x05, 0x72, 0x04, 0x33, 0xC0, 0x40, 0xC3, 
	0x6A, 0x03, 0x58, 0xC3, 0x33, 0xC0, 0x39, 0x44, 0x24, 0x04, 
	0x6A, 0x00, 0x0F, 0x94, 0xC0, 0x68, 0x00, 0x10, 0x00, 0x00, 
	0x50, 0xFF, 0x15, 0x70, 0x10, 0x00, 0x01, 0x85, 0xC0, 0xA3, 
	0x44, 0xB9, 0x00, 0x01, 0x74, 0x2A, 0xE8, 0xC1, 0xFF, 0xFF, 
	0xFF, 0x83, 0xF8, 0x03, 0xA3, 0x48, 0xB9, 0x00, 0x01, 0x75, 
	0x1E, 0x68, 0xF8, 0x03, 0x00, 0x00, 0xE8, 0xDD, 0x1C, 0x00, 
	0x00, 0x85, 0xC0, 0x59, 0x75, 0x0F, 0xFF, 0x35, 0x44, 0xB9, 
	0x00, 0x01, 0xFF, 0x15, 0x6C, 0x10, 0x00, 0x01, 0x33, 0xC0, 
	0xC3, 0x33, 0xC0, 0x40, 0xC3, 0xCC, 0xCC, 0xCC, 0x55, 0x8B, 
	0xEC, 0x53, 0x56, 0x57, 0x55, 0x6A, 0x00, 0x6A, 0x00, 0x68, 
	0xF0, 0x3B, 0x00, 0x01, 0xFF, 0x75, 0x08, 0xE8, 0xE4, 0x3D, 
	0x00, 0x00, 0x5D, 0x5F, 0x5E, 0x5B, 0x8B, 0xE5, 0x5D, 0xC3, 
	0x8B, 0x4C, 0x24, 0x04, 0xF7, 0x41, 0x04, 0x06, 0x00, 0x00, 
	0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x74, 0x0F, 0x8B, 0x44, 
	0x24, 0x08, 0x8B, 0x54, 0x24, 0x10, 0x89, 0x02, 0xB8, 0x03, 
	0x00, 0x00, 0x00, 0xC3, 0x53, 0x56, 0x57, 0x8B, 0x44, 0x24, 
	0x10, 0x50, 0x6A, 0xFE, 0x68, 0xF8, 0x3B, 0x00, 0x01, 0x64, 
	0xFF, 0x35, 0x00, 0x00, 0x00, 0x00, 0x64, 0x89, 0x25, 0x00, 
	0x00, 0x00, 0x00, 0x8B, 0x44, 0x24, 0x20, 0x8B, 0x58, 0x08, 
	0x8B, 0x70, 0x0C, 0x83, 0xFE, 0xFF, 0x74, 0x2E, 0x3B, 0x74, 
	0x24, 0x24, 0x74, 0x28, 0x8D, 0x34, 0x76, 0x8B, 0x0C, 0xB3, 
	0x89, 0x4C, 0x24, 0x08, 0x89, 0x48, 0x0C, 0x83, 0x7C, 0xB3, 
	0x04, 0x00, 0x75, 0x12, 0x68, 0x01, 0x01, 0x00, 0x00, 0x8B, 
	0x44, 0xB3, 0x08, 0xE8, 0x40, 0x00, 0x00, 0x00, 0xFF, 0x54, 
	0xB3, 0x08, 0xEB, 0xC3, 0x64, 0x8F, 0x05, 0x00, 0x00, 0x00, 
	0x00, 0x83, 0xC4, 0x0C, 0x5F, 0x5E, 0x5B, 0xC3, 0x33, 0xC0, 
	0x64, 0x8B, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x81, 0x79, 0x04, 
	0xF8, 0x3B, 0x00, 0x01, 0x75, 0x10, 0x8B, 0x51, 0x0C, 0x8B, 
	0x52, 0x0C, 0x39, 0x51, 0x08, 0x75, 0x05, 0xB8, 0x01, 0x00, 
	0x00, 0x00, 0xC3, 0x53, 0x51, 0xBB, 0x34, 0x91, 0x00, 0x01, 
	0xEB, 0x0A, 0x53, 0x51, 0xBB, 0x34, 0x91, 0x00, 0x01, 0x8B, 
	0x4D, 0x08, 0x89, 0x4B, 0x08, 0x89, 0x43, 0x04, 0x89, 0x6B, 
	0x0C, 0x59, 0x5B, 0xC2, 0x04, 0x00, 0x55, 0x8B, 0xEC, 0x83, 
	0xEC, 0x20, 0x53, 0x56, 0x8B, 0x75, 0x08, 0x8B, 0x5E, 0x08, 
	0xF6, 0xC3, 0x03, 0x75, 0x1B, 0x64, 0xA1, 0x18, 0x00, 0x00, 
	0x00, 0x89, 0x45, 0x08, 0x8B, 0x45, 0x08, 0x8B, 0x48, 0x08, 
	0x3B, 0xD9, 0x89, 0x4D, 0xFC, 0x72, 0x0C, 0x3B, 0x58, 0x04, 
	0x73, 0x07, 0x33, 0xC0, 0xE9, 0xF0, 0x01, 0x00, 0x00, 0x57, 
	0x8B, 0x7E, 0x0C, 0x83, 0xFF, 0xFF, 0x75, 0x08, 0x33, 0xC0, 
	0x40, 0xE9, 0xDE, 0x01, 0x00, 0x00, 0x33, 0xD2, 0x89, 0x55, 
	0x08, 0x8B, 0xC3, 0x8B, 0x08, 0x83, 0xF9, 0xFF, 0x74, 0x08, 
	0x3B, 0xCA, 0x0F, 0x83, 0x45, 0x01, 0x00, 0x00, 0x83, 0x78, 
	0x04, 0x00, 0x74, 0x03, 0xFF, 0x45, 0x08, 0x42, 0x83, 0xC0, 
	0x0C, 0x3B, 0xD7, 0x76, 0xE0, 0x83, 0x7D, 0x08, 0x00, 0x74, 
	0x14, 0x8B, 0x46, 0xF8, 0x3B, 0x45, 0xFC, 0x0F, 0x82, 0x22, 
	0x01, 0x00, 0x00, 0x3B, 0xC6, 0x0F, 0x83, 0x1A, 0x01, 0x00, 
	0x00, 0xA1, 0x10, 0x9E, 0x00, 0x01, 0x8B, 0xFB, 0x81, 0xE7, 
	0x00, 0xF0, 0xFF, 0xFF, 0x33, 0xF6, 0x85, 0xC0, 0x7E, 0x12, 
	0x39, 0x3C, 0xB5, 0x18, 0x9E, 0x00, 0x01, 0x0F, 0x84, 0xFE, 
	0x00, 0x00, 0x00, 0x46, 0x3B, 0xF0, 0x7C, 0xEE, 0x6A, 0x1C, 
	0x8D, 0x45, 0xE0, 0x50, 0x53, 0xFF, 0x15, 0xEC, 0x10, 0x00, 
	0x01, 0x85, 0xC0, 0x0F, 0x84, 0x60, 0x01, 0x00, 0x00, 0x81, 
	0x7D, 0xF8, 0x00, 0x00, 0x00, 0x01, 0x0F, 0x85, 0x53, 0x01, 
	0x00, 0x00, 0xF6, 0x45, 0xF4, 0xCC, 0x74, 0x56, 0x8B, 0x4D, 
	0xE4, 0x66, 0x81, 0x39, 0x4D, 0x5A, 0x0F, 0x85, 0x3F, 0x01, 
	0x00, 0x00, 0x8B, 0x41, 0x3C, 0x03, 0xC1, 0x81, 0x38, 0x50, 
	0x45, 0x00, 0x00, 0x0F, 0x85, 0x2E, 0x01, 0x00, 0x00, 0x66, 
	0x81, 0x78, 0x18, 0x0B, 0x01, 0x0F, 0x85, 0x22, 0x01, 0x00, 
	0x00, 0x2B, 0xD9, 0x66, 0x83, 0x78, 0x06, 0x00, 0x0F, 0xB7, 
	0x48, 0x14, 0x8D, 0x4C, 0x01, 0x18, 0x0F, 0x86, 0x0D, 0x01, 
	0x00, 0x00, 0x8B, 0x41, 0x0C, 0x3B, 0xD8, 0x72, 0x0F, 0x8B, 
	0x51, 0x08, 0x03, 0xD0, 0x3B, 0xDA, 0x73, 0x06, 0xF6, 0x41, 
	0x27, 0x80, 0x75, 0x77, 0x6A, 0x01, 0x68, 0x58, 0x9E, 0x00, 
	0x01, 0xFF, 0x15, 0x78, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x0F, 
	0x85, 0xFF, 0xFE, 0xFF, 0xFF, 0x8B, 0x0D, 0x10, 0x9E, 0x00, 
	0x01, 0x85, 0xC9, 0x8B, 0xD1, 0x7E, 0x13, 0x8D, 0x04, 0x8D, 
	0x14, 0x9E, 0x00, 0x01, 0x39, 0x38, 0x74, 0x08, 0x4A, 0x83, 
	0xE8, 0x04, 0x85, 0xD2, 0x7F, 0xF4, 0x85, 0xD2, 0x75, 0x2D, 
	0x6A, 0x0F, 0x5B, 0x3B, 0xCB, 0x7F, 0x02, 0x8B, 0xD9, 0x33, 
	0xD2, 0x85, 0xDB, 0x7C, 0x12, 0x8D, 0x04, 0x95, 0x18, 0x9E, 
	0x00, 0x01, 0x8B, 0x30, 0x42, 0x3B, 0xD3, 0x89, 0x38, 0x8B, 
	0xFE, 0x7E, 0xEE, 0x83, 0xF9, 0x10, 0x7D, 0x07, 0x41, 0x89, 
	0x0D, 0x10, 0x9E, 0x00, 0x01, 0x6A, 0x00, 0x68, 0x58, 0x9E, 
	0x00, 0x01, 0xFF, 0x15, 0x78, 0x10, 0x00, 0x01, 0xE9, 0x9D, 
	0xFE, 0xFF, 0xFF, 0x33, 0xC0, 0xEB, 0x7F, 0x85, 0xF6, 0x0F, 
	0x8E, 0x91, 0xFE, 0xFF, 0xFF, 0x8B, 0x1D, 0x78, 0x10, 0x00, 
	0x01, 0x6A, 0x01, 0x68, 0x58, 0x9E, 0x00, 0x01, 0xFF, 0xD3, 
	0x85, 0xC0, 0x0F, 0x85, 0x7A, 0xFE, 0xFF, 0xFF, 0x39, 0x3C, 
	0xB5, 0x18, 0x9E, 0x00, 0x01, 0x74, 0x2E, 0xA1, 0x10, 0x9E, 
	0x00, 0x01, 0x8D, 0x70, 0xFF, 0x85, 0xF6, 0x7C, 0x10, 0x39, 
	0x3C, 0xB5, 0x18, 0x9E, 0x00, 0x01, 0x74, 0x03, 0x4E, 0x79, 
	0xF4, 0x85, 0xF6, 0x7D, 0x10, 0x83, 0xF8, 0x10, 0x7D, 0x06, 
	0x40, 0xA3, 0x10, 0x9E, 0x00, 0x01, 0x8D, 0x70, 0xFF, 0xEB, 
	0x02, 0x74, 0x18, 0x33, 0xC9, 0x85, 0xF6, 0x7C, 0x12, 0x8D, 
	0x04, 0x8D, 0x18, 0x9E, 0x00, 0x01, 0x8B, 0x10, 0x41, 0x3B, 
	0xCE, 0x89, 0x38, 0x8B, 0xFA, 0x7E, 0xEE, 0x6A, 0x00, 0x68, 
	0x58, 0x9E, 0x00, 0x01, 0xFF, 0xD3, 0xE9, 0x1D, 0xFE, 0xFF, 
	0xFF, 0x83, 0xC8, 0xFF, 0x5F, 0x5E, 0x5B, 0xC9, 0xC3, 0x56, 
	0x8B, 0x74, 0x24, 0x08, 0xFF, 0x76, 0x10, 0xE8, 0xE2, 0x21, 
	0x00, 0x00, 0x85, 0xC0, 0x59, 0x74, 0x72, 0x81, 0xFE, 0x70, 
	0x91, 0x00, 0x01, 0x75, 0x04, 0x33, 0xC0, 0xEB, 0x0B, 0x81, 
	0xFE, 0x90, 0x91, 0x00, 0x01, 0x75, 0x5E, 0x33, 0xC0, 0x40, 
	0xFF, 0x05, 0x64, 0x9E, 0x00, 0x01, 0x66, 0xF7, 0x46, 0x0C, 
	0x0C, 0x01, 0x75, 0x4D, 0x53, 0x57, 0x8D, 0x3C, 0x85, 0x5C, 
	0x9E, 0x00, 0x01, 0x83, 0x3F, 0x00, 0xBB, 0x00, 0x10, 0x00, 
	0x00, 0x75, 0x20, 0x8B, 0xCB, 0xE8, 0x1C, 0x15, 0x00, 0x00, 
	0x85, 0xC0, 0x89, 0x07, 0x75, 0x13, 0x8D, 0x46, 0x14, 0x6A, 
	0x02, 0x89, 0x46, 0x08, 0x89, 0x06, 0x58, 0x89, 0x46, 0x18, 
	0x89, 0x46, 0x04, 0xEB, 0x0D, 0x8B, 0x3F, 0x89, 0x7E, 0x08, 
	0x89, 0x3E, 0x89, 0x5E, 0x18, 0x89, 0x5E, 0x04, 0x66, 0x81, 
	0x4E, 0x0C, 0x02, 0x11, 0x5F, 0x33, 0xC0, 0x5B, 0x40, 0x5E, 
	0xC3, 0x33, 0xC0, 0x5E, 0xC3, 0x83, 0x7C, 0x24, 0x04, 0x00, 
	0x56, 0x74, 0x21, 0x8B, 0x74, 0x24, 0x0C, 0xF6, 0x46, 0x0D, 
	0x10, 0x74, 0x28, 0x56, 0xE8, 0x76, 0x21, 0x00, 0x00, 0x80, 
	0x66, 0x0D, 0xEE, 0x83, 0x66, 0x18, 0x00, 0x83, 0x26, 0x00, 
	0x83, 0x66, 0x08, 0x00, 0xEB, 0x10, 0x8B, 0x44, 0x24, 0x0C, 
	0xF6, 0x40, 0x0D, 0x10, 0x74, 0x07, 0x50, 0xE8, 0x55, 0x21, 
	0x00, 0x00, 0x59, 0x5E, 0xC3, 0xF6, 0x41, 0x0C, 0x40, 0x74, 
	0x06, 0x83, 0x79, 0x08, 0x00, 0x74, 0x24, 0xFF, 0x49, 0x04, 
	0x78, 0x0B, 0x8B, 0x11, 0x88, 0x02, 0xFF, 0x01, 0x0F, 0xB6, 
	0xC0, 0xEB, 0x0C, 0x0F, 0xBE, 0xC0, 0x51, 0x50, 0xE8, 0xC0, 
	0x08, 0x00, 0x00, 0x59, 0x59, 0x83, 0xF8, 0xFF, 0x75, 0x03, 
	0x09, 0x06, 0xC3, 0xFF, 0x06, 0xC3, 0x55, 0x8B, 0xEC, 0x56, 
	0x8B, 0xF0, 0xEB, 0x13, 0x8B, 0x4D, 0x10, 0x8A, 0x45, 0x08, 
	0xFF, 0x4D, 0x0C, 0xE8, 0xB7, 0xFF, 0xFF, 0xFF, 0x83, 0x3E, 
	0xFF, 0x74, 0x06, 0x83, 0x7D, 0x0C, 0x00, 0x7F, 0xE7, 0x5E, 
	0x5D, 0xC3, 0xF6, 0x47, 0x0C, 0x40, 0x53, 0x56, 0x8B, 0xF0, 
	0x8B, 0xD9, 0x74, 0x21, 0x83, 0x7F, 0x08, 0x00, 0x75, 0x1B, 
	0x8B, 0x44, 0x24, 0x0C, 0x01, 0x06, 0xEB, 0x1A, 0x8A, 0x03, 
	0xFF, 0x4C, 0x24, 0x0C, 0x8B, 0xCF, 0xE8, 0x82, 0xFF, 0xFF, 
	0xFF, 0x43, 0x83, 0x3E, 0xFF, 0x74, 0x07, 0x83, 0x7C, 0x24, 
	0x0C, 0x00, 0x7F, 0xE6, 0x5E, 0x5B, 0xC3, 0x55, 0x8B, 0xEC, 
	0x81, 0xEC, 0x50, 0x02, 0x00, 0x00, 0x8B, 0x4D, 0x0C, 0x33, 
	0xC0, 0x53, 0x8A, 0x19, 0x84, 0xDB, 0x89, 0x45, 0xE4, 0x89, 
	0x45, 0xF8, 0x89, 0x45, 0xD8, 0x89, 0x45, 0xF0, 0x89, 0x45, 
	0xEC, 0x0F, 0x84, 0x44, 0x07, 0x00, 0x00, 0x56, 0x57, 0x8B, 
	0xF9, 0xEB, 0x03, 0x8B, 0x45, 0xCC, 0x47, 0x83, 0x7D, 0xEC, 
	0x00, 0x89, 0x7D, 0x0C, 0x0F, 0x8C, 0x2B, 0x07, 0x00, 0x00, 
	0x80, 0xFB, 0x20, 0x7C, 0x14, 0x80, 0xFB, 0x78, 0x7F, 0x0F, 
	0x0F, 0xBE, 0xCB, 0x0F, 0xBE, 0x89, 0xB0, 0x1C, 0x00, 0x01, 
	0x83, 0xE1, 0x0F, 0xEB, 0x02, 0x33, 0xC9, 0x0F, 0xBE, 0x84, 
	0xC8, 0xD0, 0x1C, 0x00, 0x01, 0x6A, 0x07, 0xC1, 0xF8, 0x04, 
	0x59, 0x3B, 0xC1, 0x89, 0x45, 0xCC, 0x0F, 0x87, 0xEA, 0x06, 
	0x00, 0x00, 0xFF, 0x24, 0x85, 0xB3, 0x47, 0x00, 0x01, 0x33, 
	0xC0, 0x83, 0x4D, 0xF8, 0xFF, 0x89, 0x45, 0xC8, 0x89, 0x45, 
	0xD0, 0x89, 0x45, 0xE4, 0x89, 0x45, 0xE0, 0x89, 0x45, 0xFC, 
	0x89, 0x45, 0xDC, 0xE9, 0xC6, 0x06, 0x00, 0x00, 0x0F, 0xBE, 
	0xC3, 0x83, 0xE8, 0x20, 0x74, 0x3B, 0x83, 0xE8, 0x03, 0x74, 
	0x2D, 0x83, 0xE8, 0x08, 0x74, 0x1F, 0x48, 0x48, 0x74, 0x12, 
	0x83, 0xE8, 0x03, 0x0F, 0x85, 0xA7, 0x06, 0x00, 0x00, 0x83, 
	0x4D, 0xFC, 0x08, 0xE9, 0x9E, 0x06, 0x00, 0x00, 0x83, 0x4D, 
	0xFC, 0x04, 0xE9, 0x95, 0x06, 0x00, 0x00, 0x83, 0x4D, 0xFC, 
	0x01, 0xE9, 0x8C, 0x06, 0x00, 0x00, 0x80, 0x4D, 0xFC, 0x80, 
	0xE9, 0x83, 0x06, 0x00, 0x00, 0x83, 0x4D, 0xFC, 0x02, 0xE9, 
	0x7A, 0x06, 0x00, 0x00, 0x80, 0xFB, 0x2A, 0x75, 0x21, 0x83, 
	0x45, 0x10, 0x04, 0x8B, 0x45, 0x10, 0x8B, 0x40, 0xFC, 0x85, 
	0xC0, 0x89, 0x45, 0xE4, 0x0F, 0x8D, 0x60, 0x06, 0x00, 0x00, 
	0x83, 0x4D, 0xFC, 0x04, 0xF7, 0x5D, 0xE4, 0xE9, 0x54, 0x06, 
	0x00, 0x00, 0x8B, 0x45, 0xE4, 0x0F, 0xBE, 0xCB, 0x8D, 0x04, 
	0x80, 0x8D, 0x44, 0x41, 0xD0, 0x89, 0x45, 0xE4, 0xE9, 0x3F, 
	0x06, 0x00, 0x00, 0x83, 0x65, 0xF8, 0x00, 0xE9, 0x36, 0x06, 
	0x00, 0x00, 0x80, 0xFB, 0x2A, 0x75, 0x1E, 0x83, 0x45, 0x10, 
	0x04, 0x8B, 0x45, 0x10, 0x8B, 0x40, 0xFC, 0x85, 0xC0, 0x89, 
	0x45, 0xF8, 0x0F, 0x8D, 0x1C, 0x06, 0x00, 0x00, 0x83, 0x4D, 
	0xF8, 0xFF, 0xE9, 0x13, 0x06, 0x00, 0x00, 0x8B, 0x45, 0xF8, 
	0x0F, 0xBE, 0xCB, 0x8D, 0x04, 0x80, 0x8D, 0x44, 0x41, 0xD0, 
	0x89, 0x45, 0xF8, 0xE9, 0xFE, 0x05, 0x00, 0x00, 0x80, 0xFB, 
	0x49, 0x74, 0x2E, 0x80, 0xFB, 0x68, 0x74, 0x20, 0x80, 0xFB, 
	0x6C, 0x74, 0x12, 0x80, 0xFB, 0x77, 0x0F, 0x85, 0xE6, 0x05, 
	0x00, 0x00, 0x80, 0x4D, 0xFD, 0x08, 0xE9, 0xDD, 0x05, 0x00, 
	0x00, 0x83, 0x4D, 0xFC, 0x10, 0xE9, 0xD4, 0x05, 0x00, 0x00, 
	0x83, 0x4D, 0xFC, 0x20, 0xE9, 0xCB, 0x05, 0x00, 0x00, 0x8A, 
	0x07, 0x3C, 0x36, 0x75, 0x14, 0x80, 0x7F, 0x01, 0x34, 0x75, 
	0x0E, 0x47, 0x47, 0x80, 0x4D, 0xFD, 0x80, 0x89, 0x7D, 0x0C, 
	0xE9, 0xB1, 0x05, 0x00, 0x00, 0x3C, 0x33, 0x75, 0x14, 0x80, 
	0x7F, 0x01, 0x32, 0x75, 0x0E, 0x47, 0x47, 0x80, 0x65, 0xFD, 
	0x7F, 0x89, 0x7D, 0x0C, 0xE9, 0x99, 0x05, 0x00, 0x00, 0x3C, 
	0x64, 0x0F, 0x84, 0x91, 0x05, 0x00, 0x00, 0x3C, 0x69, 0x0F, 
	0x84, 0x89, 0x05, 0x00, 0x00, 0x3C, 0x6F, 0x0F, 0x84, 0x81, 
	0x05, 0x00, 0x00, 0x3C, 0x75, 0x0F, 0x84, 0x79, 0x05, 0x00, 
	0x00, 0x3C, 0x78, 0x0F, 0x84, 0x71, 0x05, 0x00, 0x00, 0x3C, 
	0x58, 0x0F, 0x84, 0x69, 0x05, 0x00, 0x00, 0x83, 0x65, 0xCC, 
	0x00, 0x8B, 0x0D, 0xE0, 0x94, 0x00, 0x01, 0x83, 0x65, 0xDC, 
	0x00, 0x0F, 0xB6, 0xC3, 0xF6, 0x44, 0x41, 0x01, 0x80, 0x74, 
	0x13, 0x8B, 0x4D, 0x08, 0x8D, 0x75, 0xEC, 0x8A, 0xC3, 0xE8, 
	0x59, 0xFD, 0xFF, 0xFF, 0x8A, 0x1F, 0x47, 0x89, 0x7D, 0x0C, 
	0x8B, 0x4D, 0x08, 0x8D, 0x75, 0xEC, 0x8A, 0xC3, 0xE8, 0x46, 
	0xFD, 0xFF, 0xFF, 0xE9, 0x2C, 0x05, 0x00, 0x00, 0x0F, 0xBE, 
	0xC3, 0x83, 0xF8, 0x67, 0x0F, 0x8F, 0x55, 0x02, 0x00, 0x00, 
	0x83, 0xF8, 0x65, 0x0F, 0x8D, 0x80, 0x00, 0x00, 0x00, 0x83, 
	0xF8, 0x58, 0x0F, 0x8F, 0xD8, 0x00, 0x00, 0x00, 0x0F, 0x84, 
	0xBE, 0x02, 0x00, 0x00, 0x83, 0xE8, 0x43, 0x0F, 0x84, 0x8B, 
	0x00, 0x00, 0x00, 0x48, 0x48, 0x74, 0x5A, 0x48, 0x48, 0x74, 
	0x56, 0x83, 0xE8, 0x0C, 0x0F, 0x85, 0xEC, 0x03, 0x00, 0x00, 
	0x66, 0xF7, 0x45, 0xFC, 0x30, 0x08, 0x75, 0x04, 0x80, 0x4D, 
	0xFD, 0x08, 0x8B, 0x4D, 0xF8, 0x83, 0xF9, 0xFF, 0x75, 0x05, 
	0xB9, 0xFF, 0xFF, 0xFF, 0x7F, 0x83, 0x45, 0x10, 0x04, 0x66, 
	0xF7, 0x45, 0xFC, 0x10, 0x08, 0x8B, 0x45, 0x10, 0x8B, 0x40, 
	0xFC, 0x89, 0x45, 0xF4, 0x0F, 0x84, 0x47, 0x02, 0x00, 0x00, 
	0x85, 0xC0, 0x75, 0x08, 0xA1, 0x48, 0x91, 0x00, 0x01, 0x89, 
	0x45, 0xF4, 0x8B, 0x45, 0xF4, 0xC7, 0x45, 0xDC, 0x01, 0x00, 
	0x00, 0x00, 0xE9, 0x1E, 0x02, 0x00, 0x00, 0xC7, 0x45, 0xC8, 
	0x01, 0x00, 0x00, 0x00, 0x80, 0xC3, 0x20, 0x83, 0x4D, 0xFC, 
	0x40, 0x83, 0x7D, 0xF8, 0x00, 0x8D, 0xBD, 0xB0, 0xFD, 0xFF, 
	0xFF, 0x89, 0x7D, 0xF4, 0x0F, 0x8D, 0xF9, 0x00, 0x00, 0x00, 
	0xC7, 0x45, 0xF8, 0x06, 0x00, 0x00, 0x00, 0xE9, 0x33, 0x01, 
	0x00, 0x00, 0x66, 0xF7, 0x45, 0xFC, 0x30, 0x08, 0x75, 0x04, 
	0x80, 0x4D, 0xFD, 0x08, 0x83, 0x45, 0x10, 0x04, 0x66, 0xF7, 
	0x45, 0xFC, 0x10, 0x08, 0x8B, 0x45, 0x10, 0x74, 0x62, 0x0F, 
	0xBF, 0x40, 0xFC, 0x50, 0x8D, 0x85, 0xB0, 0xFD, 0xFF, 0xFF, 
	0x50, 0xE8, 0xBD, 0x1E, 0x00, 0x00, 0x85, 0xC0, 0x59, 0x59, 
	0x89, 0x45, 0xF0, 0x7D, 0x58, 0xC7, 0x45, 0xD0, 0x01, 0x00, 
	0x00, 0x00, 0xEB, 0x4F, 0x83, 0xE8, 0x5A, 0x74, 0x58, 0x83, 
	0xE8, 0x09, 0x74, 0xC4, 0x48, 0x0F, 0x85, 0x23, 0x03, 0x00, 
	0x00, 0x83, 0x4D, 0xFC, 0x40, 0xC7, 0x45, 0xF0, 0x0A, 0x00, 
	0x00, 0x00, 0x8B, 0x5D, 0xFC, 0xBE, 0x00, 0x80, 0x00, 0x00, 
	0x85, 0xDE, 0x0F, 0x84, 0x30, 0x02, 0x00, 0x00, 0x8B, 0x4D, 
	0x10, 0x8B, 0x01, 0x8B, 0x51, 0x04, 0x83, 0xC1, 0x08, 0x89, 
	0x4D, 0x10, 0xE9, 0x45, 0x02, 0x00, 0x00, 0x8A, 0x40, 0xFC, 
	0x88, 0x85, 0xB0, 0xFD, 0xFF, 0xFF, 0xC7, 0x45, 0xF0, 0x01, 
	0x00, 0x00, 0x00, 0x8D, 0x85, 0xB0, 0xFD, 0xFF, 0xFF, 0x89, 
	0x45, 0xF4, 0xE9, 0xD7, 0x02, 0x00, 0x00, 0x83, 0x45, 0x10, 
	0x04, 0x8B, 0x45, 0x10, 0x8B, 0x40, 0xFC, 0x85, 0xC0, 0x74, 
	0x2D, 0x8B, 0x48, 0x04, 0x85, 0xC9, 0x74, 0x26, 0xF6, 0x45, 
	0xFD, 0x08, 0x0F, 0xBF, 0x00, 0x89, 0x4D, 0xF4, 0x74, 0x11, 
	0x99, 0x2B, 0xC2, 0xD1, 0xF8, 0xC7, 0x45, 0xDC, 0x01, 0x00, 
	0x00, 0x00, 0xE9, 0xA2, 0x02, 0x00, 0x00, 0x83, 0x65, 0xDC, 
	0x00, 0xE9, 0x99, 0x02, 0x00, 0x00, 0xA1, 0x44, 0x91, 0x00, 
	0x01, 0x89, 0x45, 0xF4, 0x8D, 0x50, 0x01, 0x8A, 0x08, 0x40, 
	0x84, 0xC9, 0x75, 0xF9, 0xE9, 0xB5, 0x00, 0x00, 0x00, 0x75, 
	0x0E, 0x80, 0xFB, 0x67, 0x75, 0x3F, 0xC7, 0x45, 0xF8, 0x01, 
	0x00, 0x00, 0x00, 0xEB, 0x36, 0xB8, 0x00, 0x02, 0x00, 0x00, 
	0x39, 0x45, 0xF8, 0x7E, 0x03, 0x89, 0x45, 0xF8, 0xBE, 0xA3, 
	0x00, 0x00, 0x00, 0x39, 0x75, 0xF8, 0x7E, 0x1F, 0x8B, 0x4D, 
	0xF8, 0x81, 0xC1, 0x5D, 0x01, 0x00, 0x00, 0xE8, 0x10, 0x10, 
	0x00, 0x00, 0x85, 0xC0, 0x89, 0x45, 0xD8, 0x74, 0x07, 0x89, 
	0x45, 0xF4, 0x8B, 0xF8, 0xEB, 0x03, 0x89, 0x75, 0xF8, 0x8B, 
	0x45, 0x10, 0x8B, 0x08, 0xFF, 0x75, 0xC8, 0x83, 0xC0, 0x08, 
	0xFF, 0x75, 0xF8, 0x89, 0x45, 0x10, 0x8B, 0x40, 0xFC, 0x89, 
	0x45, 0xBC, 0x0F, 0xBE, 0xC3, 0x50, 0x8D, 0x45, 0xB8, 0x57, 
	0x50, 0x89, 0x4D, 0xB8, 0xFF, 0x15, 0xC8, 0x94, 0x00, 0x01, 
	0x8B, 0x75, 0xFC, 0x83, 0xC4, 0x14, 0x81, 0xE6, 0x80, 0x00, 
	0x00, 0x00, 0x74, 0x0E, 0x83, 0x7D, 0xF8, 0x00, 0x75, 0x08, 
	0x57, 0xFF, 0x15, 0xD4, 0x94, 0x00, 0x01, 0x59, 0x80, 0xFB, 
	0x67, 0x75, 0x0C, 0x85, 0xF6, 0x75, 0x08, 0x57, 0xFF, 0x15, 
	0xCC, 0x94, 0x00, 0x01, 0x59, 0x80, 0x3F, 0x2D, 0x75, 0x08, 
	0x80, 0x4D, 0xFD, 0x01, 0x47, 0x89, 0x7D, 0xF4, 0x8B, 0xC7, 
	0x8D, 0x50, 0x01, 0x8A, 0x08, 0x40, 0x84, 0xC9, 0x75, 0xF9, 
	0x2B, 0xC2, 0xE9, 0xC6, 0x01, 0x00, 0x00, 0x83, 0xE8, 0x69, 
	0x0F, 0x84, 0x9D, 0xFE, 0xFF, 0xFF, 0x83, 0xE8, 0x05, 0x0F, 
	0x84, 0xB5, 0x00, 0x00, 0x00, 0x48, 0x0F, 0x84, 0x94, 0x00, 
	0x00, 0x00, 0x48, 0x74, 0x5E, 0x83, 0xE8, 0x03, 0x0F, 0x84, 
	0xC4, 0xFD, 0xFF, 0xFF, 0x48, 0x48, 0x0F, 0x84, 0x7D, 0xFE, 
	0xFF, 0xFF, 0x83, 0xE8, 0x03, 0x0F, 0x85, 0x93, 0x01, 0x00, 
	0x00, 0xC7, 0x45, 0xD4, 0x27, 0x00, 0x00, 0x00, 0xEB, 0x45, 
	0x49, 0x66, 0x83, 0x38, 0x00, 0x74, 0x06, 0x40, 0x40, 0x85, 
	0xC9, 0x75, 0xF3, 0x2B, 0x45, 0xF4, 0xD1, 0xF8, 0xE9, 0x70, 
	0x01, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x08, 0xA1, 0x44, 0x91, 
	0x00, 0x01, 0x89, 0x45, 0xF4, 0x8B, 0x45, 0xF4, 0xEB, 0x07, 
	0x49, 0x80, 0x38, 0x00, 0x74, 0x05, 0x40, 0x85, 0xC9, 0x75, 
	0xF5, 0x2B, 0x45, 0xF4, 0xE9, 0x4C, 0x01, 0x00, 0x00, 0xC7, 
	0x45, 0xF8, 0x08, 0x00, 0x00, 0x00, 0x89, 0x4D, 0xD4, 0xF6, 
	0x45, 0xFC, 0x80, 0xC7, 0x45, 0xF0, 0x10, 0x00, 0x00, 0x00, 
	0x0F, 0x84, 0x1C, 0xFE, 0xFF, 0xFF, 0x8A, 0x45, 0xD4, 0x04, 
	0x51, 0xC6, 0x45, 0xE8, 0x30, 0x88, 0x45, 0xE9, 0xC7, 0x45, 
	0xE0, 0x02, 0x00, 0x00, 0x00, 0xE9, 0x04, 0xFE, 0xFF, 0xFF, 
	0xF6, 0x45, 0xFC, 0x80, 0xC7, 0x45, 0xF0, 0x08, 0x00, 0x00, 
	0x00, 0x0F, 0x84, 0xF3, 0xFD, 0xFF, 0xFF, 0x80, 0x4D, 0xFD, 
	0x02, 0xE9, 0xEA, 0xFD, 0xFF, 0xFF, 0x83, 0x45, 0x10, 0x04, 
	0xF6, 0x45, 0xFC, 0x20, 0x8B, 0x45, 0x10, 0x8B, 0x40, 0xFC, 
	0x74, 0x09, 0x66, 0x8B, 0x4D, 0xEC, 0x66, 0x89, 0x08, 0xEB, 
	0x05, 0x8B, 0x4D, 0xEC, 0x89, 0x08, 0xC7, 0x45, 0xD0, 0x01, 
	0x00, 0x00, 0x00, 0xE9, 0xC7, 0x01, 0x00, 0x00, 0x83, 0x45, 
	0x10, 0x04, 0xF6, 0xC3, 0x20, 0x8B, 0x45, 0x10, 0x74, 0x12, 
	0xF6, 0xC3, 0x40, 0x74, 0x07, 0x0F, 0xBF, 0x40, 0xFC, 0x99, 
	0xEB, 0x10, 0x0F, 0xB7, 0x40, 0xFC, 0xEB, 0xF7, 0xF6, 0xC3, 
	0x40, 0x8B, 0x40, 0xFC, 0x75, 0xEF, 0x33, 0xD2, 0xF6, 0xC3, 
	0x40, 0x74, 0x15, 0x85, 0xD2, 0x7F, 0x11, 0x7C, 0x04, 0x85, 
	0xC0, 0x73, 0x0B, 0xF7, 0xD8, 0x83, 0xD2, 0x00, 0xF7, 0xDA, 
	0x80, 0x4D, 0xFD, 0x01, 0x85, 0x75, 0xFC, 0x8B, 0xD8, 0x8B, 
	0xFA, 0x75, 0x02, 0x33, 0xFF, 0x83, 0x7D, 0xF8, 0x00, 0x7D, 
	0x09, 0xC7, 0x45, 0xF8, 0x01, 0x00, 0x00, 0x00, 0xEB, 0x11, 
	0x83, 0x65, 0xFC, 0xF7, 0xB8, 0x00, 0x02, 0x00, 0x00, 0x39, 
	0x45, 0xF8, 0x7E, 0x03, 0x89, 0x45, 0xF8, 0x8B, 0xC3, 0x0B, 
	0xC7, 0x75, 0x04, 0x83, 0x65, 0xE0, 0x00, 0x8D, 0x75, 0xAF, 
	0x8B, 0x45, 0xF8, 0xFF, 0x4D, 0xF8, 0x85, 0xC0, 0x7F, 0x06, 
	0x8B, 0xC3, 0x0B, 0xC7, 0x74, 0x24, 0x8B, 0x45, 0xF0, 0x99, 
	0x52, 0x50, 0x57, 0x53, 0xE8, 0x25, 0x1C, 0x00, 0x00, 0x83, 
	0xC1, 0x30, 0x83, 0xF9, 0x39, 0x89, 0x5D, 0xC4, 0x8B, 0xD8, 
	0x8B, 0xFA, 0x7E, 0x03, 0x03, 0x4D, 0xD4, 0x88, 0x0E, 0x4E, 
	0xEB, 0xCC, 0x8D, 0x45, 0xAF, 0x2B, 0xC6, 0x46, 0xF6, 0x45, 
	0xFD, 0x02, 0x89, 0x45, 0xF0, 0x89, 0x75, 0xF4, 0x74, 0x18, 
	0x8B, 0xCE, 0x80, 0x39, 0x30, 0x75, 0x04, 0x85, 0xC0, 0x75, 
	0x0D, 0xFF, 0x4D, 0xF4, 0x8B, 0x4D, 0xF4, 0xC6, 0x01, 0x30, 
	0x40, 0x89, 0x45, 0xF0, 0x83, 0x7D, 0xD0, 0x00, 0x0F, 0x85, 
	0xE5, 0x00, 0x00, 0x00, 0x8B, 0x5D, 0xFC, 0xF6, 0xC3, 0x40, 
	0x74, 0x26, 0xF6, 0xC7, 0x01, 0x74, 0x06, 0xC6, 0x45, 0xE8, 
	0x2D, 0xEB, 0x14, 0xF6, 0xC3, 0x01, 0x74, 0x06, 0xC6, 0x45, 
	0xE8, 0x2B, 0xEB, 0x09, 0xF6, 0xC3, 0x02, 0x74, 0x0B, 0xC6, 
	0x45, 0xE8, 0x20, 0xC7, 0x45, 0xE0, 0x01, 0x00, 0x00, 0x00, 
	0x8B, 0x75, 0xE4, 0x2B, 0x75, 0xE0, 0x2B, 0x75, 0xF0, 0xF6, 
	0xC3, 0x0C, 0x75, 0x11, 0xFF, 0x75, 0x08, 0x8D, 0x45, 0xEC, 
	0x56, 0x6A, 0x20, 0xE8, 0xF6, 0xF8, 0xFF, 0xFF, 0x83, 0xC4, 
	0x0C, 0xFF, 0x75, 0xE0, 0x8B, 0x7D, 0x08, 0x8D, 0x45, 0xEC, 
	0x8D, 0x4D, 0xE8, 0xE8, 0x06, 0xF9, 0xFF, 0xFF, 0xF6, 0xC3, 
	0x08, 0x59, 0x74, 0x14, 0xF6, 0xC3, 0x04, 0x75, 0x0F, 0x57, 
	0x56, 0x6A, 0x30, 0x8D, 0x45, 0xEC, 0xE8, 0xCB, 0xF8, 0xFF, 
	0xFF, 0x83, 0xC4, 0x0C, 0x83, 0x7D, 0xDC, 0x00, 0x74, 0x41, 
	0x83, 0x7D, 0xF0, 0x00, 0x7E, 0x3B, 0x8B, 0x45, 0xF0, 0x8B, 
	0x5D, 0xF4, 0x89, 0x45, 0xC4, 0xFF, 0x4D, 0xC4, 0x33, 0xC0, 
	0x66, 0x8B, 0x03, 0x50, 0x8D, 0x45, 0xB0, 0x50, 0xE8, 0xCE, 
	0x1A, 0x00, 0x00, 0x43, 0x59, 0x43, 0x85, 0xC0, 0x59, 0x7E, 
	0x27, 0x8B, 0x7D, 0x08, 0x50, 0x8D, 0x45, 0xEC, 0x8D, 0x4D, 
	0xB0, 0xE8, 0xAE, 0xF8, 0xFF, 0xFF, 0x83, 0x7D, 0xC4, 0x00, 
	0x59, 0x75, 0xD0, 0xEB, 0x0F, 0xFF, 0x75, 0xF0, 0x8B, 0x4D, 
	0xF4, 0x8D, 0x45, 0xEC, 0xE8, 0x97, 0xF8, 0xFF, 0xFF, 0x59, 
	0xF6, 0x45, 0xFC, 0x04, 0x74, 0x11, 0xFF, 0x75, 0x08, 0x8D, 
	0x45, 0xEC, 0x56, 0x6A, 0x20, 0xE8, 0x5E, 0xF8, 0xFF, 0xFF, 
	0x83, 0xC4, 0x0C, 0x83, 0x7D, 0xD8, 0x00, 0x74, 0x0D, 0xFF, 
	0x75, 0xD8, 0xE8, 0x8B, 0x0C, 0x00, 0x00, 0x83, 0x65, 0xD8, 
	0x00, 0x59, 0x8B, 0x7D, 0x0C, 0x8A, 0x1F, 0x84, 0xDB, 0x0F, 
	0x85, 0xC4, 0xF8, 0xFF, 0xFF, 0x5F, 0x5E, 0x8B, 0x45, 0xEC, 
	0x5B, 0xC9, 0xC3, 0x39, 0x42, 0x00, 0x01, 0xBB, 0x40, 0x00, 
	0x01, 0xD8, 0x40, 0x00, 0x01, 0x24, 0x41, 0x00, 0x01, 0x5F, 
	0x41, 0x00, 0x01, 0x68, 0x41, 0x00, 0x01, 0xA0, 0x41, 0x00, 
	0x01, 0x72, 0x42, 0x00, 0x01, 0x8B, 0x0D, 0x40, 0xB9, 0x00, 
	0x01, 0x85, 0xC9, 0x56, 0x6A, 0x14, 0x5E, 0x75, 0x07, 0xB9, 
	0x00, 0x02, 0x00, 0x00, 0xEB, 0x06, 0x3B, 0xCE, 0x7D, 0x08, 
	0x8B, 0xCE, 0x89, 0x0D, 0x40, 0xB9, 0x00, 0x01, 0x6A, 0x04, 
	0x5A, 0xE8, 0x98, 0x0C, 0x00, 0x00, 0x85, 0xC0, 0xA3, 0x20, 
	0xA9, 0x00, 0x01, 0x75, 0x1E, 0x6A, 0x04, 0x5A, 0x8B, 0xCE, 
	0x89, 0x35, 0x40, 0xB9, 0x00, 0x01, 0xE8, 0x7F, 0x0C, 0x00, 
	0x00, 0x85, 0xC0, 0xA3, 0x20, 0xA9, 0x00, 0x01, 0x75, 0x05, 
	0x6A, 0x1A, 0x58, 0x5E, 0xC3, 0x33, 0xD2, 0xB9, 0x50, 0x91, 
	0x00, 0x01, 0xEB, 0x05, 0xA1, 0x20, 0xA9, 0x00, 0x01, 0x89, 
	0x0C, 0x02, 0x83, 0xC1, 0x20, 0x83, 0xC2, 0x04, 0x81, 0xF9, 
	0xD0, 0x93, 0x00, 0x01, 0x7C, 0xEA, 0x33, 0xD2, 0xB9, 0x60, 
	0x91, 0x00, 0x01, 0x8B, 0xC2, 0xC1, 0xF8, 0x05, 0x8B, 0x04, 
	0x85, 0x60, 0xB9, 0x00, 0x01, 0x8B, 0xF2, 0x83, 0xE6, 0x1F, 
	0x8B, 0x04, 0xF0, 0x83, 0xF8, 0xFF, 0x74, 0x04, 0x85, 0xC0, 
	0x75, 0x03, 0x83, 0x09, 0xFF, 0x83, 0xC1, 0x20, 0x42, 0x81, 
	0xF9, 0xC0, 0x91, 0x00, 0x01, 0x7C, 0xD4, 0x33, 0xC0, 0x5E, 
	0xC3, 0xE8, 0x8C, 0x19, 0x00, 0x00, 0x80, 0x3D, 0xD4, 0x99, 
	0x00, 0x01, 0x00, 0x74, 0x05, 0xE8, 0x89, 0x1A, 0x00, 0x00, 
	0xFF, 0x35, 0x20, 0xA9, 0x00, 0x01, 0xE8, 0x8D, 0x0B, 0x00, 
	0x00, 0x59, 0xC3, 0x55, 0x8B, 0xEC, 0x53, 0x56, 0x8B, 0x75, 
	0x0C, 0x8B, 0x46, 0x0C, 0xA8, 0x82, 0x8B, 0x5E, 0x10, 0x0F, 
	0x84, 0xF3, 0x00, 0x00, 0x00, 0xA8, 0x40, 0x0F, 0x85, 0xEB, 
	0x00, 0x00, 0x00, 0xA8, 0x01, 0x74, 0x17, 0x83, 0x66, 0x04, 
	0x00, 0xA8, 0x10, 0x0F, 0x84, 0xDB, 0x00, 0x00, 0x00, 0x8B, 
	0x4E, 0x08, 0x83, 0xE0, 0xFE, 0x89, 0x0E, 0x89, 0x46, 0x0C, 
	0x8B, 0x46, 0x0C, 0x83, 0x66, 0x04, 0x00, 0x83, 0x65, 0x0C, 
	0x00, 0x83, 0xE0, 0xEF, 0x83, 0xC8, 0x02, 0x66, 0xA9, 0x0C, 
	0x01, 0x89, 0x46, 0x0C, 0x75, 0x22, 0x81, 0xFE, 0x70, 0x91, 
	0x00, 0x01, 0x74, 0x08, 0x81, 0xFE, 0x90, 0x91, 0x00, 0x01, 
	0x75, 0x0B, 0x53, 0xE8, 0xDC, 0x17, 0x00, 0x00, 0x85, 0xC0, 
	0x59, 0x75, 0x07, 0x56, 0xE8, 0x8A, 0x1C, 0x00, 0x00, 0x59, 
	0x66, 0xF7, 0x46, 0x0C, 0x08, 0x01, 0x57, 0x74, 0x61, 0x8B, 
	0x46, 0x08, 0x8B, 0x3E, 0x8D, 0x48, 0x01, 0x89, 0x0E, 0x8B, 
	0x4E, 0x18, 0x2B, 0xF8, 0x49, 0x85, 0xFF, 0x89, 0x4E, 0x04, 
	0x7E, 0x0D, 0x57, 0x50, 0x53, 0xE8, 0xC3, 0x1A, 0x00, 0x00, 
	0x89, 0x45, 0x0C, 0xEB, 0x30, 0x83, 0xFB, 0xFF, 0x74, 0x16, 
	0x8B, 0xC3, 0xC1, 0xF8, 0x05, 0x8B, 0x04, 0x85, 0x60, 0xB9, 
	0x00, 0x01, 0x8B, 0xCB, 0x83, 0xE1, 0x1F, 0x8D, 0x04, 0xC8, 
	0xEB, 0x05, 0xB8, 0x28, 0x91, 0x00, 0x01, 0xF6, 0x40, 0x04, 
	0x20, 0x74, 0x0D, 0x6A, 0x02, 0x6A, 0x00, 0x53, 0xE8, 0x02, 
	0x1A, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x8B, 0x46, 0x08, 0x8A, 
	0x4D, 0x08, 0x88, 0x08, 0xEB, 0x14, 0x33, 0xFF, 0x47, 0x57, 
	0x8D, 0x45, 0x08, 0x50, 0x53, 0xE8, 0x73, 0x1A, 0x00, 0x00, 
	0x83, 0xC4, 0x0C, 0x89, 0x45, 0x0C, 0x39, 0x7D, 0x0C, 0x5F, 
	0x74, 0x06, 0x83, 0x4E, 0x0C, 0x20, 0xEB, 0x10, 0x8B, 0x45, 
	0x08, 0x25, 0xFF, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x83, 0xC8, 
	0x20, 0x89, 0x46, 0x0C, 0x83, 0xC8, 0xFF, 0x5E, 0x5B, 0x5D, 
	0xC3, 0xF6, 0x40, 0x0C, 0x40, 0x74, 0x06, 0x83, 0x78, 0x08, 
	0x00, 0x74, 0x16, 0x50, 0xFF, 0x74, 0x24, 0x08, 0xE8, 0x15, 
	0x1C, 0x00, 0x00, 0x66, 0x3D, 0xFF, 0xFF, 0x59, 0x59, 0x75, 
	0x04, 0x83, 0x0E, 0xFF, 0xC3, 0xFF, 0x06, 0xC3, 0x55, 0x8B, 
	0xEC, 0x56, 0x8B, 0xF0, 0xEB, 0x14, 0xFF, 0x75, 0x08, 0x8B, 
	0x45, 0x10, 0xFF, 0x4D, 0x0C, 0xE8, 0xC5, 0xFF, 0xFF, 0xFF, 
	0x83, 0x3E, 0xFF, 0x59, 0x74, 0x06, 0x83, 0x7D, 0x0C, 0x00, 
	0x7F, 0xE6, 0x5E, 0x5D, 0xC3, 0xF6, 0x47, 0x0C, 0x40, 0x53, 
	0x56, 0x8B, 0xF0, 0x8B, 0xD9, 0x74, 0x27, 0x83, 0x7F, 0x08, 
	0x00, 0x75, 0x21, 0x8B, 0x44, 0x24, 0x0C, 0x01, 0x06, 0xEB, 
	0x20, 0xFF, 0x4C, 0x24, 0x0C, 0x33, 0xC0, 0x66, 0x8B, 0x03, 
	0x50, 0x8B, 0xC7, 0xE8, 0x8B, 0xFF, 0xFF, 0xFF, 0x43, 0x43, 
	0x83, 0x3E, 0xFF, 0x59, 0x74, 0x07, 0x83, 0x7C, 0x24, 0x0C, 
	0x00, 0x7F, 0xE0, 0x5E, 0x5B, 0xC3, 0x55, 0x8B, 0xEC, 0x81, 
	0xEC, 0x54, 0x04, 0x00, 0x00, 0x8B, 0x55, 0x0C, 0x33, 0xC0, 
	0x53, 0x66, 0x8B, 0x1A, 0x33, 0xC9, 0x66, 0x3B, 0xD8, 0x89, 
	0x45, 0xE8, 0x89, 0x45, 0xF8, 0x89, 0x45, 0xD4, 0x89, 0x45, 
	0xF0, 0x89, 0x45, 0xEC, 0x0F, 0x84, 0x7D, 0x07, 0x00, 0x00, 
	0x56, 0x57, 0xEB, 0x03, 0x8B, 0x4D, 0xC4, 0x6A, 0x02, 0x5F, 
	0x01, 0x7D, 0x0C, 0x83, 0x7D, 0xEC, 0x00, 0x0F, 0x8C, 0x64, 
	0x07, 0x00, 0x00, 0x6A, 0x20, 0x5E, 0x66, 0x3B, 0xDE, 0x72, 
	0x15, 0x66, 0x83, 0xFB, 0x78, 0x77, 0x0F, 0x0F, 0xB7, 0xC3, 
	0x0F, 0xBE, 0x80, 0xB0, 0x1C, 0x00, 0x01, 0x83, 0xE0, 0x0F, 
	0xEB, 0x02, 0x33, 0xC0, 0x0F, 0xBE, 0x84, 0xC1, 0xD0, 0x1C, 
	0x00, 0x01, 0x6A, 0x07, 0xC1, 0xF8, 0x04, 0x59, 0x3B, 0xC1, 
	0x89, 0x45, 0xC4, 0x0F, 0x87, 0x1D, 0x07, 0x00, 0x00, 0xFF, 
	0x24, 0x85, 0xE5, 0x51, 0x00, 0x01, 0x33, 0xC0, 0x83, 0x4D, 
	0xF8, 0xFF, 0x89, 0x45, 0xC0, 0x89, 0x45, 0xCC, 0x89, 0x45, 
	0xE8, 0x89, 0x45, 0xE4, 0x89, 0x45, 0xFC, 0x89, 0x45, 0xE0, 
	0xE9, 0xF9, 0x06, 0x00, 0x00, 0x0F, 0xB7, 0xC3, 0x2B, 0xC6, 
	0x74, 0x3B, 0x83, 0xE8, 0x03, 0x74, 0x2D, 0x83, 0xE8, 0x08, 
	0x74, 0x1F, 0x2B, 0xC7, 0x74, 0x12, 0x83, 0xE8, 0x03, 0x0F, 
	0x85, 0xDB, 0x06, 0x00, 0x00, 0x83, 0x4D, 0xFC, 0x08, 0xE9, 
	0xD2, 0x06, 0x00, 0x00, 0x83, 0x4D, 0xFC, 0x04, 0xE9, 0xC9, 
	0x06, 0x00, 0x00, 0x83, 0x4D, 0xFC, 0x01, 0xE9, 0xC0, 0x06, 
	0x00, 0x00, 0x80, 0x4D, 0xFC, 0x80, 0xE9, 0xB7, 0x06, 0x00, 
	0x00, 0x09, 0x7D, 0xFC, 0xE9, 0xAF, 0x06, 0x00, 0x00, 0x66, 
	0x83, 0xFB, 0x2A, 0x75, 0x21, 0x83, 0x45, 0x10, 0x04, 0x8B, 
	0x45, 0x10, 0x8B, 0x40, 0xFC, 0x85, 0xC0, 0x89, 0x45, 0xE8, 
	0x0F, 0x8D, 0x94, 0x06, 0x00, 0x00, 0x83, 0x4D, 0xFC, 0x04, 
	0xF7, 0x5D, 0xE8, 0xE9, 0x88, 0x06, 0x00, 0x00, 0x8B, 0x45, 
	0xE8, 0x0F, 0xB7, 0xCB, 0x8D, 0x04, 0x80, 0x8D, 0x44, 0x41, 
	0xD0, 0x89, 0x45, 0xE8, 0xE9, 0x73, 0x06, 0x00, 0x00, 0x83, 
	0x65, 0xF8, 0x00, 0xE9, 0x6A, 0x06, 0x00, 0x00, 0x66, 0x83, 
	0xFB, 0x2A, 0x75, 0x1E, 0x83, 0x45, 0x10, 0x04, 0x8B, 0x45, 
	0x10, 0x8B, 0x40, 0xFC, 0x85, 0xC0, 0x89, 0x45, 0xF8, 0x0F, 
	0x8D, 0x4F, 0x06, 0x00, 0x00, 0x83, 0x4D, 0xF8, 0xFF, 0xE9, 
	0x46, 0x06, 0x00, 0x00, 0x8B, 0x45, 0xF8, 0x0F, 0xB7, 0xCB, 
	0x8D, 0x04, 0x80, 0x8D, 0x44, 0x41, 0xD0, 0x89, 0x45, 0xF8, 
	0xE9, 0x31, 0x06, 0x00, 0x00, 0x0F, 0xB7, 0xC3, 0x83, 0xF8, 
	0x49, 0x74, 0x2D, 0x83, 0xF8, 0x68, 0x74, 0x20, 0x83, 0xF8, 
	0x6C, 0x74, 0x12, 0x83, 0xF8, 0x77, 0x0F, 0x85, 0x16, 0x06, 
	0x00, 0x00, 0x80, 0x4D, 0xFD, 0x08, 0xE9, 0x0D, 0x06, 0x00, 
	0x00, 0x83, 0x4D, 0xFC, 0x10, 0xE9, 0x04, 0x06, 0x00, 0x00, 
	0x09, 0x75, 0xFC, 0xE9, 0xFC, 0x05, 0x00, 0x00, 0x8B, 0x45, 
	0x0C, 0x66, 0x8B, 0x00, 0x66, 0x3D, 0x36, 0x00, 0x75, 0x17, 
	0x8B, 0x4D, 0x0C, 0x66, 0x83, 0x79, 0x02, 0x34, 0x75, 0x0D, 
	0x83, 0x45, 0x0C, 0x04, 0x80, 0x4D, 0xFD, 0x80, 0xE9, 0xD9, 
	0x05, 0x00, 0x00, 0x66, 0x3D, 0x33, 0x00, 0x75, 0x17, 0x8B, 
	0x4D, 0x0C, 0x66, 0x83, 0x79, 0x02, 0x32, 0x75, 0x0D, 0x83, 
	0x45, 0x0C, 0x04, 0x80, 0x65, 0xFD, 0x7F, 0xE9, 0xBC, 0x05, 
	0x00, 0x00, 0x66, 0x3D, 0x64, 0x00, 0x0F, 0x84, 0xB2, 0x05, 
	0x00, 0x00, 0x66, 0x3D, 0x69, 0x00, 0x0F, 0x84, 0xA8, 0x05, 
	0x00, 0x00, 0x66, 0x3D, 0x6F, 0x00, 0x0F, 0x84, 0x9E, 0x05, 
	0x00, 0x00, 0x66, 0x3D, 0x75, 0x00, 0x0F, 0x84, 0x94, 0x05, 
	0x00, 0x00, 0x66, 0x3D, 0x78, 0x00, 0x0F, 0x84, 0x8A, 0x05, 
	0x00, 0x00, 0x66, 0x3D, 0x58, 0x00, 0x0F, 0x84, 0x80, 0x05, 
	0x00, 0x00, 0x83, 0x65, 0xC4, 0x00, 0x8B, 0x45, 0x08, 0x53, 
	0x8D, 0x75, 0xEC, 0xC7, 0x45, 0xE0, 0x01, 0x00, 0x00, 0x00, 
	0xE8, 0x4A, 0xFD, 0xFF, 0xFF, 0xE9, 0x63, 0x05, 0x00, 0x00, 
	0x0F, 0xB7, 0xC3, 0x83, 0xF8, 0x67, 0x0F, 0x8F, 0x8A, 0x02, 
	0x00, 0x00, 0x83, 0xF8, 0x65, 0x0F, 0x8D, 0xA9, 0x00, 0x00, 
	0x00, 0x83, 0xF8, 0x58, 0x0F, 0x8F, 0x11, 0x01, 0x00, 0x00, 
	0x0F, 0x84, 0xE7, 0x02, 0x00, 0x00, 0x83, 0xE8, 0x43, 0x0F, 
	0x84, 0xB4, 0x00, 0x00, 0x00, 0x2B, 0xC7, 0x0F, 0x84, 0x80, 
	0x00, 0x00, 0x00, 0x2B, 0xC7, 0x74, 0x7C, 0x83, 0xE8, 0x0C, 
	0x0F, 0x85, 0x17, 0x04, 0x00, 0x00, 0x66, 0xF7, 0x45, 0xFC, 
	0x30, 0x08, 0x75, 0x03, 0x09, 0x75, 0xFC, 0x8B, 0x55, 0xF8, 
	0x83, 0xFA, 0xFF, 0x75, 0x05, 0xBA, 0xFF, 0xFF, 0xFF, 0x7F, 
	0x83, 0x45, 0x10, 0x04, 0xF6, 0x45, 0xFC, 0x20, 0x8B, 0x45, 
	0x10, 0x8B, 0x40, 0xFC, 0x89, 0x45, 0xF4, 0x0F, 0x84, 0x64, 
	0x02, 0x00, 0x00, 0x85, 0xC0, 0x75, 0x08, 0xA1, 0x44, 0x91, 
	0x00, 0x01, 0x89, 0x45, 0xF4, 0x83, 0x65, 0xF0, 0x00, 0x85, 
	0xD2, 0x8B, 0x45, 0xF4, 0x0F, 0x8E, 0xCD, 0x03, 0x00, 0x00, 
	0x8A, 0x08, 0x84, 0xC9, 0x0F, 0x84, 0xC3, 0x03, 0x00, 0x00, 
	0x8B, 0x35, 0xE0, 0x94, 0x00, 0x01, 0x0F, 0xB6, 0xC9, 0xF6, 
	0x44, 0x4E, 0x01, 0x80, 0x74, 0x01, 0x40, 0x40, 0xFF, 0x45, 
	0xF0, 0x39, 0x55, 0xF0, 0x7C, 0xDC, 0xE9, 0xA4, 0x03, 0x00, 
	0x00, 0xC7, 0x45, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x03, 0xDE, 
	0x83, 0x4D, 0xFC, 0x40, 0x83, 0x7D, 0xF8, 0x00, 0x8D, 0xBD, 
	0xAC, 0xFB, 0xFF, 0xFF, 0x89, 0x7D, 0xF4, 0x0F, 0x8D, 0x03, 
	0x01, 0x00, 0x00, 0xC7, 0x45, 0xF8, 0x06, 0x00, 0x00, 0x00, 
	0xE9, 0x3E, 0x01, 0x00, 0x00, 0x66, 0xF7, 0x45, 0xFC, 0x30, 
	0x08, 0x75, 0x03, 0x09, 0x75, 0xFC, 0x83, 0x45, 0x10, 0x04, 
	0x8B, 0x45, 0x10, 0x0F, 0xB7, 0x40, 0xFC, 0x33, 0xF6, 0x46, 
	0xF6, 0x45, 0xFC, 0x20, 0x89, 0x75, 0xE0, 0x89, 0x45, 0xBC, 
	0x74, 0x68, 0xFF, 0x35, 0xF0, 0x94, 0x00, 0x01, 0x88, 0x45, 
	0xD8, 0x8D, 0x45, 0xD8, 0x50, 0x8D, 0x85, 0xAC, 0xFB, 0xFF, 
	0xFF, 0x50, 0xC6, 0x45, 0xD9, 0x00, 0xE8, 0x0E, 0x19, 0x00, 
	0x00, 0x83, 0xC4, 0x0C, 0x85, 0xC0, 0x7D, 0x4B, 0x89, 0x75, 
	0xCC, 0xEB, 0x46, 0x83, 0xE8, 0x5A, 0x74, 0x52, 0x83, 0xE8, 
	0x09, 0x74, 0xB3, 0x48, 0x0F, 0x85, 0x19, 0x03, 0x00, 0x00, 
	0x83, 0x4D, 0xFC, 0x40, 0xC7, 0x45, 0xF0, 0x0A, 0x00, 0x00, 
	0x00, 0x8B, 0x5D, 0xFC, 0xBE, 0x00, 0x80, 0x00, 0x00, 0x85, 
	0xDE, 0x0F, 0x84, 0x20, 0x02, 0x00, 0x00, 0x8B, 0x4D, 0x10, 
	0x8B, 0x01, 0x8B, 0x51, 0x04, 0x83, 0xC1, 0x08, 0x89, 0x4D, 
	0x10, 0xE9, 0x35, 0x02, 0x00, 0x00, 0x66, 0x89, 0x85, 0xAC, 
	0xFB, 0xFF, 0xFF, 0x8D, 0x85, 0xAC, 0xFB, 0xFF, 0xFF, 0x89, 
	0x45, 0xF4, 0x89, 0x75, 0xF0, 0xE9, 0xD3, 0x02, 0x00, 0x00, 
	0x83, 0x45, 0x10, 0x04, 0x8B, 0x45, 0x10, 0x8B, 0x40, 0xFC, 
	0x85, 0xC0, 0x74, 0x2D, 0x8B, 0x48, 0x04, 0x85, 0xC9, 0x74, 
	0x26, 0xF6, 0x45, 0xFD, 0x08, 0x0F, 0xBF, 0x00, 0x89, 0x4D, 
	0xF4, 0x74, 0x11, 0x99, 0x2B, 0xC2, 0xD1, 0xF8, 0xC7, 0x45, 
	0xE0, 0x01, 0x00, 0x00, 0x00, 0xE9, 0x9E, 0x02, 0x00, 0x00, 
	0x83, 0x65, 0xE0, 0x00, 0xE9, 0x95, 0x02, 0x00, 0x00, 0xA1, 
	0x44, 0x91, 0x00, 0x01, 0x89, 0x45, 0xF4, 0x8D, 0x50, 0x01, 
	0x8A, 0x08, 0x40, 0x84, 0xC9, 0x75, 0xF9, 0xE9, 0xB7, 0x00, 
	0x00, 0x00, 0x75, 0x0F, 0x66, 0x83, 0xFB, 0x67, 0x75, 0x3F, 
	0xC7, 0x45, 0xF8, 0x01, 0x00, 0x00, 0x00, 0xEB, 0x36, 0xB8, 
	0x00, 0x02, 0x00, 0x00, 0x39, 0x45, 0xF8, 0x7E, 0x03, 0x89, 
	0x45, 0xF8, 0xBE, 0xA3, 0x00, 0x00, 0x00, 0x39, 0x75, 0xF8, 
	0x7E, 0x1F, 0x8B, 0x4D, 0xF8, 0x81, 0xC1, 0x5D, 0x01, 0x00, 
	0x00, 0xE8, 0xE4, 0x05, 0x00, 0x00, 0x85, 0xC0, 0x89, 0x45, 
	0xD4, 0x74, 0x07, 0x89, 0x45, 0xF4, 0x8B, 0xF8, 0xEB, 0x03, 
	0x89, 0x75, 0xF8, 0x8B, 0x45, 0x10, 0x8B, 0x08, 0xFF, 0x75, 
	0xC0, 0x83, 0xC0, 0x08, 0xFF, 0x75, 0xF8, 0x89, 0x45, 0x10, 
	0x8B, 0x40, 0xFC, 0x89, 0x45, 0xB0, 0x0F, 0xBE, 0xC3, 0x50, 
	0x8D, 0x45, 0xAC, 0x57, 0x50, 0x89, 0x4D, 0xAC, 0xFF, 0x15, 
	0xC8, 0x94, 0x00, 0x01, 0x8B, 0x75, 0xFC, 0x83, 0xC4, 0x14, 
	0x81, 0xE6, 0x80, 0x00, 0x00, 0x00, 0x74, 0x0E, 0x83, 0x7D, 
	0xF8, 0x00, 0x75, 0x08, 0x57, 0xFF, 0x15, 0xD4, 0x94, 0x00, 
	0x01, 0x59, 0x66, 0x83, 0xFB, 0x67, 0x75, 0x0C, 0x85, 0xF6, 
	0x75, 0x08, 0x57, 0xFF, 0x15, 0xCC, 0x94, 0x00, 0x01, 0x59, 
	0x80, 0x3F, 0x2D, 0x75, 0x08, 0x80, 0x4D, 0xFD, 0x01, 0x47, 
	0x89, 0x7D, 0xF4, 0x8B, 0xC7, 0x8D, 0x50, 0x01, 0x8A, 0x08, 
	0x40, 0x84, 0xC9, 0x75, 0xF9, 0x2B, 0xC2, 0xE9, 0xC0, 0x01, 
	0x00, 0x00, 0x83, 0xE8, 0x69, 0x0F, 0x84, 0xA1, 0xFE, 0xFF, 
	0xFF, 0x83, 0xE8, 0x05, 0x0F, 0x84, 0xA9, 0x00, 0x00, 0x00, 
	0x48, 0x0F, 0x84, 0x88, 0x00, 0x00, 0x00, 0x48, 0x74, 0x52, 
	0x83, 0xE8, 0x03, 0x0F, 0x84, 0x92, 0xFD, 0xFF, 0xFF, 0x2B, 
	0xC7, 0x0F, 0x84, 0x81, 0xFE, 0xFF, 0xFF, 0x83, 0xE8, 0x03, 
	0x0F, 0x85, 0x8D, 0x01, 0x00, 0x00, 0xC7, 0x45, 0xD0, 0x27, 
	0x00, 0x00, 0x00, 0xEB, 0x39, 0x85, 0xC0, 0x75, 0x08, 0xA1, 
	0x48, 0x91, 0x00, 0x01, 0x89, 0x45, 0xF4, 0x8B, 0x45, 0xF4, 
	0xC7, 0x45, 0xE0, 0x01, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x4A, 
	0x66, 0x83, 0x38, 0x00, 0x74, 0x06, 0x03, 0xC7, 0x85, 0xD2, 
	0x75, 0xF3, 0x2B, 0x45, 0xF4, 0xD1, 0xF8, 0xE9, 0x52, 0x01, 
	0x00, 0x00, 0xC7, 0x45, 0xF8, 0x08, 0x00, 0x00, 0x00, 0x89, 
	0x4D, 0xD0, 0xF6, 0x45, 0xFC, 0x80, 0xC7, 0x45, 0xF0, 0x10, 
	0x00, 0x00, 0x00, 0x0F, 0x84, 0x2C, 0xFE, 0xFF, 0xFF, 0x8B, 
	0x45, 0xD0, 0x83, 0xC0, 0x51, 0x66, 0xC7, 0x45, 0xDC, 0x30, 
	0x00, 0x66, 0x89, 0x45, 0xDE, 0x89, 0x7D, 0xE4, 0xE9, 0x14, 
	0xFE, 0xFF, 0xFF, 0xF6, 0x45, 0xFC, 0x80, 0xC7, 0x45, 0xF0, 
	0x08, 0x00, 0x00, 0x00, 0x0F, 0x84, 0x03, 0xFE, 0xFF, 0xFF, 
	0x80, 0x4D, 0xFD, 0x02, 0xE9, 0xFA, 0xFD, 0xFF, 0xFF, 0x83, 
	0x45, 0x10, 0x04, 0xF6, 0x45, 0xFC, 0x20, 0x8B, 0x45, 0x10, 
	0x8B, 0x40, 0xFC, 0x74, 0x09, 0x66, 0x8B, 0x4D, 0xEC, 0x66, 
	0x89, 0x08, 0xEB, 0x05, 0x8B, 0x4D, 0xEC, 0x89, 0x08, 0xC7, 
	0x45, 0xCC, 0x01, 0x00, 0x00, 0x00, 0xE9, 0xD6, 0x01, 0x00, 
	0x00, 0x83, 0x45, 0x10, 0x04, 0xF6, 0xC3, 0x20, 0x8B, 0x45, 
	0x10, 0x74, 0x12, 0xF6, 0xC3, 0x40, 0x74, 0x07, 0x0F, 0xBF, 
	0x40, 0xFC, 0x99, 0xEB, 0x10, 0x0F, 0xB7, 0x40, 0xFC, 0xEB, 
	0xF7, 0xF6, 0xC3, 0x40, 0x8B, 0x40, 0xFC, 0x75, 0xEF, 0x33, 
	0xD2, 0xF6, 0xC3, 0x40, 0x74, 0x15, 0x85, 0xD2, 0x7F, 0x11, 
	0x7C, 0x04, 0x85, 0xC0, 0x73, 0x0B, 0xF7, 0xD8, 0x83, 0xD2, 
	0x00, 0xF7, 0xDA, 0x80, 0x4D, 0xFD, 0x01, 0x85, 0x75, 0xFC, 
	0x8B, 0xD8, 0x8B, 0xFA, 0x75, 0x02, 0x33, 0xFF, 0x83, 0x7D, 
	0xF8, 0x00, 0x7D, 0x09, 0xC7, 0x45, 0xF8, 0x01, 0x00, 0x00, 
	0x00, 0xEB, 0x11, 0x83, 0x65, 0xFC, 0xF7, 0xB8, 0x00, 0x02, 
	0x00, 0x00, 0x39, 0x45, 0xF8, 0x7E, 0x03, 0x89, 0x45, 0xF8, 
	0x8B, 0xC3, 0x0B, 0xC7, 0x75, 0x04, 0x83, 0x65, 0xE4, 0x00, 
	0x8D, 0xB5, 0xAB, 0xFD, 0xFF, 0xFF, 0x8B, 0x45, 0xF8, 0xFF, 
	0x4D, 0xF8, 0x85, 0xC0, 0x7F, 0x06, 0x8B, 0xC3, 0x0B, 0xC7, 
	0x74, 0x24, 0x8B, 0x45, 0xF0, 0x99, 0x52, 0x50, 0x57, 0x53, 
	0xE8, 0x01, 0x12, 0x00, 0x00, 0x83, 0xC1, 0x30, 0x83, 0xF9, 
	0x39, 0x89, 0x5D, 0xB8, 0x8B, 0xD8, 0x8B, 0xFA, 0x7E, 0x03, 
	0x03, 0x4D, 0xD0, 0x88, 0x0E, 0x4E, 0xEB, 0xCC, 0x8D, 0x85, 
	0xAB, 0xFD, 0xFF, 0xFF, 0x2B, 0xC6, 0x46, 0xF6, 0x45, 0xFD, 
	0x02, 0x89, 0x45, 0xF0, 0x89, 0x75, 0xF4, 0x74, 0x18, 0x8B, 
	0xCE, 0x80, 0x39, 0x30, 0x75, 0x04, 0x85, 0xC0, 0x75, 0x0D, 
	0xFF, 0x4D, 0xF4, 0x8B, 0x4D, 0xF4, 0xC6, 0x01, 0x30, 0x40, 
	0x89, 0x45, 0xF0, 0x83, 0x7D, 0xCC, 0x00, 0x0F, 0x85, 0xEE, 
	0x00, 0x00, 0x00, 0x8B, 0x45, 0xFC, 0xA8, 0x40, 0x74, 0x2A, 
	0xF6, 0xC4, 0x01, 0x74, 0x08, 0x66, 0xC7, 0x45, 0xDC, 0x2D, 
	0x00, 0xEB, 0x16, 0xA8, 0x01, 0x74, 0x08, 0x66, 0xC7, 0x45, 
	0xDC, 0x2B, 0x00, 0xEB, 0x0A, 0xA8, 0x02, 0x74, 0x0D, 0x66, 
	0xC7, 0x45, 0xDC, 0x20, 0x00, 0xC7, 0x45, 0xE4, 0x01, 0x00, 
	0x00, 0x00, 0x8B, 0x5D, 0xE8, 0x2B, 0x5D, 0xE4, 0x2B, 0x5D, 
	0xF0, 0xF6, 0x45, 0xFC, 0x0C, 0x75, 0x11, 0xFF, 0x75, 0x08, 
	0x8D, 0x45, 0xEC, 0x53, 0x6A, 0x20, 0xE8, 0xB9, 0xF8, 0xFF, 
	0xFF, 0x83, 0xC4, 0x0C, 0xFF, 0x75, 0xE4, 0x8B, 0x7D, 0x08, 
	0x8D, 0x45, 0xEC, 0x8D, 0x4D, 0xDC, 0xE8, 0xCA, 0xF8, 0xFF, 
	0xFF, 0xF6, 0x45, 0xFC, 0x08, 0x59, 0x74, 0x15, 0xF6, 0x45, 
	0xFC, 0x04, 0x75, 0x0F, 0x57, 0x53, 0x6A, 0x30, 0x8D, 0x45, 
	0xEC, 0xE8, 0x8C, 0xF8, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x83, 
	0x7D, 0xE0, 0x00, 0x75, 0x44, 0x8B, 0x45, 0xF0, 0x85, 0xC0, 
	0x7E, 0x3D, 0x8B, 0x7D, 0xF4, 0x89, 0x45, 0xC8, 0xFF, 0x35, 
	0xF0, 0x94, 0x00, 0x01, 0xFF, 0x4D, 0xC8, 0x8D, 0x45, 0xBC, 
	0x57, 0x50, 0xE8, 0x2A, 0x15, 0x00, 0x00, 0x83, 0xC4, 0x0C, 
	0x85, 0xC0, 0x89, 0x45, 0xB8, 0x7E, 0x29, 0xFF, 0x75, 0xBC, 
	0x8B, 0x45, 0x08, 0x8D, 0x75, 0xEC, 0xE8, 0x26, 0xF8, 0xFF, 
	0xFF, 0x03, 0x7D, 0xB8, 0x83, 0x7D, 0xC8, 0x00, 0x59, 0x7F, 
	0xCB, 0xEB, 0x0F, 0xFF, 0x75, 0xF0, 0x8B, 0x4D, 0xF4, 0x8D, 
	0x45, 0xEC, 0xE8, 0x56, 0xF8, 0xFF, 0xFF, 0x59, 0xF6, 0x45, 
	0xFC, 0x04, 0x74, 0x11, 0xFF, 0x75, 0x08, 0x8D, 0x45, 0xEC, 
	0x53, 0x6A, 0x20, 0xE8, 0x1C, 0xF8, 0xFF, 0xFF, 0x83, 0xC4, 
	0x0C, 0x83, 0x7D, 0xD4, 0x00, 0x74, 0x0D, 0xFF, 0x75, 0xD4, 
	0xE8, 0x5B, 0x02, 0x00, 0x00, 0x83, 0x65, 0xD4, 0x00, 0x59, 
	0x8B, 0x45, 0x0C, 0x66, 0x8B, 0x18, 0x66, 0x85, 0xDB, 0x0F, 
	0x85, 0x89, 0xF8, 0xFF, 0xFF, 0x5F, 0x5E, 0x8B, 0x45, 0xEC, 
	0x5B, 0xC9, 0xC3, 0x52, 0x4C, 0x00, 0x01, 0xB8, 0x4A, 0x00, 
	0x01, 0xD5, 0x4A, 0x00, 0x01, 0x1F, 0x4B, 0x00, 0x01, 0x5B, 
	0x4B, 0x00, 0x01, 0x64, 0x4B, 0x00, 0x01, 0x9D, 0x4B, 0x00, 
	0x01, 0x6A, 0x4C, 0x00, 0x01, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 
	0x10, 0x53, 0x33, 0xDB, 0x39, 0x1D, 0x68, 0x9E, 0x00, 0x01, 
	0x56, 0x57, 0x75, 0x6D, 0x68, 0xA8, 0x1D, 0x00, 0x01, 0xFF, 
	0x15, 0x80, 0x10, 0x00, 0x01, 0x8B, 0xF8, 0x3B, 0xFB, 0x0F, 
	0x84, 0x93, 0x00, 0x00, 0x00, 0x8B, 0x35, 0x34, 0x10, 0x00, 
	0x01, 0x68, 0x9C, 0x1D, 0x00, 0x01, 0x57, 0xFF, 0xD6, 0x85, 
	0xC0, 0xA3, 0x68, 0x9E, 0x00, 0x01, 0x74, 0x7C, 0x68, 0x8C, 
	0x1D, 0x00, 0x01, 0x57, 0xFF, 0xD6, 0x68, 0x78, 0x1D, 0x00, 
	0x01, 0x57, 0xA3, 0x6C, 0x9E, 0x00, 0x01, 0xFF, 0xD6, 0x83, 
	0x3D, 0x9C, 0x99, 0x00, 0x01, 0x02, 0xA3, 0x70, 0x9E, 0x00, 
	0x01, 0x75, 0x1E, 0x68, 0x5C, 0x1D, 0x00, 0x01, 0x57, 0xFF, 
	0xD6, 0x85, 0xC0, 0xA3, 0x78, 0x9E, 0x00, 0x01, 0x74, 0x0D, 
	0x68, 0x44, 0x1D, 0x00, 0x01, 0x57, 0xFF, 0xD6, 0xA3, 0x74, 
	0x9E, 0x00, 0x01, 0xA1, 0x74, 0x9E, 0x00, 0x01, 0x85, 0xC0, 
	0x74, 0x3C, 0xFF, 0xD0, 0x85, 0xC0, 0x74, 0x1D, 0x8D, 0x4D, 
	0xFC, 0x51, 0x6A, 0x0C, 0x8D, 0x4D, 0xF0, 0x51, 0x6A, 0x01, 
	0x50, 0xFF, 0x15, 0x78, 0x9E, 0x00, 0x01, 0x85, 0xC0, 0x74, 
	0x06, 0xF6, 0x45, 0xF8, 0x01, 0x75, 0x19, 0x83, 0x3D, 0xA8, 
	0x99, 0x00, 0x01, 0x04, 0x72, 0x0A, 0x80, 0x4D, 0x12, 0x20, 
	0xEB, 0x29, 0x33, 0xC0, 0xEB, 0x35, 0x80, 0x4D, 0x12, 0x04, 
	0xEB, 0x1F, 0xA1, 0x6C, 0x9E, 0x00, 0x01, 0x85, 0xC0, 0x74, 
	0x16, 0xFF, 0xD0, 0x8B, 0xD8, 0x85, 0xDB, 0x74, 0x0E, 0xA1, 
	0x70, 0x9E, 0x00, 0x01, 0x85, 0xC0, 0x74, 0x05, 0x53, 0xFF, 
	0xD0, 0x8B, 0xD8, 0xFF, 0x75, 0x10, 0xFF, 0x75, 0x0C, 0xFF, 
	0x75, 0x08, 0x53, 0xFF, 0x15, 0x68, 0x9E, 0x00, 0x01, 0x5F, 
	0x5E, 0x5B, 0xC9, 0xC3, 0xCC, 0xCC, 0x8B, 0x4C, 0x24, 0x0C, 
	0x57, 0x85, 0xC9, 0x0F, 0x84, 0x92, 0x00, 0x00, 0x00, 0x56, 
	0x53, 0x8B, 0xD9, 0x8B, 0x74, 0x24, 0x14, 0xF7, 0xC6, 0x03, 
	0x00, 0x00, 0x00, 0x8B, 0x7C, 0x24, 0x10, 0x75, 0x0B, 0xC1, 
	0xE9, 0x02, 0x0F, 0x85, 0x85, 0x00, 0x00, 0x00, 0xEB, 0x27, 
	0x8A, 0x06, 0x83, 0xC6, 0x01, 0x88, 0x07, 0x83, 0xC7, 0x01, 
	0x83, 0xE9, 0x01, 0x74, 0x2B, 0x84, 0xC0, 0x74, 0x2F, 0xF7, 
	0xC6, 0x03, 0x00, 0x00, 0x00, 0x75, 0xE5, 0x8B, 0xD9, 0xC1, 
	0xE9, 0x02, 0x75, 0x61, 0x83, 0xE3, 0x03, 0x74, 0x13, 0x8A, 
	0x06, 0x83, 0xC6, 0x01, 0x88, 0x07, 0x83, 0xC7, 0x01, 0x84, 
	0xC0, 0x74, 0x37, 0x83, 0xEB, 0x01, 0x75, 0xED, 0x8B, 0x44, 
	0x24, 0x10, 0x5B, 0x5E, 0x5F, 0xC3, 0xF7, 0xC7, 0x03, 0x00, 
	0x00, 0x00, 0x74, 0x16, 0x88, 0x07, 0x83, 0xC7, 0x01, 0x83, 
	0xE9, 0x01, 0x0F, 0x84, 0x98, 0x00, 0x00, 0x00, 0xF7, 0xC7, 
	0x03, 0x00, 0x00, 0x00, 0x75, 0xEA, 0x8B, 0xD9, 0xC1, 0xE9, 
	0x02, 0x75, 0x74, 0x88, 0x07, 0x83, 0xC7, 0x01, 0x83, 0xEB, 
	0x01, 0x75, 0xF6, 0x5B, 0x5E, 0x8B, 0x44, 0x24, 0x08, 0x5F, 
	0xC3, 0x89, 0x17, 0x83, 0xC7, 0x04, 0x83, 0xE9, 0x01, 0x74, 
	0x9F, 0xBA, 0xFF, 0xFE, 0xFE, 0x7E, 0x8B, 0x06, 0x03, 0xD0, 
	0x83, 0xF0, 0xFF, 0x33, 0xC2, 0x8B, 0x16, 0x83, 0xC6, 0x04, 
	0xA9, 0x00, 0x01, 0x01, 0x81, 0x74, 0xDC, 0x84, 0xD2, 0x74, 
	0x2C, 0x84, 0xF6, 0x74, 0x1E, 0xF7, 0xC2, 0x00, 0x00, 0xFF, 
	0x00, 0x74, 0x0C, 0xF7, 0xC2, 0x00, 0x00, 0x00, 0xFF, 0x75, 
	0xC4, 0x89, 0x17, 0xEB, 0x18, 0x81, 0xE2, 0xFF, 0xFF, 0x00, 
	0x00, 0x89, 0x17, 0xEB, 0x0E, 0x81, 0xE2, 0xFF, 0x00, 0x00, 
	0x00, 0x89, 0x17, 0xEB, 0x04, 0x33, 0xD2, 0x89, 0x17, 0x83, 
	0xC7, 0x04, 0x33, 0xC0, 0x83, 0xE9, 0x01, 0x74, 0x0C, 0x33, 
	0xC0, 0x89, 0x07, 0x83, 0xC7, 0x04, 0x83, 0xE9, 0x01, 0x75, 
	0xF6, 0x83, 0xE3, 0x03, 0x0F, 0x85, 0x77, 0xFF, 0xFF, 0xFF, 
	0x8B, 0x44, 0x24, 0x10, 0x5B, 0x5E, 0x5F, 0xC3, 0x56, 0x8B, 
	0x74, 0x24, 0x08, 0x85, 0xF6, 0x74, 0x2D, 0x83, 0x3D, 0x48, 
	0xB9, 0x00, 0x01, 0x03, 0x56, 0x75, 0x15, 0xE8, 0xA6, 0x04, 
	0x00, 0x00, 0x85, 0xC0, 0x59, 0x56, 0x74, 0x0A, 0x50, 0xE8, 
	0xC5, 0x04, 0x00, 0x00, 0x59, 0x59, 0x5E, 0xC3, 0x6A, 0x00, 
	0xFF, 0x35, 0x44, 0xB9, 0x00, 0x01, 0xFF, 0x15, 0xE4, 0x10, 
	0x00, 0x01, 0x5E, 0xC3, 0x53, 0x56, 0x57, 0x8B, 0xD9, 0x33, 
	0xF6, 0x53, 0xE8, 0x10, 0x13, 0x00, 0x00, 0x8B, 0xF8, 0x85, 
	0xFF, 0x59, 0x75, 0x1E, 0x56, 0xFF, 0x15, 0x84, 0x10, 0x00, 
	0x01, 0x8D, 0x86, 0xE8, 0x03, 0x00, 0x00, 0x3D, 0x60, 0xEA, 
	0x00, 0x00, 0x76, 0x03, 0x83, 0xC8, 0xFF, 0x83, 0xF8, 0xFF, 
	0x8B, 0xF0, 0x75, 0xD5, 0x8B, 0xC7, 0x5F, 0x5E, 0x5B, 0xC3, 
	0x53, 0x55, 0x56, 0x57, 0x8B, 0xDA, 0x8B, 0xE9, 0x33, 0xF6, 
	0x53, 0x55, 0xE8, 0x4B, 0x13, 0x00, 0x00, 0x8B, 0xF8, 0x85, 
	0xFF, 0x59, 0x59, 0x75, 0x1E, 0x56, 0xFF, 0x15, 0x84, 0x10, 
	0x00, 0x01, 0x8D, 0x86, 0xE8, 0x03, 0x00, 0x00, 0x3D, 0x60, 
	0xEA, 0x00, 0x00, 0x76, 0x03, 0x83, 0xC8, 0xFF, 0x83, 0xF8, 
	0xFF, 0x8B, 0xF0, 0x75, 0xD3, 0x8B, 0xC7, 0x5F, 0x5E, 0x5D, 
	0x5B, 0xC3, 0x2D, 0xA4, 0x03, 0x00, 0x00, 0x74, 0x22, 0x83, 
	0xE8, 0x04, 0x74, 0x17, 0x83, 0xE8, 0x0D, 0x74, 0x0C, 0x48, 
	0x74, 0x03, 0x33, 0xC0, 0xC3, 0xB8, 0x04, 0x04, 0x00, 0x00, 
	0xC3, 0xB8, 0x12, 0x04, 0x00, 0x00, 0xC3, 0xB8, 0x04, 0x08, 
	0x00, 0x00, 0xC3, 0xB8, 0x11, 0x04, 0x00, 0x00, 0xC3, 0x57, 
	0x6A, 0x40, 0x33, 0xC0, 0x59, 0xBF, 0x00, 0xA7, 0x00, 0x01, 
	0xF3, 0xAB, 0xAA, 0x33, 0xC0, 0xA3, 0x04, 0xA8, 0x00, 0x01, 
	0xA3, 0xE0, 0xA6, 0x00, 0x01, 0xA3, 0xDC, 0xA6, 0x00, 0x01, 
	0xBF, 0x10, 0xA8, 0x00, 0x01, 0xAB, 0xAB, 0xAB, 0x5F, 0xC3, 
	0x55, 0x8B, 0xEC, 0x81, 0xEC, 0x14, 0x05, 0x00, 0x00, 0x56, 
	0x8D, 0x45, 0xEC, 0x50, 0xFF, 0x35, 0x04, 0xA8, 0x00, 0x01, 
	0xFF, 0x15, 0x90, 0x10, 0x00, 0x01, 0x83, 0xF8, 0x01, 0xBE, 
	0x00, 0x01, 0x00, 0x00, 0x0F, 0x85, 0x0D, 0x01, 0x00, 0x00, 
	0x33, 0xC0, 0x88, 0x84, 0x05, 0xEC, 0xFE, 0xFF, 0xFF, 0x40, 
	0x3B, 0xC6, 0x72, 0xF4, 0x8A, 0x45, 0xF2, 0x84, 0xC0, 0xC6, 
	0x85, 0xEC, 0xFE, 0xFF, 0xFF, 0x20, 0x74, 0x36, 0x53, 0x8D, 
	0x55, 0xF3, 0x57, 0x0F, 0xB6, 0x0A, 0x0F, 0xB6, 0xC0, 0x3B, 
	0xC1, 0x77, 0x1D, 0x2B, 0xC8, 0x41, 0x8B, 0xD9, 0xC1, 0xE9, 
	0x02, 0x8D, 0xBC, 0x05, 0xEC, 0xFE, 0xFF, 0xFF, 0xB8, 0x20, 
	0x20, 0x20, 0x20, 0xF3, 0xAB, 0x8B, 0xCB, 0x83, 0xE1, 0x03, 
	0xF3, 0xAA, 0x42, 0x8A, 0x02, 0x42, 0x84, 0xC0, 0x75, 0xD1, 
	0x5F, 0x5B, 0x6A, 0x00, 0xFF, 0x35, 0xDC, 0xA6, 0x00, 0x01, 
	0x8D, 0x85, 0xEC, 0xFA, 0xFF, 0xFF, 0xFF, 0x35, 0x04, 0xA8, 
	0x00, 0x01, 0x50, 0x56, 0x8D, 0x85, 0xEC, 0xFE, 0xFF, 0xFF, 
	0x50, 0x6A, 0x01, 0xE8, 0x70, 0x16, 0x00, 0x00, 0x6A, 0x00, 
	0xFF, 0x35, 0x04, 0xA8, 0x00, 0x01, 0x8D, 0x85, 0xEC, 0xFD, 
	0xFF, 0xFF, 0x56, 0x50, 0x56, 0x8D, 0x85, 0xEC, 0xFE, 0xFF, 
	0xFF, 0x50, 0x56, 0xFF, 0x35, 0xDC, 0xA6, 0x00, 0x01, 0xE8, 
	0x85, 0x12, 0x00, 0x00, 0x6A, 0x00, 0xFF, 0x35, 0x04, 0xA8, 
	0x00, 0x01, 0x8D, 0x85, 0xEC, 0xFC, 0xFF, 0xFF, 0x56, 0x50, 
	0x56, 0x8D, 0x85, 0xEC, 0xFE, 0xFF, 0xFF, 0x50, 0x68, 0x00, 
	0x02, 0x00, 0x00, 0xFF, 0x35, 0xDC, 0xA6, 0x00, 0x01, 0xE8, 
	0x5D, 0x12, 0x00, 0x00, 0x83, 0xC4, 0x5C, 0x33, 0xC0, 0x66, 
	0x8B, 0x8C, 0x45, 0xEC, 0xFA, 0xFF, 0xFF, 0xF6, 0xC1, 0x01, 
	0x74, 0x16, 0x80, 0x88, 0x01, 0xA7, 0x00, 0x01, 0x10, 0x8A, 
	0x8C, 0x05, 0xEC, 0xFD, 0xFF, 0xFF, 0x88, 0x88, 0x20, 0xA8, 
	0x00, 0x01, 0xEB, 0x1C, 0xF6, 0xC1, 0x02, 0x74, 0x10, 0x80, 
	0x88, 0x01, 0xA7, 0x00, 0x01, 0x20, 0x8A, 0x8C, 0x05, 0xEC, 
	0xFC, 0xFF, 0xFF, 0xEB, 0xE3, 0xC6, 0x80, 0x20, 0xA8, 0x00, 
	0x01, 0x00, 0x40, 0x3B, 0xC6, 0x72, 0xBC, 0xEB, 0x44, 0x33, 
	0xC0, 0x83, 0xF8, 0x41, 0x72, 0x19, 0x83, 0xF8, 0x5A, 0x77, 
	0x14, 0x80, 0x88, 0x01, 0xA7, 0x00, 0x01, 0x10, 0x8A, 0xC8, 
	0x80, 0xC1, 0x20, 0x88, 0x88, 0x20, 0xA8, 0x00, 0x01, 0xEB, 
	0x1F, 0x83, 0xF8, 0x61, 0x72, 0x13, 0x83, 0xF8, 0x7A, 0x77, 
	0x0E, 0x80, 0x88, 0x01, 0xA7, 0x00, 0x01, 0x20, 0x8A, 0xC8, 
	0x80, 0xE9, 0x20, 0xEB, 0xE0, 0xC6, 0x80, 0x20, 0xA8, 0x00, 
	0x01, 0x00, 0x40, 0x3B, 0xC6, 0x72, 0xBE, 0x5E, 0xC9, 0xC3, 
	0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x18, 0x53, 0x56, 0x8B, 0x75, 
	0x08, 0x33, 0xDB, 0x83, 0xFE, 0xFE, 0x57, 0x89, 0x1D, 0x7C, 
	0x9E, 0x00, 0x01, 0x75, 0x12, 0xC7, 0x05, 0x7C, 0x9E, 0x00, 
	0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x15, 0xF0, 0x10, 0x00, 
	0x01, 0xEB, 0x2B, 0x83, 0xFE, 0xFD, 0x75, 0x12, 0xC7, 0x05, 
	0x7C, 0x9E, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x15, 
	0x88, 0x10, 0x00, 0x01, 0xEB, 0x14, 0x83, 0xFE, 0xFC, 0x75, 
	0x14, 0xA1, 0x98, 0x9E, 0x00, 0x01, 0xC7, 0x05, 0x7C, 0x9E, 
	0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x89, 0x45, 0x08, 0x8B, 
	0xF0, 0x3B, 0x35, 0x04, 0xA8, 0x00, 0x01, 0x0F, 0x84, 0x63, 
	0x01, 0x00, 0x00, 0x3B, 0xF3, 0x0F, 0x84, 0x51, 0x01, 0x00, 
	0x00, 0x33, 0xD2, 0x33, 0xC0, 0x39, 0xB0, 0xD8, 0x93, 0x00, 
	0x01, 0x74, 0x67, 0x83, 0xC0, 0x30, 0x42, 0x3D, 0xF0, 0x00, 
	0x00, 0x00, 0x72, 0xED, 0x8D, 0x45, 0xE8, 0x50, 0x56, 0xFF, 
	0x15, 0x90, 0x10, 0x00, 0x01, 0x83, 0xF8, 0x01, 0x0F, 0x85, 
	0x1E, 0x01, 0x00, 0x00, 0x6A, 0x40, 0x33, 0xC0, 0x59, 0xBF, 
	0x00, 0xA7, 0x00, 0x01, 0xF3, 0xAB, 0xAA, 0x33, 0xFF, 0x47, 
	0x39, 0x7D, 0xE8, 0x89, 0x35, 0x04, 0xA8, 0x00, 0x01, 0x89, 
	0x1D, 0xDC, 0xA6, 0x00, 0x01, 0x0F, 0x86, 0xE7, 0x00, 0x00, 
	0x00, 0x80, 0x7D, 0xEE, 0x00, 0x0F, 0x84, 0xB8, 0x00, 0x00, 
	0x00, 0x8D, 0x4D, 0xEF, 0x8A, 0x11, 0x84, 0xD2, 0x0F, 0x84, 
	0xAB, 0x00, 0x00, 0x00, 0x0F, 0xB6, 0x41, 0xFF, 0x0F, 0xB6, 
	0xD2, 0xE9, 0x8F, 0x00, 0x00, 0x00, 0x6A, 0x40, 0x33, 0xC0, 
	0x59, 0xBF, 0x00, 0xA7, 0x00, 0x01, 0xF3, 0xAB, 0x8D, 0x0C, 
	0x52, 0xC1, 0xE1, 0x04, 0x89, 0x5D, 0xFC, 0xAA, 0x8D, 0x99, 
	0xE8, 0x93, 0x00, 0x01, 0x8A, 0x03, 0x8B, 0xF3, 0xEB, 0x29, 
	0x8A, 0x56, 0x01, 0x84, 0xD2, 0x74, 0x26, 0x0F, 0xB6, 0xC0, 
	0x0F, 0xB6, 0xFA, 0x3B, 0xC7, 0x77, 0x14, 0x8B, 0x55, 0xFC, 
	0x8A, 0x92, 0xD0, 0x93, 0x00, 0x01, 0x08, 0x90, 0x01, 0xA7, 
	0x00, 0x01, 0x40, 0x3B, 0xC7, 0x76, 0xF5, 0x46, 0x46, 0x8A, 
	0x06, 0x84, 0xC0, 0x75, 0xD3, 0xFF, 0x45, 0xFC, 0x83, 0xC3, 
	0x08, 0x83, 0x7D, 0xFC, 0x04, 0x72, 0xC1, 0x8B, 0x45, 0x08, 
	0xA3, 0x04, 0xA8, 0x00, 0x01, 0xC7, 0x05, 0xE0, 0xA6, 0x00, 
	0x01, 0x01, 0x00, 0x00, 0x00, 0xE8, 0xD8, 0xFC, 0xFF, 0xFF, 
	0x8D, 0xB1, 0xDC, 0x93, 0x00, 0x01, 0xBF, 0x10, 0xA8, 0x00, 
	0x01, 0xA5, 0xA5, 0xA3, 0xDC, 0xA6, 0x00, 0x01, 0xA5, 0xEB, 
	0x5C, 0x80, 0x88, 0x01, 0xA7, 0x00, 0x01, 0x04, 0x40, 0x3B, 
	0xC2, 0x76, 0xF4, 0x41, 0x41, 0x80, 0x79, 0xFF, 0x00, 0x0F, 
	0x85, 0x4B, 0xFF, 0xFF, 0xFF, 0x8B, 0xC7, 0x80, 0x88, 0x01, 
	0xA7, 0x00, 0x01, 0x08, 0x40, 0x3D, 0xFF, 0x00, 0x00, 0x00, 
	0x72, 0xF1, 0x8B, 0xC6, 0xE8, 0x93, 0xFC, 0xFF, 0xFF, 0xA3, 
	0xDC, 0xA6, 0x00, 0x01, 0x89, 0x3D, 0xE0, 0xA6, 0x00, 0x01, 
	0xEB, 0x06, 0x89, 0x1D, 0xE0, 0xA6, 0x00, 0x01, 0x33, 0xC0, 
	0xBF, 0x10, 0xA8, 0x00, 0x01, 0xAB, 0xAB, 0xAB, 0xEB, 0x0D, 
	0x39, 0x1D, 0x7C, 0x9E, 0x00, 0x01, 0x74, 0x0E, 0xE8, 0x96, 
	0xFC, 0xFF, 0xFF, 0xE8, 0xBA, 0xFC, 0xFF, 0xFF, 0x33, 0xC0, 
	0xEB, 0x03, 0x83, 0xC8, 0xFF, 0x5F, 0x5E, 0x5B, 0xC9, 0xC3, 
	0x83, 0x3D, 0x6C, 0xBA, 0x00, 0x01, 0x00, 0x75, 0x12, 0x6A, 
	0xFD, 0xE8, 0x1A, 0xFE, 0xFF, 0xFF, 0x59, 0xC7, 0x05, 0x6C, 
	0xBA, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x33, 0xC0, 0xC3, 
	0x68, 0x40, 0x01, 0x00, 0x00, 0x6A, 0x00, 0xFF, 0x35, 0x44, 
	0xB9, 0x00, 0x01, 0xFF, 0x15, 0xD8, 0x10, 0x00, 0x01, 0x85, 
	0xC0, 0xA3, 0xC8, 0xA6, 0x00, 0x01, 0x75, 0x01, 0xC3, 0x8B, 
	0x4C, 0x24, 0x04, 0x83, 0x25, 0xC0, 0xA6, 0x00, 0x01, 0x00, 
	0x83, 0x25, 0xC4, 0xA6, 0x00, 0x01, 0x00, 0xA3, 0xD0, 0xA6, 
	0x00, 0x01, 0x33, 0xC0, 0x89, 0x0D, 0xCC, 0xA6, 0x00, 0x01, 
	0xC7, 0x05, 0xD4, 0xA6, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 
	0x40, 0xC3, 0xA1, 0xC4, 0xA6, 0x00, 0x01, 0x8D, 0x0C, 0x80, 
	0xA1, 0xC8, 0xA6, 0x00, 0x01, 0x8D, 0x0C, 0x88, 0xEB, 0x12, 
	0x8B, 0x54, 0x24, 0x04, 0x2B, 0x50, 0x0C, 0x81, 0xFA, 0x00, 
	0x00, 0x10, 0x00, 0x72, 0x09, 0x83, 0xC0, 0x14, 0x3B, 0xC1, 
	0x72, 0xEA, 0x33, 0xC0, 0xC3, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 
	0x10, 0x8B, 0x4D, 0x08, 0x8B, 0x41, 0x10, 0x56, 0x8B, 0x75, 
	0x0C, 0x57, 0x8B, 0xFE, 0x2B, 0x79, 0x0C, 0x83, 0xC6, 0xFC, 
	0xC1, 0xEF, 0x0F, 0x8B, 0xCF, 0x69, 0xC9, 0x04, 0x02, 0x00, 
	0x00, 0x8D, 0x8C, 0x01, 0x44, 0x01, 0x00, 0x00, 0x89, 0x4D, 
	0xF0, 0x8B, 0x0E, 0x49, 0xF6, 0xC1, 0x01, 0x89, 0x4D, 0xFC, 
	0x0F, 0x85, 0xD7, 0x02, 0x00, 0x00, 0x53, 0x8D, 0x1C, 0x31, 
	0x8B, 0x13, 0x89, 0x55, 0xF4, 0x8B, 0x56, 0xFC, 0x89, 0x55, 
	0xF8, 0x8B, 0x55, 0xF4, 0xF6, 0xC2, 0x01, 0x89, 0x5D, 0x0C, 
	0x75, 0x74, 0xC1, 0xFA, 0x04, 0x4A, 0x83, 0xFA, 0x3F, 0x76, 
	0x03, 0x6A, 0x3F, 0x5A, 0x8B, 0x4B, 0x04, 0x3B, 0x4B, 0x08, 
	0x75, 0x42, 0x83, 0xFA, 0x20, 0xBB, 0x00, 0x00, 0x00, 0x80, 
	0x73, 0x19, 0x8B, 0xCA, 0xD3, 0xEB, 0x8D, 0x4C, 0x02, 0x04, 
	0xF7, 0xD3, 0x21, 0x5C, 0xB8, 0x44, 0xFE, 0x09, 0x75, 0x23, 
	0x8B, 0x4D, 0x08, 0x21, 0x19, 0xEB, 0x1C, 0x8D, 0x4A, 0xE0, 
	0xD3, 0xEB, 0x8D, 0x4C, 0x02, 0x04, 0xF7, 0xD3, 0x21, 0x9C, 
	0xB8, 0xC4, 0x00, 0x00, 0x00, 0xFE, 0x09, 0x75, 0x06, 0x8B, 
	0x4D, 0x08, 0x21, 0x59, 0x04, 0x8B, 0x5D, 0x0C, 0x8B, 0x53, 
	0x08, 0x8B, 0x5B, 0x04, 0x8B, 0x4D, 0xFC, 0x03, 0x4D, 0xF4, 
	0x89, 0x5A, 0x04, 0x8B, 0x55, 0x0C, 0x8B, 0x5A, 0x04, 0x8B, 
	0x52, 0x08, 0x89, 0x53, 0x08, 0x89, 0x4D, 0xFC, 0x8B, 0xD1, 
	0xC1, 0xFA, 0x04, 0x4A, 0x83, 0xFA, 0x3F, 0x76, 0x03, 0x6A, 
	0x3F, 0x5A, 0x8B, 0x5D, 0xF8, 0x83, 0xE3, 0x01, 0x89, 0x5D, 
	0xF4, 0x0F, 0x85, 0x8F, 0x00, 0x00, 0x00, 0x2B, 0x75, 0xF8, 
	0x8B, 0x5D, 0xF8, 0xC1, 0xFB, 0x04, 0x6A, 0x3F, 0x89, 0x75, 
	0x0C, 0x4B, 0x5E, 0x3B, 0xDE, 0x76, 0x02, 0x8B, 0xDE, 0x03, 
	0x4D, 0xF8, 0x8B, 0xD1, 0xC1, 0xFA, 0x04, 0x4A, 0x3B, 0xD6, 
	0x89, 0x4D, 0xFC, 0x76, 0x02, 0x8B, 0xD6, 0x3B, 0xDA, 0x74, 
	0x5E, 0x8B, 0x4D, 0x0C, 0x8B, 0x71, 0x04, 0x3B, 0x71, 0x08, 
	0x75, 0x3B, 0x83, 0xFB, 0x20, 0xBE, 0x00, 0x00, 0x00, 0x80, 
	0x73, 0x17, 0x8B, 0xCB, 0xD3, 0xEE, 0xF7, 0xD6, 0x21, 0x74, 
	0xB8, 0x44, 0xFE, 0x4C, 0x03, 0x04, 0x75, 0x21, 0x8B, 0x4D, 
	0x08, 0x21, 0x31, 0xEB, 0x1A, 0x8D, 0x4B, 0xE0, 0xD3, 0xEE, 
	0xF7, 0xD6, 0x21, 0xB4, 0xB8, 0xC4, 0x00, 0x00, 0x00, 0xFE, 
	0x4C, 0x03, 0x04, 0x75, 0x06, 0x8B, 0x4D, 0x08, 0x21, 0x71, 
	0x04, 0x8B, 0x4D, 0x0C, 0x8B, 0x71, 0x08, 0x8B, 0x49, 0x04, 
	0x89, 0x4E, 0x04, 0x8B, 0x4D, 0x0C, 0x8B, 0x71, 0x04, 0x8B, 
	0x49, 0x08, 0x89, 0x4E, 0x08, 0x8B, 0x75, 0x0C, 0xEB, 0x03, 
	0x8B, 0x5D, 0x08, 0x83, 0x7D, 0xF4, 0x00, 0x75, 0x08, 0x3B, 
	0xDA, 0x0F, 0x84, 0x80, 0x00, 0x00, 0x00, 0x8B, 0x4D, 0xF0, 
	0x8D, 0x0C, 0xD1, 0x8B, 0x59, 0x04, 0x89, 0x4E, 0x08, 0x89, 
	0x5E, 0x04, 0x89, 0x71, 0x04, 0x8B, 0x4E, 0x04, 0x89, 0x71, 
	0x08, 0x8B, 0x4E, 0x04, 0x3B, 0x4E, 0x08, 0x75, 0x60, 0x8A, 
	0x4C, 0x02, 0x04, 0x88, 0x4D, 0x0F, 0xFE, 0xC1, 0x83, 0xFA, 
	0x20, 0x88, 0x4C, 0x02, 0x04, 0x73, 0x25, 0x80, 0x7D, 0x0F, 
	0x00, 0x75, 0x0E, 0x8B, 0xCA, 0xBB, 0x00, 0x00, 0x00, 0x80, 
	0xD3, 0xEB, 0x8B, 0x4D, 0x08, 0x09, 0x19, 0xBB, 0x00, 0x00, 
	0x00, 0x80, 0x8B, 0xCA, 0xD3, 0xEB, 0x8D, 0x44, 0xB8, 0x44, 
	0x09, 0x18, 0xEB, 0x29, 0x80, 0x7D, 0x0F, 0x00, 0x75, 0x10, 
	0x8D, 0x4A, 0xE0, 0xBB, 0x00, 0x00, 0x00, 0x80, 0xD3, 0xEB, 
	0x8B, 0x4D, 0x08, 0x09, 0x59, 0x04, 0x8D, 0x4A, 0xE0, 0xBA, 
	0x00, 0x00, 0x00, 0x80, 0xD3, 0xEA, 0x8D, 0x84, 0xB8, 0xC4, 
	0x00, 0x00, 0x00, 0x09, 0x10, 0x8B, 0x45, 0xFC, 0x89, 0x06, 
	0x89, 0x44, 0x30, 0xFC, 0x8B, 0x45, 0xF0, 0xFF, 0x08, 0x0F, 
	0x85, 0xF7, 0x00, 0x00, 0x00, 0xA1, 0xC0, 0xA6, 0x00, 0x01, 
	0x85, 0xC0, 0x0F, 0x84, 0xDC, 0x00, 0x00, 0x00, 0x8B, 0x0D, 
	0xD8, 0xA6, 0x00, 0x01, 0x8B, 0x35, 0x74, 0x10, 0x00, 0x01, 
	0x68, 0x00, 0x40, 0x00, 0x00, 0xC1, 0xE1, 0x0F, 0x03, 0x48, 
	0x0C, 0xBB, 0x00, 0x80, 0x00, 0x00, 0x53, 0x51, 0xFF, 0xD6, 
	0x8B, 0x0D, 0xD8, 0xA6, 0x00, 0x01, 0xA1, 0xC0, 0xA6, 0x00, 
	0x01, 0xBA, 0x00, 0x00, 0x00, 0x80, 0xD3, 0xEA, 0x09, 0x50, 
	0x08, 0xA1, 0xC0, 0xA6, 0x00, 0x01, 0x8B, 0x40, 0x10, 0x8B, 
	0x0D, 0xD8, 0xA6, 0x00, 0x01, 0x83, 0xA4, 0x88, 0xC4, 0x00, 
	0x00, 0x00, 0x00, 0xA1, 0xC0, 0xA6, 0x00, 0x01, 0x8B, 0x40, 
	0x10, 0xFE, 0x48, 0x43, 0xA1, 0xC0, 0xA6, 0x00, 0x01, 0x8B, 
	0x48, 0x10, 0x80, 0x79, 0x43, 0x00, 0x75, 0x09, 0x83, 0x60, 
	0x04, 0xFE, 0xA1, 0xC0, 0xA6, 0x00, 0x01, 0x83, 0x78, 0x08, 
	0xFF, 0x75, 0x69, 0x53, 0x6A, 0x00, 0xFF, 0x70, 0x0C, 0xFF, 
	0xD6, 0xA1, 0xC0, 0xA6, 0x00, 0x01, 0xFF, 0x70, 0x10, 0x6A, 
	0x00, 0xFF, 0x35, 0x44, 0xB9, 0x00, 0x01, 0xFF, 0x15, 0xE4, 
	0x10, 0x00, 0x01, 0xA1, 0xC4, 0xA6, 0x00, 0x01, 0x8B, 0x15, 
	0xC8, 0xA6, 0x00, 0x01, 0x8D, 0x04, 0x80, 0xC1, 0xE0, 0x02, 
	0x8B, 0xC8, 0xA1, 0xC0, 0xA6, 0x00, 0x01, 0x2B, 0xC8, 0x8D, 
	0x4C, 0x11, 0xEC, 0x51, 0x8D, 0x48, 0x14, 0x51, 0x50, 0xE8, 
	0x10, 0x12, 0x00, 0x00, 0x8B, 0x45, 0x08, 0x83, 0xC4, 0x0C, 
	0xFF, 0x0D, 0xC4, 0xA6, 0x00, 0x01, 0x3B, 0x05, 0xC0, 0xA6, 
	0x00, 0x01, 0x76, 0x04, 0x83, 0x6D, 0x08, 0x14, 0xA1, 0xC8, 
	0xA6, 0x00, 0x01, 0xA3, 0xD0, 0xA6, 0x00, 0x01, 0x8B, 0x45, 
	0x08, 0xA3, 0xC0, 0xA6, 0x00, 0x01, 0x89, 0x3D, 0xD8, 0xA6, 
	0x00, 0x01, 0x5B, 0x5F, 0x5E, 0xC9, 0xC3, 0xA1, 0xC4, 0xA6, 
	0x00, 0x01, 0x8B, 0x0D, 0xD4, 0xA6, 0x00, 0x01, 0x57, 0x33, 
	0xFF, 0x3B, 0xC1, 0x75, 0x34, 0x8D, 0x44, 0x89, 0x50, 0xC1, 
	0xE0, 0x02, 0x50, 0xFF, 0x35, 0xC8, 0xA6, 0x00, 0x01, 0x57, 
	0xFF, 0x35, 0x44, 0xB9, 0x00, 0x01, 0xFF, 0x15, 0xDC, 0x10, 
	0x00, 0x01, 0x3B, 0xC7, 0x75, 0x04, 0x33, 0xC0, 0x5F, 0xC3, 
	0x83, 0x05, 0xD4, 0xA6, 0x00, 0x01, 0x10, 0xA3, 0xC8, 0xA6, 
	0x00, 0x01, 0xA1, 0xC4, 0xA6, 0x00, 0x01, 0x8B, 0x0D, 0xC8, 
	0xA6, 0x00, 0x01, 0x56, 0x68, 0xC4, 0x41, 0x00, 0x00, 0x6A, 
	0x08, 0xFF, 0x35, 0x44, 0xB9, 0x00, 0x01, 0x8D, 0x04, 0x80, 
	0x8D, 0x34, 0x81, 0xFF, 0x15, 0xD8, 0x10, 0x00, 0x01, 0x3B, 
	0xC7, 0x89, 0x46, 0x10, 0x75, 0x04, 0x33, 0xC0, 0xEB, 0x43, 
	0x6A, 0x04, 0x68, 0x00, 0x20, 0x00, 0x00, 0x68, 0x00, 0x00, 
	0x10, 0x00, 0x57, 0xFF, 0x15, 0x94, 0x10, 0x00, 0x01, 0x3B, 
	0xC7, 0x89, 0x46, 0x0C, 0x75, 0x12, 0xFF, 0x76, 0x10, 0x57, 
	0xFF, 0x35, 0x44, 0xB9, 0x00, 0x01, 0xFF, 0x15, 0xE4, 0x10, 
	0x00, 0x01, 0xEB, 0xD0, 0x83, 0x4E, 0x08, 0xFF, 0x89, 0x3E, 
	0x89, 0x7E, 0x04, 0xFF, 0x05, 0xC4, 0xA6, 0x00, 0x01, 0x8B, 
	0x46, 0x10, 0x83, 0x08, 0xFF, 0x8B, 0xC6, 0x5E, 0x5F, 0xC3, 
	0x55, 0x8B, 0xEC, 0x51, 0x51, 0x8B, 0x4D, 0x08, 0x8B, 0x41, 
	0x08, 0x53, 0x56, 0x8B, 0x71, 0x10, 0x57, 0x33, 0xDB, 0xEB, 
	0x03, 0xD1, 0xE0, 0x43, 0x85, 0xC0, 0x7D, 0xF9, 0x8B, 0xC3, 
	0x69, 0xC0, 0x04, 0x02, 0x00, 0x00, 0x8D, 0x84, 0x30, 0x44, 
	0x01, 0x00, 0x00, 0x6A, 0x3F, 0x89, 0x45, 0xF8, 0x5A, 0x89, 
	0x40, 0x08, 0x89, 0x40, 0x04, 0x83, 0xC0, 0x08, 0x4A, 0x75, 
	0xF4, 0x6A, 0x04, 0x8B, 0xFB, 0x68, 0x00, 0x10, 0x00, 0x00, 
	0xC1, 0xE7, 0x0F, 0x03, 0x79, 0x0C, 0x68, 0x00, 0x80, 0x00, 
	0x00, 0x57, 0xFF, 0x15, 0x94, 0x10, 0x00, 0x01, 0x85, 0xC0, 
	0x75, 0x08, 0x83, 0xC8, 0xFF, 0xE9, 0x9D, 0x00, 0x00, 0x00, 
	0x8D, 0x97, 0x00, 0x70, 0x00, 0x00, 0x3B, 0xFA, 0x89, 0x55, 
	0xFC, 0x77, 0x43, 0x8B, 0xCA, 0x2B, 0xCF, 0xC1, 0xE9, 0x0C, 
	0x8D, 0x47, 0x10, 0x41, 0x83, 0x48, 0xF8, 0xFF, 0x83, 0x88, 
	0xEC, 0x0F, 0x00, 0x00, 0xFF, 0x8D, 0x90, 0xFC, 0x0F, 0x00, 
	0x00, 0x89, 0x10, 0x8D, 0x90, 0xFC, 0xEF, 0xFF, 0xFF, 0xC7, 
	0x40, 0xFC, 0xF0, 0x0F, 0x00, 0x00, 0x89, 0x50, 0x04, 0xC7, 
	0x80, 0xE8, 0x0F, 0x00, 0x00, 0xF0, 0x0F, 0x00, 0x00, 0x05, 
	0x00, 0x10, 0x00, 0x00, 0x49, 0x75, 0xCB, 0x8B, 0x55, 0xFC, 
	0x8B, 0x45, 0xF8, 0x05, 0xF8, 0x01, 0x00, 0x00, 0x8D, 0x4F, 
	0x0C, 0x89, 0x48, 0x04, 0x89, 0x41, 0x08, 0x8D, 0x4A, 0x0C, 
	0x89, 0x48, 0x08, 0x89, 0x41, 0x04, 0x83, 0x64, 0x9E, 0x44, 
	0x00, 0x33, 0xFF, 0x47, 0x89, 0xBC, 0x9E, 0xC4, 0x00, 0x00, 
	0x00, 0x8A, 0x46, 0x43, 0x8A, 0xC8, 0xFE, 0xC1, 0x84, 0xC0, 
	0x8B, 0x45, 0x08, 0x88, 0x4E, 0x43, 0x75, 0x03, 0x09, 0x78, 
	0x04, 0xBA, 0x00, 0x00, 0x00, 0x80, 0x8B, 0xCB, 0xD3, 0xEA, 
	0xF7, 0xD2, 0x21, 0x50, 0x08, 0x8B, 0xC3, 0x5F, 0x5E, 0x5B, 
	0xC9, 0xC3, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x14, 0x8B, 0x4D, 
	0x08, 0xA1, 0xC4, 0xA6, 0x00, 0x01, 0x8B, 0x15, 0xC8, 0xA6, 
	0x00, 0x01, 0x83, 0xC1, 0x17, 0x83, 0xE1, 0xF0, 0x53, 0x89, 
	0x4D, 0xF0, 0xC1, 0xF9, 0x04, 0x56, 0x8D, 0x04, 0x80, 0x57, 
	0x49, 0x83, 0xF9, 0x20, 0x8D, 0x3C, 0x82, 0x89, 0x7D, 0xFC, 
	0x7D, 0x0B, 0x83, 0xCE, 0xFF, 0xD3, 0xEE, 0x83, 0x4D, 0xF8, 
	0xFF, 0xEB, 0x0D, 0x83, 0xC1, 0xE0, 0x83, 0xC8, 0xFF, 0x33, 
	0xF6, 0xD3, 0xE8, 0x89, 0x45, 0xF8, 0xA1, 0xD0, 0xA6, 0x00, 
	0x01, 0x8B, 0xD8, 0x89, 0x75, 0xF4, 0x3B, 0xDF, 0xEB, 0x14, 
	0x8B, 0x4B, 0x04, 0x8B, 0x3B, 0x23, 0x4D, 0xF8, 0x23, 0xFE, 
	0x0B, 0xCF, 0x75, 0x0B, 0x83, 0xC3, 0x14, 0x3B, 0x5D, 0xFC, 
	0x89, 0x5D, 0x08, 0x72, 0xE7, 0x3B, 0x5D, 0xFC, 0x75, 0x24, 
	0x8B, 0xDA, 0xEB, 0x11, 0x8B, 0x4B, 0x04, 0x8B, 0x3B, 0x23, 
	0x4D, 0xF8, 0x23, 0xFE, 0x0B, 0xCF, 0x75, 0x0A, 0x83, 0xC3, 
	0x14, 0x3B, 0xD8, 0x89, 0x5D, 0x08, 0x72, 0xE8, 0x3B, 0xD8, 
	0x0F, 0x84, 0x94, 0x00, 0x00, 0x00, 0x89, 0x1D, 0xD0, 0xA6, 
	0x00, 0x01, 0x8B, 0x43, 0x10, 0x8B, 0x10, 0x83, 0xFA, 0xFF, 
	0x89, 0x55, 0xFC, 0x74, 0x14, 0x8B, 0x8C, 0x90, 0xC4, 0x00, 
	0x00, 0x00, 0x8B, 0x7C, 0x90, 0x44, 0x23, 0x4D, 0xF8, 0x23, 
	0xFE, 0x0B, 0xCF, 0x75, 0x36, 0x8B, 0x90, 0xC4, 0x00, 0x00, 
	0x00, 0x23, 0x55, 0xF8, 0x83, 0x65, 0xFC, 0x00, 0x8D, 0x48, 
	0x44, 0x8B, 0x31, 0x23, 0x75, 0xF4, 0x0B, 0xD6, 0x8B, 0x75, 
	0xF4, 0x75, 0x17, 0x8B, 0x91, 0x84, 0x00, 0x00, 0x00, 0x23, 
	0x55, 0xF8, 0xFF, 0x45, 0xFC, 0x83, 0xC1, 0x04, 0x8B, 0x39, 
	0x23, 0xFE, 0x0B, 0xD7, 0x74, 0xE9, 0x8B, 0x55, 0xFC, 0x8B, 
	0xCA, 0x69, 0xC9, 0x04, 0x02, 0x00, 0x00, 0x8D, 0x8C, 0x01, 
	0x44, 0x01, 0x00, 0x00, 0x89, 0x4D, 0xF4, 0x8B, 0x4C, 0x90, 
	0x44, 0x33, 0xFF, 0x23, 0xCE, 0x75, 0x6D, 0x8B, 0x8C, 0x90, 
	0xC4, 0x00, 0x00, 0x00, 0x23, 0x4D, 0xF8, 0x6A, 0x20, 0x5F, 
	0xEB, 0x5E, 0x83, 0x7B, 0x08, 0x00, 0x75, 0x0B, 0x83, 0xC3, 
	0x14, 0x89, 0x5D, 0x08, 0x3B, 0x5D, 0xFC, 0x72, 0xEF, 0x3B, 
	0x5D, 0xFC, 0x75, 0x26, 0x8B, 0xDA, 0xEB, 0x09, 0x83, 0x7B, 
	0x08, 0x00, 0x75, 0x0A, 0x83, 0xC3, 0x14, 0x3B, 0xD8, 0x89, 
	0x5D, 0x08, 0x72, 0xF0, 0x3B, 0xD8, 0x75, 0x0E, 0xE8, 0xEE, 
	0xFC, 0xFF, 0xFF, 0x8B, 0xD8, 0x85, 0xDB, 0x89, 0x5D, 0x08, 
	0x74, 0x18, 0x53, 0xE8, 0x96, 0xFD, 0xFF, 0xFF, 0x59, 0x8B, 
	0x4B, 0x10, 0x89, 0x01, 0x8B, 0x43, 0x10, 0x83, 0x38, 0xFF, 
	0x0F, 0x85, 0x24, 0xFF, 0xFF, 0xFF, 0x33, 0xC0, 0xE9, 0x7A, 
	0x01, 0x00, 0x00, 0xD1, 0xE1, 0x47, 0x85, 0xC9, 0x7D, 0xF9, 
	0x8B, 0x4D, 0xF4, 0x8B, 0x54, 0xF9, 0x04, 0x8B, 0x0A, 0x2B, 
	0x4D, 0xF0, 0x8B, 0xF1, 0xC1, 0xFE, 0x04, 0x4E, 0x83, 0xFE, 
	0x3F, 0x89, 0x4D, 0xF8, 0x7E, 0x03, 0x6A, 0x3F, 0x5E, 0x3B, 
	0xF7, 0x0F, 0x84, 0x01, 0x01, 0x00, 0x00, 0x8B, 0x4A, 0x04, 
	0x3B, 0x4A, 0x08, 0x75, 0x5C, 0x83, 0xFF, 0x20, 0xBB, 0x00, 
	0x00, 0x00, 0x80, 0x7D, 0x26, 0x8B, 0xCF, 0xD3, 0xEB, 0x8B, 
	0x4D, 0xFC, 0x8D, 0x7C, 0x38, 0x04, 0xF7, 0xD3, 0x89, 0x5D, 
	0xEC, 0x23, 0x5C, 0x88, 0x44, 0x89, 0x5C, 0x88, 0x44, 0xFE, 
	0x0F, 0x75, 0x33, 0x8B, 0x4D, 0xEC, 0x8B, 0x5D, 0x08, 0x21, 
	0x0B, 0xEB, 0x2C, 0x8D, 0x4F, 0xE0, 0xD3, 0xEB, 0x8B, 0x4D, 
	0xFC, 0x8D, 0x8C, 0x88, 0xC4, 0x00, 0x00, 0x00, 0x8D, 0x7C, 
	0x38, 0x04, 0xF7, 0xD3, 0x21, 0x19, 0xFE, 0x0F, 0x89, 0x5D, 
	0xEC, 0x75, 0x0B, 0x8B, 0x5D, 0x08, 0x8B, 0x4D, 0xEC, 0x21, 
	0x4B, 0x04, 0xEB, 0x03, 0x8B, 0x5D, 0x08, 0x83, 0x7D, 0xF8, 
	0x00, 0x8B, 0x4A, 0x08, 0x8B, 0x7A, 0x04, 0x89, 0x79, 0x04, 
	0x8B, 0x4A, 0x04, 0x8B, 0x7A, 0x08, 0x89, 0x79, 0x08, 0x0F, 
	0x84, 0x8D, 0x00, 0x00, 0x00, 0x8B, 0x4D, 0xF4, 0x8D, 0x0C, 
	0xF1, 0x8B, 0x79, 0x04, 0x89, 0x4A, 0x08, 0x89, 0x7A, 0x04, 
	0x89, 0x51, 0x04, 0x8B, 0x4A, 0x04, 0x89, 0x51, 0x08, 0x8B, 
	0x4A, 0x04, 0x3B, 0x4A, 0x08, 0x75, 0x5E, 0x8A, 0x4C, 0x06, 
	0x04, 0x88, 0x4D, 0x0B, 0xFE, 0xC1, 0x83, 0xFE, 0x20, 0x88, 
	0x4C, 0x06, 0x04, 0x7D, 0x23, 0x80, 0x7D, 0x0B, 0x00, 0x75, 
	0x0B, 0xBF, 0x00, 0x00, 0x00, 0x80, 0x8B, 0xCE, 0xD3, 0xEF, 
	0x09, 0x3B, 0x8B, 0xCE, 0xBF, 0x00, 0x00, 0x00, 0x80, 0xD3, 
	0xEF, 0x8B, 0x4D, 0xFC, 0x09, 0x7C, 0x88, 0x44, 0xEB, 0x29, 
	0x80, 0x7D, 0x0B, 0x00, 0x75, 0x0D, 0x8D, 0x4E, 0xE0, 0xBF, 
	0x00, 0x00, 0x00, 0x80, 0xD3, 0xEF, 0x09, 0x7B, 0x04, 0x8B, 
	0x4D, 0xFC, 0x8D, 0xBC, 0x88, 0xC4, 0x00, 0x00, 0x00, 0x8D, 
	0x4E, 0xE0, 0xBE, 0x00, 0x00, 0x00, 0x80, 0xD3, 0xEE, 0x09, 
	0x37, 0x8B, 0x4D, 0xF8, 0x85, 0xC9, 0x74, 0x0B, 0x89, 0x0A, 
	0x89, 0x4C, 0x11, 0xFC, 0xEB, 0x03, 0x8B, 0x4D, 0xF8, 0x8B, 
	0x75, 0xF0, 0x03, 0xD1, 0x8D, 0x4E, 0x01, 0x89, 0x0A, 0x89, 
	0x4C, 0x32, 0xFC, 0x8B, 0x75, 0xF4, 0x8B, 0x0E, 0x85, 0xC9, 
	0x8D, 0x79, 0x01, 0x89, 0x3E, 0x75, 0x1A, 0x3B, 0x1D, 0xC0, 
	0xA6, 0x00, 0x01, 0x75, 0x12, 0x8B, 0x4D, 0xFC, 0x3B, 0x0D, 
	0xD8, 0xA6, 0x00, 0x01, 0x75, 0x07, 0x83, 0x25, 0xC0, 0xA6, 
	0x00, 0x01, 0x00, 0x8B, 0x4D, 0xFC, 0x89, 0x08, 0x8D, 0x42, 
	0x04, 0x5F, 0x5E, 0x5B, 0xC9, 0xC3, 0x8B, 0x44, 0x24, 0x04, 
	0x3B, 0x05, 0x4C, 0xB9, 0x00, 0x01, 0x72, 0x03, 0x33, 0xC0, 
	0xC3, 0x8B, 0xC8, 0xC1, 0xF9, 0x05, 0x8B, 0x0C, 0x8D, 0x60, 
	0xB9, 0x00, 0x01, 0x83, 0xE0, 0x1F, 0x0F, 0xBE, 0x44, 0xC1, 
	0x04, 0x83, 0xE0, 0x40, 0xC3, 0x53, 0x56, 0x8B, 0x74, 0x24, 
	0x0C, 0x8B, 0x46, 0x0C, 0x8B, 0xC8, 0x80, 0xE1, 0x03, 0x33, 
	0xDB, 0x80, 0xF9, 0x02, 0x75, 0x3A, 0x66, 0xA9, 0x08, 0x01, 
	0x74, 0x34, 0x8B, 0x46, 0x08, 0x57, 0x8B, 0x3E, 0x2B, 0xF8, 
	0x85, 0xFF, 0x7E, 0x27, 0x57, 0x50, 0xFF, 0x76, 0x10, 0xE8, 
	0xC3, 0x02, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x3B, 0xC7, 0x75, 
	0x0F, 0x8B, 0x46, 0x0C, 0x84, 0xC0, 0x79, 0x0F, 0x83, 0xE0, 
	0xFD, 0x89, 0x46, 0x0C, 0xEB, 0x07, 0x83, 0x4E, 0x0C, 0x20, 
	0x83, 0xCB, 0xFF, 0x5F, 0x8B, 0x46, 0x08, 0x83, 0x66, 0x04, 
	0x00, 0x89, 0x06, 0x5E, 0x8B, 0xC3, 0x5B, 0xC3, 0x56, 0x8B, 
	0x74, 0x24, 0x08, 0x85, 0xF6, 0x75, 0x09, 0x56, 0xE8, 0x2C, 
	0x00, 0x00, 0x00, 0x59, 0x5E, 0xC3, 0x56, 0xE8, 0x8B, 0xFF, 
	0xFF, 0xFF, 0x85, 0xC0, 0x59, 0x74, 0x05, 0x83, 0xC8, 0xFF, 
	0x5E, 0xC3, 0xF6, 0x46, 0x0D, 0x40, 0x74, 0x0F, 0xFF, 0x76, 
	0x10, 0xE8, 0xAB, 0x0F, 0x00, 0x00, 0x59, 0xF7, 0xD8, 0x1B, 
	0xC0, 0x5E, 0xC3, 0x33, 0xC0, 0x5E, 0xC3, 0x53, 0x56, 0x57, 
	0x33, 0xF6, 0x33, 0xDB, 0x33, 0xFF, 0x39, 0x35, 0x40, 0xB9, 
	0x00, 0x01, 0x7E, 0x4D, 0xA1, 0x20, 0xA9, 0x00, 0x01, 0x8B, 
	0x04, 0xB0, 0x85, 0xC0, 0x74, 0x38, 0x8B, 0x48, 0x0C, 0xF6, 
	0xC1, 0x83, 0x74, 0x30, 0x83, 0x7C, 0x24, 0x10, 0x01, 0x75, 
	0x0F, 0x50, 0xE8, 0x93, 0xFF, 0xFF, 0xFF, 0x83, 0xF8, 0xFF, 
	0x59, 0x74, 0x1D, 0x43, 0xEB, 0x1A, 0x83, 0x7C, 0x24, 0x10, 
	0x00, 0x75, 0x13, 0xF6, 0xC1, 0x02, 0x74, 0x0E, 0x50, 0xE8, 
	0x78, 0xFF, 0xFF, 0xFF, 0x83, 0xF8, 0xFF, 0x59, 0x75, 0x02, 
	0x0B, 0xF8, 0x46, 0x3B, 0x35, 0x40, 0xB9, 0x00, 0x01, 0x7C, 
	0xB3, 0x83, 0x7C, 0x24, 0x10, 0x01, 0x8B, 0xC3, 0x74, 0x02, 
	0x8B, 0xC7, 0x5F, 0x5E, 0x5B, 0xC3, 0x6A, 0x01, 0xE8, 0x8C, 
	0xFF, 0xFF, 0xFF, 0x59, 0xC3, 0x55, 0x8B, 0xEC, 0x8B, 0x45, 
	0x08, 0x56, 0x33, 0xF6, 0x3B, 0xC6, 0x75, 0x04, 0x33, 0xC0, 
	0xEB, 0x52, 0x39, 0x35, 0x88, 0x9E, 0x00, 0x01, 0x75, 0x12, 
	0x66, 0x8B, 0x4D, 0x0C, 0x66, 0x81, 0xF9, 0xFF, 0x00, 0x77, 
	0x32, 0x88, 0x08, 0x33, 0xC0, 0x40, 0xEB, 0x38, 0x8D, 0x4D, 
	0x08, 0x51, 0x56, 0xFF, 0x35, 0xF0, 0x94, 0x00, 0x01, 0x89, 
	0x75, 0x08, 0x50, 0x6A, 0x01, 0x8D, 0x45, 0x0C, 0x50, 0x56, 
	0xFF, 0x35, 0x98, 0x9E, 0x00, 0x01, 0xFF, 0x15, 0x58, 0x10, 
	0x00, 0x01, 0x3B, 0xC6, 0x74, 0x05, 0x39, 0x75, 0x08, 0x74, 
	0x0D, 0xC7, 0x05, 0x90, 0x99, 0x00, 0x01, 0x2A, 0x00, 0x00, 
	0x00, 0x83, 0xC8, 0xFF, 0x5E, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 
	0xCC, 0xCC, 0xCC, 0xCC, 0x56, 0x8B, 0x44, 0x24, 0x14, 0x0B, 
	0xC0, 0x75, 0x28, 0x8B, 0x4C, 0x24, 0x10, 0x8B, 0x44, 0x24, 
	0x0C, 0x33, 0xD2, 0xF7, 0xF1, 0x8B, 0xD8, 0x8B, 0x44, 0x24, 
	0x08, 0xF7, 0xF1, 0x8B, 0xF0, 0x8B, 0xC3, 0xF7, 0x64, 0x24, 
	0x10, 0x8B, 0xC8, 0x8B, 0xC6, 0xF7, 0x64, 0x24, 0x10, 0x03, 
	0xD1, 0xEB, 0x47, 0x8B, 0xC8, 0x8B, 0x5C, 0x24, 0x10, 0x8B, 
	0x54, 0x24, 0x0C, 0x8B, 0x44, 0x24, 0x08, 0xD1, 0xE9, 0xD1, 
	0xDB, 0xD1, 0xEA, 0xD1, 0xD8, 0x0B, 0xC9, 0x75, 0xF4, 0xF7, 
	0xF3, 0x8B, 0xF0, 0xF7, 0x64, 0x24, 0x14, 0x8B, 0xC8, 0x8B, 
	0x44, 0x24, 0x10, 0xF7, 0xE6, 0x03, 0xD1, 0x72, 0x0E, 0x3B, 
	0x54, 0x24, 0x0C, 0x77, 0x08, 0x72, 0x0F, 0x3B, 0x44, 0x24, 
	0x08, 0x76, 0x09, 0x4E, 0x2B, 0x44, 0x24, 0x10, 0x1B, 0x54, 
	0x24, 0x14, 0x33, 0xDB, 0x2B, 0x44, 0x24, 0x08, 0x1B, 0x54, 
	0x24, 0x0C, 0xF7, 0xDA, 0xF7, 0xD8, 0x83, 0xDA, 0x00, 0x8B, 
	0xCA, 0x8B, 0xD3, 0x8B, 0xD9, 0x8B, 0xC8, 0x8B, 0xC6, 0x5E, 
	0xC2, 0x10, 0x00, 0x56, 0x57, 0x6A, 0x03, 0x5E, 0x33, 0xFF, 
	0x39, 0x35, 0x40, 0xB9, 0x00, 0x01, 0x7E, 0x44, 0xA1, 0x20, 
	0xA9, 0x00, 0x01, 0x8B, 0x04, 0xB0, 0x85, 0xC0, 0x74, 0x2F, 
	0xF6, 0x40, 0x0C, 0x83, 0x74, 0x0D, 0x50, 0xE8, 0x61, 0x0E, 
	0x00, 0x00, 0x83, 0xF8, 0xFF, 0x59, 0x74, 0x01, 0x47, 0x83, 
	0xFE, 0x14, 0x7C, 0x17, 0xA1, 0x20, 0xA9, 0x00, 0x01, 0xFF, 
	0x34, 0xB0, 0xE8, 0xCF, 0xF0, 0xFF, 0xFF, 0xA1, 0x20, 0xA9, 
	0x00, 0x01, 0x83, 0x24, 0xB0, 0x00, 0x59, 0x46, 0x3B, 0x35, 
	0x40, 0xB9, 0x00, 0x01, 0x7C, 0xBC, 0x8B, 0xC7, 0x5F, 0x5E, 
	0xC3, 0x8B, 0x44, 0x24, 0x04, 0x3B, 0x05, 0x4C, 0xB9, 0x00, 
	0x01, 0x53, 0x56, 0x57, 0x73, 0x65, 0x8B, 0xC8, 0xC1, 0xF9, 
	0x05, 0x8B, 0xF0, 0x83, 0xE6, 0x1F, 0x8D, 0x3C, 0x8D, 0x60, 
	0xB9, 0x00, 0x01, 0x8B, 0x0F, 0xC1, 0xE6, 0x03, 0xF6, 0x44, 
	0x31, 0x04, 0x01, 0x74, 0x48, 0x50, 0xE8, 0x2D, 0x0F, 0x00, 
	0x00, 0x83, 0xF8, 0xFF, 0x59, 0x74, 0x43, 0xFF, 0x74, 0x24, 
	0x18, 0x6A, 0x00, 0xFF, 0x74, 0x24, 0x1C, 0x50, 0xFF, 0x15, 
	0x98, 0x10, 0x00, 0x01, 0x8B, 0xD8, 0x83, 0xFB, 0xFF, 0x75, 
	0x08, 0xFF, 0x15, 0xE0, 0x10, 0x00, 0x01, 0xEB, 0x02, 0x33, 
	0xC0, 0x85, 0xC0, 0x74, 0x09, 0x50, 0xE8, 0x22, 0x0E, 0x00, 
	0x00, 0x59, 0xEB, 0x1E, 0x8B, 0x07, 0x8D, 0x44, 0x30, 0x04, 
	0x80, 0x20, 0xFD, 0x8B, 0xC3, 0xEB, 0x14, 0x83, 0x25, 0x94, 
	0x99, 0x00, 0x01, 0x00, 0xC7, 0x05, 0x90, 0x99, 0x00, 0x01, 
	0x09, 0x00, 0x00, 0x00, 0x83, 0xC8, 0xFF, 0x5F, 0x5E, 0x5B, 
	0xC3, 0x55, 0x8B, 0xEC, 0x81, 0xEC, 0x18, 0x04, 0x00, 0x00, 
	0x8B, 0x4D, 0x08, 0x3B, 0x0D, 0x4C, 0xB9, 0x00, 0x01, 0x53, 
	0x56, 0x57, 0x0F, 0x83, 0x6A, 0x01, 0x00, 0x00, 0x8B, 0xC1, 
	0xC1, 0xF8, 0x05, 0x8D, 0x1C, 0x85, 0x60, 0xB9, 0x00, 0x01, 
	0x8B, 0x03, 0x8B, 0xF1, 0x83, 0xE6, 0x1F, 0xC1, 0xE6, 0x03, 
	0x8A, 0x44, 0x30, 0x04, 0xA8, 0x01, 0x89, 0x5D, 0xEC, 0x0F, 
	0x84, 0x45, 0x01, 0x00, 0x00, 0x33, 0xFF, 0x39, 0x7D, 0x10, 
	0x89, 0x7D, 0xF8, 0x89, 0x7D, 0xF0, 0x75, 0x07, 0x33, 0xC0, 
	0xE9, 0x45, 0x01, 0x00, 0x00, 0xA8, 0x20, 0x74, 0x0D, 0x6A, 
	0x02, 0x57, 0x57, 0x51, 0xE8, 0xAD, 0x0E, 0x00, 0x00, 0x83, 
	0xC4, 0x10, 0x8B, 0x03, 0x03, 0xC6, 0xF6, 0x40, 0x04, 0x80, 
	0x0F, 0x84, 0xAE, 0x00, 0x00, 0x00, 0x39, 0x7D, 0x10, 0x8B, 
	0x45, 0x0C, 0x89, 0x45, 0xFC, 0x89, 0x7D, 0x08, 0x0F, 0x86, 
	0xD4, 0x00, 0x00, 0x00, 0x8B, 0x4D, 0xFC, 0x2B, 0x4D, 0x0C, 
	0x8D, 0x85, 0xE8, 0xFB, 0xFF, 0xFF, 0x3B, 0x4D, 0x10, 0x73, 
	0x25, 0x8B, 0x55, 0xFC, 0xFF, 0x45, 0xFC, 0x8A, 0x12, 0x41, 
	0x80, 0xFA, 0x0A, 0x75, 0x08, 0xFF, 0x45, 0xF0, 0xC6, 0x00, 
	0x0D, 0x40, 0x47, 0x8B, 0x5D, 0xEC, 0x88, 0x10, 0x40, 0x47, 
	0x81, 0xFF, 0x00, 0x04, 0x00, 0x00, 0x7C, 0xD6, 0x8B, 0xF8, 
	0x8D, 0x85, 0xE8, 0xFB, 0xFF, 0xFF, 0x2B, 0xF8, 0x6A, 0x00, 
	0x8D, 0x45, 0xF4, 0x50, 0x57, 0x8D, 0x85, 0xE8, 0xFB, 0xFF, 
	0xFF, 0x50, 0x8B, 0x03, 0xFF, 0x34, 0x30, 0xFF, 0x15, 0x3C, 
	0x10, 0x00, 0x01, 0x85, 0xC0, 0x74, 0x19, 0x8B, 0x45, 0xF4, 
	0x01, 0x45, 0xF8, 0x3B, 0xC7, 0x7C, 0x18, 0x8B, 0x45, 0xFC, 
	0x2B, 0x45, 0x0C, 0x33, 0xFF, 0x3B, 0x45, 0x10, 0x72, 0x8C, 
	0xEB, 0x0B, 0xFF, 0x15, 0xE0, 0x10, 0x00, 0x01, 0x89, 0x45, 
	0x08, 0x33, 0xFF, 0x8B, 0x45, 0xF8, 0x3B, 0xC7, 0x75, 0x73, 
	0x39, 0x7D, 0x08, 0x74, 0x47, 0x6A, 0x05, 0x58, 0x39, 0x45, 
	0x08, 0x75, 0x34, 0xA3, 0x94, 0x99, 0x00, 0x01, 0xEB, 0x6B, 
	0x57, 0x8D, 0x4D, 0xF4, 0x51, 0xFF, 0x75, 0x10, 0xFF, 0x75, 
	0x0C, 0xFF, 0x30, 0xFF, 0x15, 0x3C, 0x10, 0x00, 0x01, 0x85, 
	0xC0, 0x74, 0x0B, 0x8B, 0x45, 0xF4, 0x89, 0x7D, 0x08, 0x89, 
	0x45, 0xF8, 0xEB, 0xC3, 0xFF, 0x15, 0xE0, 0x10, 0x00, 0x01, 
	0x89, 0x45, 0x08, 0xEB, 0xB8, 0xFF, 0x75, 0x08, 0xE8, 0xA4, 
	0x0C, 0x00, 0x00, 0x59, 0xEB, 0x3D, 0x8B, 0x03, 0xF6, 0x44, 
	0x30, 0x04, 0x40, 0x74, 0x0C, 0x8B, 0x45, 0x0C, 0x80, 0x38, 
	0x1A, 0x0F, 0x84, 0xDF, 0xFE, 0xFF, 0xFF, 0xC7, 0x05, 0x90, 
	0x99, 0x00, 0x01, 0x1C, 0x00, 0x00, 0x00, 0x89, 0x3D, 0x94, 
	0x99, 0x00, 0x01, 0xEB, 0x16, 0x2B, 0x45, 0xF0, 0xEB, 0x14, 
	0x83, 0x25, 0x94, 0x99, 0x00, 0x01, 0x00, 0xC7, 0x05, 0x90, 
	0x99, 0x00, 0x01, 0x09, 0x00, 0x00, 0x00, 0x83, 0xC8, 0xFF, 
	0x5F, 0x5E, 0x5B, 0xC9, 0xC3, 0xFF, 0x05, 0x64, 0x9E, 0x00, 
	0x01, 0xB9, 0x00, 0x10, 0x00, 0x00, 0xE8, 0xB5, 0xEE, 0xFF, 
	0xFF, 0x85, 0xC0, 0x8B, 0x4C, 0x24, 0x04, 0x89, 0x41, 0x08, 
	0x74, 0x0D, 0x83, 0x49, 0x0C, 0x08, 0xC7, 0x41, 0x18, 0x00, 
	0x10, 0x00, 0x00, 0xEB, 0x11, 0x83, 0x49, 0x0C, 0x04, 0x8D, 
	0x41, 0x14, 0x89, 0x41, 0x08, 0xC7, 0x41, 0x18, 0x02, 0x00, 
	0x00, 0x00, 0x8B, 0x41, 0x08, 0x83, 0x61, 0x04, 0x00, 0x89, 
	0x01, 0xC3, 0x55, 0x8B, 0xEC, 0x51, 0x51, 0x53, 0x56, 0x8B, 
	0x75, 0x0C, 0xF6, 0x46, 0x0C, 0x40, 0x57, 0x0F, 0x85, 0x87, 
	0x00, 0x00, 0x00, 0x8B, 0x46, 0x10, 0x83, 0xF8, 0xFF, 0x74, 
	0x14, 0x8B, 0xC8, 0xC1, 0xF9, 0x05, 0x8B, 0x0C, 0x8D, 0x60, 
	0xB9, 0x00, 0x01, 0x83, 0xE0, 0x1F, 0x8D, 0x04, 0xC1, 0xEB, 
	0x05, 0xB8, 0x28, 0x91, 0x00, 0x01, 0xF6, 0x40, 0x04, 0x80, 
	0x74, 0x60, 0xFF, 0x75, 0x08, 0x8D, 0x45, 0xF8, 0x50, 0xE8, 
	0xF1, 0xFB, 0xFF, 0xFF, 0x8B, 0xD8, 0x83, 0xFB, 0xFF, 0x59, 
	0x59, 0x75, 0x10, 0xC7, 0x05, 0x90, 0x99, 0x00, 0x01, 0x2A, 
	0x00, 0x00, 0x00, 0x66, 0x0D, 0xFF, 0xFF, 0xEB, 0x5B, 0x33, 
	0xFF, 0x85, 0xDB, 0x7E, 0x2F, 0xFF, 0x4E, 0x04, 0x78, 0x12, 
	0x8B, 0x06, 0x8A, 0x4C, 0x3D, 0xF8, 0x88, 0x08, 0x8B, 0x0E, 
	0x0F, 0xB6, 0x01, 0x41, 0x89, 0x0E, 0xEB, 0x0E, 0x0F, 0xBE, 
	0x44, 0x3D, 0xF8, 0x56, 0x50, 0xE8, 0x35, 0xE2, 0xFF, 0xFF, 
	0x59, 0x59, 0x83, 0xF8, 0xFF, 0x74, 0xCA, 0x47, 0x3B, 0xFB, 
	0x7C, 0xD1, 0x66, 0x8B, 0x45, 0x08, 0xEB, 0x20, 0x83, 0x46, 
	0x04, 0xFE, 0x78, 0x0D, 0x8B, 0x0E, 0x8B, 0x45, 0x08, 0x66, 
	0x89, 0x01, 0x83, 0x06, 0x02, 0xEB, 0x0D, 0x0F, 0xB7, 0x45, 
	0x08, 0x56, 0x50, 0xE8, 0x13, 0x0D, 0x00, 0x00, 0x59, 0x59, 
	0x5F, 0x5E, 0x5B, 0xC9, 0xC3, 0x55, 0x8B, 0xEC, 0x53, 0x56, 
	0x8B, 0x75, 0x0C, 0x33, 0xDB, 0x3B, 0xF3, 0x74, 0x15, 0x39, 
	0x5D, 0x10, 0x74, 0x10, 0x8A, 0x06, 0x3A, 0xC3, 0x75, 0x10, 
	0x8B, 0x45, 0x08, 0x3B, 0xC3, 0x74, 0x03, 0x66, 0x89, 0x18, 
	0x33, 0xC0, 0x5E, 0x5B, 0x5D, 0xC3, 0x39, 0x1D, 0x88, 0x9E, 
	0x00, 0x01, 0x75, 0x13, 0x8B, 0x4D, 0x08, 0x3B, 0xCB, 0x74, 
	0x07, 0x66, 0x0F, 0xB6, 0xC0, 0x66, 0x89, 0x01, 0x33, 0xC0, 
	0x40, 0xEB, 0xE1, 0x8B, 0x0D, 0xE0, 0x94, 0x00, 0x01, 0x0F, 
	0xB6, 0xC0, 0xF6, 0x44, 0x41, 0x01, 0x80, 0x74, 0x4D, 0xA1, 
	0xF0, 0x94, 0x00, 0x01, 0x83, 0xF8, 0x01, 0x7E, 0x2A, 0x39, 
	0x45, 0x10, 0x7C, 0x28, 0x33, 0xC9, 0x39, 0x5D, 0x08, 0x0F, 
	0x95, 0xC1, 0x51, 0xFF, 0x75, 0x08, 0x50, 0x56, 0x6A, 0x09, 
	0xFF, 0x35, 0x98, 0x9E, 0x00, 0x01, 0xFF, 0x15, 0xD0, 0x10, 
	0x00, 0x01, 0x85, 0xC0, 0xA1, 0xF0, 0x94, 0x00, 0x01, 0x75, 
	0x9D, 0x39, 0x45, 0x10, 0x72, 0x05, 0x38, 0x5E, 0x01, 0x75, 
	0x93, 0xC7, 0x05, 0x90, 0x99, 0x00, 0x01, 0x2A, 0x00, 0x00, 
	0x00, 0x83, 0xC8, 0xFF, 0xEB, 0x84, 0x33, 0xC0, 0x39, 0x5D, 
	0x08, 0x0F, 0x95, 0xC0, 0x50, 0xFF, 0x75, 0x08, 0x6A, 0x01, 
	0x56, 0x6A, 0x09, 0xFF, 0x35, 0x98, 0x9E, 0x00, 0x01, 0xFF, 
	0x15, 0xD0, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x0F, 0x85, 0x79, 
	0xFF, 0xFF, 0xFF, 0xEB, 0xCA, 0x8B, 0x4C, 0x24, 0x04, 0x33, 
	0xC0, 0x3B, 0x0D, 0xCC, 0xA6, 0x00, 0x01, 0x77, 0x07, 0x51, 
	0xE8, 0x6B, 0xF6, 0xFF, 0xFF, 0x59, 0xC3, 0x53, 0x8B, 0x5C, 
	0x24, 0x08, 0x56, 0x33, 0xF6, 0x83, 0xFB, 0xE0, 0x77, 0x65, 
	0x55, 0x8B, 0x2D, 0xD8, 0x10, 0x00, 0x01, 0x57, 0xA1, 0x48, 
	0xB9, 0x00, 0x01, 0x83, 0xF8, 0x01, 0x8B, 0xFB, 0x75, 0x0E, 
	0x85, 0xDB, 0x74, 0x04, 0x8B, 0xC3, 0xEB, 0x03, 0x33, 0xC0, 
	0x40, 0x50, 0xEB, 0x1E, 0x83, 0xF8, 0x03, 0x75, 0x0B, 0x53, 
	0xE8, 0xB0, 0xFF, 0xFF, 0xFF, 0x85, 0xC0, 0x59, 0x75, 0x18, 
	0x85, 0xDB, 0x75, 0x03, 0x33, 0xFF, 0x47, 0x83, 0xC7, 0x0F, 
	0x83, 0xE7, 0xF0, 0x57, 0x6A, 0x00, 0xFF, 0x35, 0x44, 0xB9, 
	0x00, 0x01, 0xFF, 0xD5, 0x8B, 0xF0, 0x85, 0xF6, 0x75, 0x13, 
	0x39, 0x05, 0xAC, 0x9E, 0x00, 0x01, 0x74, 0x0B, 0x53, 0xE8, 
	0xE8, 0x0C, 0x00, 0x00, 0x85, 0xC0, 0x59, 0x75, 0xA5, 0x5F, 
	0x5D, 0x8B, 0xC6, 0x5E, 0x5B, 0xC3, 0x56, 0x8B, 0x74, 0x24, 
	0x08, 0x0F, 0xAF, 0x74, 0x24, 0x0C, 0x85, 0xF6, 0x57, 0x8B, 
	0xFE, 0x75, 0x01, 0x46, 0x33, 0xD2, 0x83, 0xFE, 0xE0, 0x77, 
	0x39, 0x83, 0x3D, 0x48, 0xB9, 0x00, 0x01, 0x03, 0x75, 0x1B, 
	0x83, 0xC6, 0x0F, 0x83, 0xE6, 0xF0, 0x3B, 0x3D, 0xCC, 0xA6, 
	0x00, 0x01, 0x77, 0x0D, 0x57, 0xE8, 0xBC, 0xF5, 0xFF, 0xFF, 
	0x8B, 0xD0, 0x85, 0xD2, 0x59, 0x75, 0x2B, 0x56, 0x6A, 0x08, 
	0xFF, 0x35, 0x44, 0xB9, 0x00, 0x01, 0xFF, 0x15, 0xD8, 0x10, 
	0x00, 0x01, 0x8B, 0xD0, 0x85, 0xD2, 0x75, 0x2A, 0x83, 0x3D, 
	0xAC, 0x9E, 0x00, 0x01, 0x00, 0x74, 0x21, 0x56, 0xE8, 0x7B, 
	0x0C, 0x00, 0x00, 0x85, 0xC0, 0x59, 0x75, 0xAC, 0xEB, 0x16, 
	0x8B, 0xCF, 0x8B, 0xF1, 0xC1, 0xE9, 0x02, 0x33, 0xC0, 0x8B, 
	0xFA, 0xF3, 0xAB, 0x8B, 0xCE, 0x83, 0xE1, 0x03, 0xF3, 0xAA, 
	0x8B, 0xC2, 0x5F, 0x5E, 0xC3, 0x6A, 0x34, 0x68, 0xC0, 0x22, 
	0x00, 0x01, 0xE8, 0x3B, 0xC6, 0xFF, 0xFF, 0x33, 0xFF, 0x39, 
	0x3D, 0xA0, 0x9E, 0x00, 0x01, 0x75, 0x38, 0x57, 0x57, 0x33, 
	0xF6, 0x46, 0x56, 0x68, 0xBC, 0x22, 0x00, 0x01, 0x68, 0x00, 
	0x01, 0x00, 0x00, 0x57, 0xFF, 0x15, 0xA0, 0x10, 0x00, 0x01, 
	0x85, 0xC0, 0x74, 0x08, 0x89, 0x35, 0xA0, 0x9E, 0x00, 0x01, 
	0xEB, 0x15, 0xFF, 0x15, 0xE0, 0x10, 0x00, 0x01, 0x83, 0xF8, 
	0x78, 0x75, 0x0A, 0xC7, 0x05, 0xA0, 0x9E, 0x00, 0x01, 0x02, 
	0x00, 0x00, 0x00, 0x39, 0x7D, 0x14, 0x7E, 0x1C, 0x8B, 0x4D, 
	0x14, 0x8B, 0x45, 0x10, 0x49, 0x80, 0x38, 0x00, 0x74, 0x08, 
	0x40, 0x3B, 0xCF, 0x75, 0xF5, 0x83, 0xC9, 0xFF, 0x83, 0xC8, 
	0xFF, 0x2B, 0xC1, 0x01, 0x45, 0x14, 0xA1, 0xA0, 0x9E, 0x00, 
	0x01, 0x83, 0xF8, 0x02, 0x0F, 0x84, 0xDA, 0x01, 0x00, 0x00, 
	0x3B, 0xC7, 0x0F, 0x84, 0xD2, 0x01, 0x00, 0x00, 0x83, 0xF8, 
	0x01, 0x0F, 0x85, 0xFC, 0x01, 0x00, 0x00, 0x89, 0x7D, 0xD4, 
	0x89, 0x7D, 0xC8, 0x89, 0x7D, 0xCC, 0x39, 0x7D, 0x20, 0x75, 
	0x08, 0xA1, 0x98, 0x9E, 0x00, 0x01, 0x89, 0x45, 0x20, 0x57, 
	0x57, 0xFF, 0x75, 0x14, 0xFF, 0x75, 0x10, 0x33, 0xC0, 0x39, 
	0x7D, 0x24, 0x0F, 0x95, 0xC0, 0x8D, 0x04, 0xC5, 0x01, 0x00, 
	0x00, 0x00, 0x50, 0xFF, 0x75, 0x20, 0xFF, 0x15, 0xD0, 0x10, 
	0x00, 0x01, 0x8B, 0xF0, 0x89, 0x75, 0xD0, 0x33, 0xDB, 0x3B, 
	0xF3, 0x0F, 0x84, 0xB6, 0x01, 0x00, 0x00, 0xC7, 0x45, 0xFC, 
	0x01, 0x00, 0x00, 0x00, 0x8D, 0x04, 0x36, 0x83, 0xC0, 0x03, 
	0x83, 0xE0, 0xFC, 0xE8, 0x76, 0xC7, 0xFF, 0xFF, 0x89, 0x65, 
	0xE8, 0x8B, 0xC4, 0x89, 0x45, 0xE4, 0x83, 0x4D, 0xFC, 0xFF, 
	0xEB, 0x1C, 0x33, 0xC0, 0x40, 0xC3, 0x8B, 0x65, 0xE8, 0xE8, 
	0x71, 0x0D, 0x00, 0x00, 0x83, 0x65, 0xE4, 0x00, 0x83, 0x4D, 
	0xFC, 0xFF, 0x8B, 0x7D, 0xD4, 0x8B, 0x75, 0xD0, 0x33, 0xDB, 
	0x39, 0x5D, 0xE4, 0x75, 0x1A, 0x8D, 0x0C, 0x36, 0xE8, 0xCB, 
	0xEA, 0xFF, 0xFF, 0x89, 0x45, 0xE4, 0x3B, 0xC3, 0x0F, 0x84, 
	0x5F, 0x01, 0x00, 0x00, 0xC7, 0x45, 0xC8, 0x01, 0x00, 0x00, 
	0x00, 0x56, 0xFF, 0x75, 0xE4, 0xFF, 0x75, 0x14, 0xFF, 0x75, 
	0x10, 0x6A, 0x01, 0xFF, 0x75, 0x20, 0xFF, 0x15, 0xD0, 0x10, 
	0x00, 0x01, 0x85, 0xC0, 0x0F, 0x84, 0xE5, 0x00, 0x00, 0x00, 
	0x53, 0x53, 0x56, 0xFF, 0x75, 0xE4, 0xFF, 0x75, 0x0C, 0xFF, 
	0x75, 0x08, 0xFF, 0x15, 0xA0, 0x10, 0x00, 0x01, 0x8B, 0xF8, 
	0x89, 0x7D, 0xD4, 0x3B, 0xFB, 0x0F, 0x84, 0xC6, 0x00, 0x00, 
	0x00, 0xF6, 0x45, 0x0D, 0x04, 0x74, 0x2D, 0x39, 0x5D, 0x1C, 
	0x0F, 0x84, 0xB7, 0x00, 0x00, 0x00, 0x3B, 0x7D, 0x1C, 0x0F, 
	0x8F, 0xAE, 0x00, 0x00, 0x00, 0xFF, 0x75, 0x1C, 0xFF, 0x75, 
	0x18, 0x56, 0xFF, 0x75, 0xE4, 0xFF, 0x75, 0x0C, 0xFF, 0x75, 
	0x08, 0xFF, 0x15, 0xA0, 0x10, 0x00, 0x01, 0xE9, 0x93, 0x00, 
	0x00, 0x00, 0xC7, 0x45, 0xFC, 0x02, 0x00, 0x00, 0x00, 0x8D, 
	0x04, 0x3F, 0x83, 0xC0, 0x03, 0x83, 0xE0, 0xFC, 0xE8, 0xA9, 
	0xC6, 0xFF, 0xFF, 0x89, 0x65, 0xE8, 0x8B, 0xC4, 0x89, 0x45, 
	0xE0, 0x83, 0x4D, 0xFC, 0xFF, 0xEB, 0x1C, 0x33, 0xC0, 0x40, 
	0xC3, 0x8B, 0x65, 0xE8, 0xE8, 0xA4, 0x0C, 0x00, 0x00, 0x83, 
	0x65, 0xE0, 0x00, 0x83, 0x4D, 0xFC, 0xFF, 0x8B, 0x7D, 0xD4, 
	0x8B, 0x75, 0xD0, 0x33, 0xDB, 0x39, 0x5D, 0xE0, 0x75, 0x16, 
	0x8D, 0x0C, 0x3F, 0xE8, 0xFE, 0xE9, 0xFF, 0xFF, 0x89, 0x45, 
	0xE0, 0x3B, 0xC3, 0x74, 0x40, 0xC7, 0x45, 0xCC, 0x01, 0x00, 
	0x00, 0x00, 0x57, 0xFF, 0x75, 0xE0, 0x56, 0xFF, 0x75, 0xE4, 
	0xFF, 0x75, 0x0C, 0xFF, 0x75, 0x08, 0xFF, 0x15, 0xA0, 0x10, 
	0x00, 0x01, 0x85, 0xC0, 0x74, 0x21, 0x53, 0x53, 0x39, 0x5D, 
	0x1C, 0x75, 0x04, 0x53, 0x53, 0xEB, 0x06, 0xFF, 0x75, 0x1C, 
	0xFF, 0x75, 0x18, 0x57, 0xFF, 0x75, 0xE0, 0x53, 0xFF, 0x75, 
	0x20, 0xFF, 0x15, 0x58, 0x10, 0x00, 0x01, 0x8B, 0xF8, 0x39, 
	0x5D, 0xCC, 0x74, 0x09, 0xFF, 0x75, 0xE0, 0xE8, 0x72, 0xE9, 
	0xFF, 0xFF, 0x59, 0x39, 0x5D, 0xC8, 0x74, 0x09, 0xFF, 0x75, 
	0xE4, 0xE8, 0x64, 0xE9, 0xFF, 0xFF, 0x59, 0x8B, 0xC7, 0xE9, 
	0x67, 0x01, 0x00, 0x00, 0x89, 0x7D, 0xD8, 0x33, 0xDB, 0x89, 
	0x7D, 0xC4, 0x39, 0x7D, 0x08, 0x75, 0x08, 0xA1, 0x88, 0x9E, 
	0x00, 0x01, 0x89, 0x45, 0x08, 0x39, 0x7D, 0x20, 0x75, 0x08, 
	0xA1, 0x98, 0x9E, 0x00, 0x01, 0x89, 0x45, 0x20, 0xFF, 0x75, 
	0x08, 0xE8, 0xF5, 0x09, 0x00, 0x00, 0x59, 0x89, 0x45, 0xC0, 
	0x83, 0xF8, 0xFF, 0x75, 0x07, 0x33, 0xC0, 0xE9, 0x2D, 0x01, 
	0x00, 0x00, 0x3B, 0x45, 0x20, 0x0F, 0x84, 0xF9, 0x00, 0x00, 
	0x00, 0x57, 0x57, 0x8D, 0x4D, 0x14, 0x51, 0xFF, 0x75, 0x10, 
	0x50, 0xFF, 0x75, 0x20, 0xE8, 0xFC, 0x09, 0x00, 0x00, 0x83, 
	0xC4, 0x18, 0x89, 0x45, 0xD8, 0x3B, 0xC7, 0x74, 0xD4, 0x57, 
	0x57, 0xFF, 0x75, 0x14, 0x50, 0xFF, 0x75, 0x0C, 0xFF, 0x75, 
	0x08, 0xFF, 0x15, 0x9C, 0x10, 0x00, 0x01, 0x8B, 0xF0, 0x89, 
	0x75, 0xDC, 0x85, 0xF6, 0x0F, 0x84, 0x8A, 0x00, 0x00, 0x00, 
	0x83, 0x65, 0xFC, 0x00, 0x83, 0xC0, 0x03, 0x83, 0xE0, 0xFC, 
	0xE8, 0x7B, 0xC5, 0xFF, 0xFF, 0x89, 0x65, 0xE8, 0x8B, 0xDC, 
	0x89, 0x5D, 0xBC, 0x8B, 0xCE, 0x33, 0xC0, 0x8B, 0xFB, 0x8B, 
	0xD1, 0xC1, 0xE9, 0x02, 0xF3, 0xAB, 0x8B, 0xCA, 0x83, 0xE1, 
	0x03, 0xF3, 0xAA, 0xEB, 0x0E, 0x33, 0xC0, 0x40, 0xC3, 0x8B, 
	0x65, 0xE8, 0xE8, 0x66, 0x0B, 0x00, 0x00, 0x33, 0xDB, 0x83, 
	0x4D, 0xFC, 0xFF, 0x85, 0xDB, 0x75, 0x2A, 0x8B, 0x4D, 0xDC, 
	0xE8, 0xCB, 0xE8, 0xFF, 0xFF, 0x8B, 0xD8, 0x85, 0xDB, 0x74, 
	0x39, 0x8B, 0x4D, 0xDC, 0x33, 0xC0, 0x8B, 0xFB, 0x8B, 0xD1, 
	0xC1, 0xE9, 0x02, 0xF3, 0xAB, 0x8B, 0xCA, 0x83, 0xE1, 0x03, 
	0xF3, 0xAA, 0xC7, 0x45, 0xC4, 0x01, 0x00, 0x00, 0x00, 0xFF, 
	0x75, 0xDC, 0x53, 0xFF, 0x75, 0x14, 0xFF, 0x75, 0xD8, 0xFF, 
	0x75, 0x0C, 0xFF, 0x75, 0x08, 0xFF, 0x15, 0x9C, 0x10, 0x00, 
	0x01, 0x89, 0x45, 0xDC, 0x85, 0xC0, 0x75, 0x04, 0x33, 0xF6, 
	0xEB, 0x21, 0xFF, 0x75, 0x1C, 0xFF, 0x75, 0x18, 0x8D, 0x45, 
	0xDC, 0x50, 0x53, 0xFF, 0x75, 0x20, 0xFF, 0x75, 0xC0, 0xE8, 
	0x2F, 0x09, 0x00, 0x00, 0x83, 0xC4, 0x18, 0x8B, 0xF0, 0xF7, 
	0xDE, 0x1B, 0xF6, 0xF7, 0xDE, 0x83, 0x7D, 0xC4, 0x00, 0x74, 
	0x23, 0x53, 0xE8, 0x23, 0xE8, 0xFF, 0xFF, 0x59, 0xEB, 0x1A, 
	0xFF, 0x75, 0x1C, 0xFF, 0x75, 0x18, 0xFF, 0x75, 0x14, 0xFF, 
	0x75, 0x10, 0xFF, 0x75, 0x0C, 0xFF, 0x75, 0x08, 0xFF, 0x15, 
	0x9C, 0x10, 0x00, 0x01, 0x8B, 0xF0, 0x83, 0x7D, 0xD8, 0x00, 
	0x74, 0x09, 0xFF, 0x75, 0xD8, 0xE8, 0xF8, 0xE7, 0xFF, 0xFF, 
	0x59, 0x8B, 0xC6, 0x8D, 0x65, 0xB0, 0xE8, 0xBC, 0xC2, 0xFF, 
	0xFF, 0xC3, 0x6A, 0x1C, 0x68, 0xE8, 0x22, 0x00, 0x01, 0xE8, 
	0x74, 0xC2, 0xFF, 0xFF, 0x33, 0xF6, 0x39, 0x35, 0xA4, 0x9E, 
	0x00, 0x01, 0x75, 0x35, 0x8D, 0x45, 0xE4, 0x50, 0x33, 0xFF, 
	0x47, 0x57, 0x68, 0xBC, 0x22, 0x00, 0x01, 0x57, 0xFF, 0x15, 
	0xA8, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x74, 0x08, 0x89, 0x3D, 
	0xA4, 0x9E, 0x00, 0x01, 0xEB, 0x15, 0xFF, 0x15, 0xE0, 0x10, 
	0x00, 0x01, 0x83, 0xF8, 0x78, 0x75, 0x0A, 0xC7, 0x05, 0xA4, 
	0x9E, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0xA1, 0xA4, 0x9E, 
	0x00, 0x01, 0x83, 0xF8, 0x02, 0x0F, 0x84, 0xF2, 0x00, 0x00, 
	0x00, 0x3B, 0xC6, 0x0F, 0x84, 0xEA, 0x00, 0x00, 0x00, 0x83, 
	0xF8, 0x01, 0x0F, 0x85, 0x07, 0x01, 0x00, 0x00, 0x89, 0x75, 
	0xDC, 0x89, 0x75, 0xE0, 0x39, 0x75, 0x18, 0x75, 0x08, 0xA1, 
	0x98, 0x9E, 0x00, 0x01, 0x89, 0x45, 0x18, 0x56, 0x56, 0xFF, 
	0x75, 0x10, 0xFF, 0x75, 0x0C, 0x33, 0xC0, 0x39, 0x75, 0x20, 
	0x0F, 0x95, 0xC0, 0x8D, 0x04, 0xC5, 0x01, 0x00, 0x00, 0x00, 
	0x50, 0xFF, 0x75, 0x18, 0xFF, 0x15, 0xD0, 0x10, 0x00, 0x01, 
	0x8B, 0xD8, 0x89, 0x5D, 0xD8, 0x85, 0xDB, 0x0F, 0x84, 0xC6, 
	0x00, 0x00, 0x00, 0x83, 0x65, 0xFC, 0x00, 0x8D, 0x3C, 0x1B, 
	0x8B, 0xC7, 0x83, 0xC0, 0x03, 0x83, 0xE0, 0xFC, 0xE8, 0xD9, 
	0xC3, 0xFF, 0xFF, 0x89, 0x65, 0xE8, 0x8B, 0xF4, 0x89, 0x75, 
	0xD4, 0x8B, 0xCF, 0x33, 0xC0, 0x8B, 0xFE, 0x8B, 0xD1, 0xC1, 
	0xE9, 0x02, 0xF3, 0xAB, 0x8B, 0xCA, 0x83, 0xE1, 0x03, 0xF3, 
	0xAA, 0x83, 0x4D, 0xFC, 0xFF, 0xEB, 0x15, 0x33, 0xC0, 0x40, 
	0xC3, 0x8B, 0x65, 0xE8, 0xE8, 0xC0, 0x09, 0x00, 0x00, 0x33, 
	0xF6, 0x83, 0x4D, 0xFC, 0xFF, 0x8B, 0x5D, 0xD8, 0x85, 0xF6, 
	0x75, 0x17, 0x8B, 0xD3, 0x6A, 0x02, 0x59, 0xE8, 0x58, 0xE7, 
	0xFF, 0xFF, 0x8B, 0xF0, 0x85, 0xF6, 0x74, 0x67, 0xC7, 0x45, 
	0xE0, 0x01, 0x00, 0x00, 0x00, 0x53, 0x56, 0xFF, 0x75, 0x10, 
	0xFF, 0x75, 0x0C, 0x6A, 0x01, 0xFF, 0x75, 0x18, 0xFF, 0x15, 
	0xD0, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x74, 0x11, 0xFF, 0x75, 
	0x14, 0x50, 0x56, 0xFF, 0x75, 0x08, 0xFF, 0x15, 0xA8, 0x10, 
	0x00, 0x01, 0x89, 0x45, 0xDC, 0x83, 0x7D, 0xE0, 0x00, 0x74, 
	0x07, 0x56, 0xE8, 0xA7, 0xE6, 0xFF, 0xFF, 0x59, 0x8B, 0x45, 
	0xDC, 0xEB, 0x6E, 0x8B, 0x7D, 0x1C, 0x3B, 0xFE, 0x75, 0x06, 
	0x8B, 0x3D, 0x88, 0x9E, 0x00, 0x01, 0x8B, 0x5D, 0x18, 0x85, 
	0xDB, 0x75, 0x06, 0x8B, 0x1D, 0x98, 0x9E, 0x00, 0x01, 0x57, 
	0xE8, 0x44, 0x07, 0x00, 0x00, 0x59, 0x83, 0xF8, 0xFF, 0x75, 
	0x04, 0x33, 0xC0, 0xEB, 0x44, 0x3B, 0xC3, 0x74, 0x1E, 0x6A, 
	0x00, 0x6A, 0x00, 0x8D, 0x4D, 0x10, 0x51, 0xFF, 0x75, 0x0C, 
	0x50, 0x53, 0xE8, 0x56, 0x07, 0x00, 0x00, 0x83, 0xC4, 0x18, 
	0x8B, 0xF0, 0x85, 0xF6, 0x74, 0xDD, 0x89, 0x75, 0x0C, 0xFF, 
	0x75, 0x14, 0xFF, 0x75, 0x10, 0xFF, 0x75, 0x0C, 0xFF, 0x75, 
	0x08, 0x57, 0xFF, 0x15, 0xA4, 0x10, 0x00, 0x01, 0x8B, 0xD8, 
	0x85, 0xF6, 0x74, 0x07, 0x56, 0xE8, 0x36, 0xE6, 0xFF, 0xFF, 
	0x59, 0x8B, 0xC3, 0x8D, 0x65, 0xC8, 0xE8, 0xFA, 0xC0, 0xFF, 
	0xFF, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x55, 0x8B, 
	0xEC, 0x57, 0x56, 0x8B, 0x75, 0x0C, 0x8B, 0x4D, 0x10, 0x8B, 
	0x7D, 0x08, 0x8B, 0xC1, 0x8B, 0xD1, 0x03, 0xC6, 0x3B, 0xFE, 
	0x76, 0x08, 0x3B, 0xF8, 0x0F, 0x82, 0x7C, 0x01, 0x00, 0x00, 
	0xF7, 0xC7, 0x03, 0x00, 0x00, 0x00, 0x75, 0x14, 0xC1, 0xE9, 
	0x02, 0x83, 0xE2, 0x03, 0x83, 0xF9, 0x08, 0x72, 0x29, 0xF3, 
	0xA5, 0xFF, 0x24, 0x95, 0x4C, 0x6F, 0x00, 0x01, 0x8B, 0xC7, 
	0xBA, 0x03, 0x00, 0x00, 0x00, 0x83, 0xE9, 0x04, 0x72, 0x0C, 
	0x83, 0xE0, 0x03, 0x03, 0xC8, 0xFF, 0x24, 0x85, 0x60, 0x6E, 
	0x00, 0x01, 0xFF, 0x24, 0x8D, 0x5C, 0x6F, 0x00, 0x01, 0x90, 
	0xFF, 0x24, 0x8D, 0xE0, 0x6E, 0x00, 0x01, 0x90, 0x70, 0x6E, 
	0x00, 0x01, 0x9C, 0x6E, 0x00, 0x01, 0xC0, 0x6E, 0x00, 0x01, 
	0x23, 0xD1, 0x8A, 0x06, 0x88, 0x07, 0x8A, 0x46, 0x01, 0x88, 
	0x47, 0x01, 0x8A, 0x46, 0x02, 0xC1, 0xE9, 0x02, 0x88, 0x47, 
	0x02, 0x83, 0xC6, 0x03, 0x83, 0xC7, 0x03, 0x83, 0xF9, 0x08, 
	0x72, 0xCC, 0xF3, 0xA5, 0xFF, 0x24, 0x95, 0x4C, 0x6F, 0x00, 
	0x01, 0x8D, 0x49, 0x00, 0x23, 0xD1, 0x8A, 0x06, 0x88, 0x07, 
	0x8A, 0x46, 0x01, 0xC1, 0xE9, 0x02, 0x88, 0x47, 0x01, 0x83, 
	0xC6, 0x02, 0x83, 0xC7, 0x02, 0x83, 0xF9, 0x08, 0x72, 0xA6, 
	0xF3, 0xA5, 0xFF, 0x24, 0x95, 0x4C, 0x6F, 0x00, 0x01, 0x90, 
	0x23, 0xD1, 0x8A, 0x06, 0x88, 0x07, 0x83, 0xC6, 0x01, 0xC1, 
	0xE9, 0x02, 0x83, 0xC7, 0x01, 0x83, 0xF9, 0x08, 0x72, 0x88, 
	0xF3, 0xA5, 0xFF, 0x24, 0x95, 0x4C, 0x6F, 0x00, 0x01, 0x8D, 
	0x49, 0x00, 0x43, 0x6F, 0x00, 0x01, 0x30, 0x6F, 0x00, 0x01, 
	0x28, 0x6F, 0x00, 0x01, 0x20, 0x6F, 0x00, 0x01, 0x18, 0x6F, 
	0x00, 0x01, 0x10, 0x6F, 0x00, 0x01, 0x08, 0x6F, 0x00, 0x01, 
	0x00, 0x6F, 0x00, 0x01, 0x8B, 0x44, 0x8E, 0xE4, 0x89, 0x44, 
	0x8F, 0xE4, 0x8B, 0x44, 0x8E, 0xE8, 0x89, 0x44, 0x8F, 0xE8, 
	0x8B, 0x44, 0x8E, 0xEC, 0x89, 0x44, 0x8F, 0xEC, 0x8B, 0x44, 
	0x8E, 0xF0, 0x89, 0x44, 0x8F, 0xF0, 0x8B, 0x44, 0x8E, 0xF4, 
	0x89, 0x44, 0x8F, 0xF4, 0x8B, 0x44, 0x8E, 0xF8, 0x89, 0x44, 
	0x8F, 0xF8, 0x8B, 0x44, 0x8E, 0xFC, 0x89, 0x44, 0x8F, 0xFC, 
	0x8D, 0x04, 0x8D, 0x00, 0x00, 0x00, 0x00, 0x03, 0xF0, 0x03, 
	0xF8, 0xFF, 0x24, 0x95, 0x4C, 0x6F, 0x00, 0x01, 0x8B, 0xFF, 
	0x5C, 0x6F, 0x00, 0x01, 0x64, 0x6F, 0x00, 0x01, 0x70, 0x6F, 
	0x00, 0x01, 0x84, 0x6F, 0x00, 0x01, 0x8B, 0x45, 0x08, 0x5E, 
	0x5F, 0xC9, 0xC3, 0x90, 0x8A, 0x06, 0x88, 0x07, 0x8B, 0x45, 
	0x08, 0x5E, 0x5F, 0xC9, 0xC3, 0x90, 0x8A, 0x06, 0x88, 0x07, 
	0x8A, 0x46, 0x01, 0x88, 0x47, 0x01, 0x8B, 0x45, 0x08, 0x5E, 
	0x5F, 0xC9, 0xC3, 0x8D, 0x49, 0x00, 0x8A, 0x06, 0x88, 0x07, 
	0x8A, 0x46, 0x01, 0x88, 0x47, 0x01, 0x8A, 0x46, 0x02, 0x88, 
	0x47, 0x02, 0x8B, 0x45, 0x08, 0x5E, 0x5F, 0xC9, 0xC3, 0x90, 
	0x8D, 0x74, 0x31, 0xFC, 0x8D, 0x7C, 0x39, 0xFC, 0xF7, 0xC7, 
	0x03, 0x00, 0x00, 0x00, 0x75, 0x24, 0xC1, 0xE9, 0x02, 0x83, 
	0xE2, 0x03, 0x83, 0xF9, 0x08, 0x72, 0x0D, 0xFD, 0xF3, 0xA5, 
	0xFC, 0xFF, 0x24, 0x95, 0xE8, 0x70, 0x00, 0x01, 0x8B, 0xFF, 
	0xF7, 0xD9, 0xFF, 0x24, 0x8D, 0x98, 0x70, 0x00, 0x01, 0x8D, 
	0x49, 0x00, 0x8B, 0xC7, 0xBA, 0x03, 0x00, 0x00, 0x00, 0x83, 
	0xF9, 0x04, 0x72, 0x0C, 0x83, 0xE0, 0x03, 0x2B, 0xC8, 0xFF, 
	0x24, 0x85, 0xEC, 0x6F, 0x00, 0x01, 0xFF, 0x24, 0x8D, 0xE8, 
	0x70, 0x00, 0x01, 0x90, 0xFC, 0x6F, 0x00, 0x01, 0x20, 0x70, 
	0x00, 0x01, 0x48, 0x70, 0x00, 0x01, 0x8A, 0x46, 0x03, 0x23, 
	0xD1, 0x88, 0x47, 0x03, 0x83, 0xEE, 0x01, 0xC1, 0xE9, 0x02, 
	0x83, 0xEF, 0x01, 0x83, 0xF9, 0x08, 0x72, 0xB2, 0xFD, 0xF3, 
	0xA5, 0xFC, 0xFF, 0x24, 0x95, 0xE8, 0x70, 0x00, 0x01, 0x8D, 
	0x49, 0x00, 0x8A, 0x46, 0x03, 0x23, 0xD1, 0x88, 0x47, 0x03, 
	0x8A, 0x46, 0x02, 0xC1, 0xE9, 0x02, 0x88, 0x47, 0x02, 0x83, 
	0xEE, 0x02, 0x83, 0xEF, 0x02, 0x83, 0xF9, 0x08, 0x72, 0x88, 
	0xFD, 0xF3, 0xA5, 0xFC, 0xFF, 0x24, 0x95, 0xE8, 0x70, 0x00, 
	0x01, 0x90, 0x8A, 0x46, 0x03, 0x23, 0xD1, 0x88, 0x47, 0x03, 
	0x8A, 0x46, 0x02, 0x88, 0x47, 0x02, 0x8A, 0x46, 0x01, 0xC1, 
	0xE9, 0x02, 0x88, 0x47, 0x01, 0x83, 0xEE, 0x03, 0x83, 0xEF, 
	0x03, 0x83, 0xF9, 0x08, 0x0F, 0x82, 0x56, 0xFF, 0xFF, 0xFF, 
	0xFD, 0xF3, 0xA5, 0xFC, 0xFF, 0x24, 0x95, 0xE8, 0x70, 0x00, 
	0x01, 0x8D, 0x49, 0x00, 0x9C, 0x70, 0x00, 0x01, 0xA4, 0x70, 
	0x00, 0x01, 0xAC, 0x70, 0x00, 0x01, 0xB4, 0x70, 0x00, 0x01, 
	0xBC, 0x70, 0x00, 0x01, 0xC4, 0x70, 0x00, 0x01, 0xCC, 0x70, 
	0x00, 0x01, 0xDF, 0x70, 0x00, 0x01, 0x8B, 0x44, 0x8E, 0x1C, 
	0x89, 0x44, 0x8F, 0x1C, 0x8B, 0x44, 0x8E, 0x18, 0x89, 0x44, 
	0x8F, 0x18, 0x8B, 0x44, 0x8E, 0x14, 0x89, 0x44, 0x8F, 0x14, 
	0x8B, 0x44, 0x8E, 0x10, 0x89, 0x44, 0x8F, 0x10, 0x8B, 0x44, 
	0x8E, 0x0C, 0x89, 0x44, 0x8F, 0x0C, 0x8B, 0x44, 0x8E, 0x08, 
	0x89, 0x44, 0x8F, 0x08, 0x8B, 0x44, 0x8E, 0x04, 0x89, 0x44, 
	0x8F, 0x04, 0x8D, 0x04, 0x8D, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0xF0, 0x03, 0xF8, 0xFF, 0x24, 0x95, 0xE8, 0x70, 0x00, 0x01, 
	0x8B, 0xFF, 0xF8, 0x70, 0x00, 0x01, 0x00, 0x71, 0x00, 0x01, 
	0x10, 0x71, 0x00, 0x01, 0x24, 0x71, 0x00, 0x01, 0x8B, 0x45, 
	0x08, 0x5E, 0x5F, 0xC9, 0xC3, 0x90, 0x8A, 0x46, 0x03, 0x88, 
	0x47, 0x03, 0x8B, 0x45, 0x08, 0x5E, 0x5F, 0xC9, 0xC3, 0x8D, 
	0x49, 0x00, 0x8A, 0x46, 0x03, 0x88, 0x47, 0x03, 0x8A, 0x46, 
	0x02, 0x88, 0x47, 0x02, 0x8B, 0x45, 0x08, 0x5E, 0x5F, 0xC9, 
	0xC3, 0x90, 0x8A, 0x46, 0x03, 0x88, 0x47, 0x03, 0x8A, 0x46, 
	0x02, 0x88, 0x47, 0x02, 0x8A, 0x46, 0x01, 0x88, 0x47, 0x01, 
	0x8B, 0x45, 0x08, 0x5E, 0x5F, 0xC9, 0xC3, 0x8B, 0x44, 0x24, 
	0x04, 0x3B, 0x05, 0x4C, 0xB9, 0x00, 0x01, 0x73, 0x3D, 0x8B, 
	0xC8, 0xC1, 0xF9, 0x05, 0x8B, 0x0C, 0x8D, 0x60, 0xB9, 0x00, 
	0x01, 0x8B, 0xD0, 0x83, 0xE2, 0x1F, 0xF6, 0x44, 0xD1, 0x04, 
	0x01, 0x74, 0x25, 0x50, 0xE8, 0x65, 0x01, 0x00, 0x00, 0x59, 
	0x50, 0xFF, 0x15, 0xAC, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x75, 
	0x08, 0xFF, 0x15, 0xE0, 0x10, 0x00, 0x01, 0xEB, 0x02, 0x33, 
	0xC0, 0x85, 0xC0, 0x74, 0x12, 0xA3, 0x94, 0x99, 0x00, 0x01, 
	0xC7, 0x05, 0x90, 0x99, 0x00, 0x01, 0x09, 0x00, 0x00, 0x00, 
	0x83, 0xC8, 0xFF, 0xC3, 0x6A, 0x02, 0xE8, 0xE7, 0xBA, 0xFF, 
	0xFF, 0x59, 0xC3, 0x56, 0x8B, 0x74, 0x24, 0x08, 0x8B, 0x46, 
	0x0C, 0x57, 0x83, 0xCF, 0xFF, 0xA8, 0x40, 0x74, 0x05, 0x83, 
	0xC8, 0xFF, 0xEB, 0x3A, 0xA8, 0x83, 0x74, 0x34, 0x56, 0xE8, 
	0x49, 0xEF, 0xFF, 0xFF, 0x56, 0x8B, 0xF8, 0xE8, 0xB7, 0x06, 
	0x00, 0x00, 0xFF, 0x76, 0x10, 0xE8, 0xFC, 0x05, 0x00, 0x00, 
	0x83, 0xC4, 0x0C, 0x85, 0xC0, 0x7D, 0x05, 0x83, 0xCF, 0xFF, 
	0xEB, 0x12, 0x8B, 0x46, 0x1C, 0x85, 0xC0, 0x74, 0x0B, 0x50, 
	0xE8, 0x3F, 0xE2, 0xFF, 0xFF, 0x83, 0x66, 0x1C, 0x00, 0x59, 
	0x8B, 0xC7, 0x83, 0x66, 0x0C, 0x00, 0x5F, 0x5E, 0xC3, 0x8B, 
	0x44, 0x24, 0x04, 0xA3, 0x94, 0x99, 0x00, 0x01, 0x33, 0xC9, 
	0x3B, 0x04, 0xCD, 0x00, 0x95, 0x00, 0x01, 0x74, 0x1B, 0x41, 
	0x83, 0xF9, 0x2D, 0x72, 0xF1, 0x83, 0xF8, 0x13, 0x72, 0x1D, 
	0x83, 0xF8, 0x24, 0x77, 0x18, 0xC7, 0x05, 0x90, 0x99, 0x00, 
	0x01, 0x0D, 0x00, 0x00, 0x00, 0xC3, 0x8B, 0x04, 0xCD, 0x04, 
	0x95, 0x00, 0x01, 0xA3, 0x90, 0x99, 0x00, 0x01, 0xC3, 0x3D, 
	0xBC, 0x00, 0x00, 0x00, 0x72, 0x11, 0x3D, 0xCA, 0x00, 0x00, 
	0x00, 0xC7, 0x05, 0x90, 0x99, 0x00, 0x01, 0x08, 0x00, 0x00, 
	0x00, 0x76, 0x0A, 0xC7, 0x05, 0x90, 0x99, 0x00, 0x01, 0x16, 
	0x00, 0x00, 0x00, 0xC3, 0x8B, 0x4C, 0x24, 0x04, 0x3B, 0x0D, 
	0x4C, 0xB9, 0x00, 0x01, 0x56, 0x57, 0x73, 0x55, 0x8B, 0xC1, 
	0xC1, 0xF8, 0x05, 0x8B, 0xF1, 0x8D, 0x3C, 0x85, 0x60, 0xB9, 
	0x00, 0x01, 0x8B, 0x07, 0x83, 0xE6, 0x1F, 0xC1, 0xE6, 0x03, 
	0x03, 0xC6, 0xF6, 0x40, 0x04, 0x01, 0x74, 0x37, 0x83, 0x38, 
	0xFF, 0x74, 0x32, 0x83, 0x3D, 0x08, 0x90, 0x00, 0x01, 0x01, 
	0x75, 0x1F, 0x33, 0xC0, 0x2B, 0xC8, 0x74, 0x10, 0x49, 0x74, 
	0x08, 0x49, 0x75, 0x13, 0x50, 0x6A, 0xF4, 0xEB, 0x08, 0x50, 
	0x6A, 0xF5, 0xEB, 0x03, 0x50, 0x6A, 0xF6, 0xFF, 0x15, 0xB0, 
	0x10, 0x00, 0x01, 0x8B, 0x07, 0x83, 0x0C, 0x06, 0xFF, 0x33, 
	0xC0, 0xEB, 0x14, 0x83, 0x25, 0x94, 0x99, 0x00, 0x01, 0x00, 
	0xC7, 0x05, 0x90, 0x99, 0x00, 0x01, 0x09, 0x00, 0x00, 0x00, 
	0x83, 0xC8, 0xFF, 0x5F, 0x5E, 0xC3, 0x8B, 0x44, 0x24, 0x04, 
	0x3B, 0x05, 0x4C, 0xB9, 0x00, 0x01, 0x73, 0x1B, 0x8B, 0xC8, 
	0xC1, 0xF9, 0x05, 0x8B, 0x0C, 0x8D, 0x60, 0xB9, 0x00, 0x01, 
	0x83, 0xE0, 0x1F, 0x8D, 0x04, 0xC1, 0xF6, 0x40, 0x04, 0x01, 
	0x74, 0x03, 0x8B, 0x00, 0xC3, 0x83, 0x25, 0x94, 0x99, 0x00, 
	0x01, 0x00, 0xC7, 0x05, 0x90, 0x99, 0x00, 0x01, 0x09, 0x00, 
	0x00, 0x00, 0x83, 0xC8, 0xFF, 0xC3, 0x55, 0x8B, 0xEC, 0x51, 
	0x51, 0x8B, 0x45, 0x08, 0x3B, 0x05, 0x4C, 0xB9, 0x00, 0x01, 
	0x56, 0x57, 0x73, 0x72, 0x8B, 0xC8, 0xC1, 0xF9, 0x05, 0x8B, 
	0xF0, 0x83, 0xE6, 0x1F, 0x8D, 0x3C, 0x8D, 0x60, 0xB9, 0x00, 
	0x01, 0x8B, 0x0F, 0xC1, 0xE6, 0x03, 0xF6, 0x44, 0x31, 0x04, 
	0x01, 0x74, 0x55, 0x8B, 0x4D, 0x0C, 0x89, 0x4D, 0xF8, 0x8B, 
	0x4D, 0x10, 0x50, 0x89, 0x4D, 0xFC, 0xE8, 0x83, 0xFF, 0xFF, 
	0xFF, 0x83, 0xF8, 0xFF, 0x59, 0x74, 0x44, 0xFF, 0x75, 0x14, 
	0x8D, 0x4D, 0xFC, 0x51, 0xFF, 0x75, 0xF8, 0x50, 0xFF, 0x15, 
	0x98, 0x10, 0x00, 0x01, 0x83, 0xF8, 0xFF, 0x89, 0x45, 0xF8, 
	0x75, 0x13, 0xFF, 0x15, 0xE0, 0x10, 0x00, 0x01, 0x85, 0xC0, 
	0x74, 0x09, 0x50, 0xE8, 0x7B, 0xFE, 0xFF, 0xFF, 0x59, 0xEB, 
	0x22, 0x8B, 0x07, 0x8D, 0x44, 0x30, 0x04, 0x80, 0x20, 0xFD, 
	0x8B, 0x45, 0xF8, 0x8B, 0x55, 0xFC, 0xEB, 0x17, 0x83, 0x25, 
	0x94, 0x99, 0x00, 0x01, 0x00, 0xC7, 0x05, 0x90, 0x99, 0x00, 
	0x01, 0x09, 0x00, 0x00, 0x00, 0x83, 0xC8, 0xFF, 0x83, 0xCA, 
	0xFF, 0x5F, 0x5E, 0xC9, 0xC3, 0x55, 0x8B, 0xEC, 0x51, 0x53, 
	0x56, 0x8B, 0x75, 0x0C, 0x8B, 0x46, 0x0C, 0xA8, 0x82, 0x8B, 
	0x4E, 0x10, 0x89, 0x4D, 0xFC, 0x0F, 0x84, 0xFC, 0x00, 0x00, 
	0x00, 0xA8, 0x40, 0x0F, 0x85, 0xF4, 0x00, 0x00, 0x00, 0x33, 
	0xDB, 0xA8, 0x01, 0x74, 0x16, 0xA8, 0x10, 0x89, 0x5E, 0x04, 
	0x0F, 0x84, 0xE3, 0x00, 0x00, 0x00, 0x8B, 0x56, 0x08, 0x83, 
	0xE0, 0xFE, 0x89, 0x16, 0x89, 0x46, 0x0C, 0x8B, 0x46, 0x0C, 
	0x83, 0xE0, 0xEF, 0x83, 0xC8, 0x02, 0x66, 0xA9, 0x0C, 0x01, 
	0x89, 0x46, 0x0C, 0x89, 0x5E, 0x04, 0x89, 0x5D, 0x0C, 0x75, 
	0x25, 0x81, 0xFE, 0x70, 0x91, 0x00, 0x01, 0x74, 0x08, 0x81, 
	0xFE, 0x90, 0x91, 0x00, 0x01, 0x75, 0x0B, 0x51, 0xE8, 0xCB, 
	0xEC, 0xFF, 0xFF, 0x85, 0xC0, 0x59, 0x75, 0x07, 0x56, 0xE8, 
	0x79, 0xF1, 0xFF, 0xFF, 0x59, 0x8B, 0x4D, 0xFC, 0x66, 0xF7, 
	0x46, 0x0C, 0x08, 0x01, 0x57, 0x74, 0x62, 0x8B, 0x46, 0x08, 
	0x8B, 0x3E, 0x8D, 0x50, 0x02, 0x89, 0x16, 0x8B, 0x56, 0x18, 
	0x2B, 0xF8, 0x4A, 0x4A, 0x3B, 0xFB, 0x89, 0x56, 0x04, 0x7E, 
	0x0D, 0x57, 0x50, 0x51, 0xE8, 0xAE, 0xEF, 0xFF, 0xFF, 0x89, 
	0x45, 0x0C, 0xEB, 0x2F, 0x83, 0xF9, 0xFF, 0x74, 0x16, 0x8B, 
	0xC1, 0xC1, 0xF8, 0x05, 0x8B, 0x04, 0x85, 0x60, 0xB9, 0x00, 
	0x01, 0x8B, 0xD1, 0x83, 0xE2, 0x1F, 0x8D, 0x04, 0xD0, 0xEB, 
	0x05, 0xB8, 0x28, 0x91, 0x00, 0x01, 0xF6, 0x40, 0x04, 0x20, 
	0x74, 0x0C, 0x6A, 0x02, 0x53, 0x51, 0xE8, 0xEE, 0xEE, 0xFF, 
	0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x46, 0x08, 0x8B, 0x5D, 0x08, 
	0x66, 0x89, 0x18, 0xEB, 0x1B, 0x8B, 0x5D, 0x08, 0x6A, 0x02, 
	0x5F, 0x57, 0x8D, 0x45, 0x0C, 0x50, 0x51, 0x66, 0x89, 0x5D, 
	0x0C, 0xE8, 0x57, 0xEF, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x89, 
	0x45, 0x0C, 0x39, 0x7D, 0x0C, 0x5F, 0x74, 0x06, 0x83, 0x4E, 
	0x0C, 0x20, 0xEB, 0x0F, 0x8B, 0xC3, 0x25, 0xFF, 0xFF, 0x00, 
	0x00, 0xEB, 0x0B, 0x83, 0xC8, 0x20, 0x89, 0x46, 0x0C, 0xB8, 
	0xFF, 0xFF, 0x00, 0x00, 0x5E, 0x5B, 0xC9, 0xC3, 0xA1, 0xA8, 
	0x9E, 0x00, 0x01, 0x85, 0xC0, 0x74, 0x0F, 0xFF, 0x74, 0x24, 
	0x04, 0xFF, 0xD0, 0x85, 0xC0, 0x59, 0x74, 0x04, 0x33, 0xC0, 
	0x40, 0xC3, 0x33, 0xC0, 0xC3, 0x55, 0x8B, 0xEC, 0x51, 0x51, 
	0x6A, 0x06, 0x8D, 0x45, 0xF8, 0x50, 0x68, 0x04, 0x10, 0x00, 
	0x00, 0xFF, 0x75, 0x08, 0xC6, 0x45, 0xFE, 0x00, 0xFF, 0x15, 
	0xB4, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x75, 0x05, 0x83, 0xC8, 
	0xFF, 0xC9, 0xC3, 0x8D, 0x45, 0xF8, 0x50, 0xE8, 0x90, 0x03, 
	0x00, 0x00, 0x59, 0xC9, 0xC3, 0x6A, 0x34, 0x68, 0xF8, 0x22, 
	0x00, 0x01, 0xE8, 0x93, 0xB9, 0xFF, 0xFF, 0x33, 0xDB, 0x89, 
	0x5D, 0xE4, 0x89, 0x5D, 0xD4, 0x8B, 0x45, 0x14, 0x8B, 0x38, 
	0x89, 0x7D, 0xD8, 0x89, 0x5D, 0xDC, 0x8B, 0x45, 0x08, 0x3B, 
	0x45, 0x0C, 0x0F, 0x84, 0x85, 0x01, 0x00, 0x00, 0x8D, 0x4D, 
	0xBC, 0x51, 0x50, 0x8B, 0x35, 0x90, 0x10, 0x00, 0x01, 0xFF, 
	0xD6, 0x85, 0xC0, 0x74, 0x20, 0x83, 0x7D, 0xBC, 0x01, 0x75, 
	0x1A, 0x8D, 0x45, 0xBC, 0x50, 0xFF, 0x75, 0x0C, 0xFF, 0xD6, 
	0x85, 0xC0, 0x74, 0x0D, 0x83, 0x7D, 0xBC, 0x01, 0x75, 0x07, 
	0xC7, 0x45, 0xDC, 0x01, 0x00, 0x00, 0x00, 0x39, 0x5D, 0xDC, 
	0x74, 0x20, 0x83, 0xFF, 0xFF, 0x74, 0x04, 0x8B, 0xF7, 0xEB, 
	0x12, 0x8B, 0x45, 0x10, 0x8D, 0x50, 0x01, 0x8A, 0x08, 0x40, 
	0x84, 0xC9, 0x75, 0xF9, 0x2B, 0xC2, 0x8D, 0x70, 0x01, 0x89, 
	0x75, 0xE0, 0xEB, 0x03, 0x8B, 0x75, 0xE0, 0x39, 0x5D, 0xDC, 
	0x75, 0x1A, 0x53, 0x53, 0x57, 0xFF, 0x75, 0x10, 0x6A, 0x01, 
	0xFF, 0x75, 0x08, 0xFF, 0x15, 0xD0, 0x10, 0x00, 0x01, 0x8B, 
	0xF0, 0x89, 0x75, 0xE0, 0x3B, 0xF3, 0x74, 0x5E, 0x89, 0x5D, 
	0xFC, 0x8D, 0x3C, 0x36, 0x8B, 0xC7, 0x83, 0xC0, 0x03, 0x83, 
	0xE0, 0xFC, 0xE8, 0x01, 0xBB, 0xFF, 0xFF, 0x89, 0x65, 0xE8, 
	0x8B, 0xDC, 0x89, 0x5D, 0xD0, 0x8B, 0xCF, 0x33, 0xC0, 0x8B, 
	0xFB, 0x8B, 0xD1, 0xC1, 0xE9, 0x02, 0xF3, 0xAB, 0x8B, 0xCA, 
	0x83, 0xE1, 0x03, 0xF3, 0xAA, 0x83, 0x4D, 0xFC, 0xFF, 0xEB, 
	0x15, 0x33, 0xC0, 0x40, 0xC3, 0x8B, 0x65, 0xE8, 0xE8, 0xE8, 
	0x00, 0x00, 0x00, 0x33, 0xDB, 0x83, 0x4D, 0xFC, 0xFF, 0x8B, 
	0x75, 0xE0, 0x85, 0xDB, 0x75, 0x1E, 0x8B, 0xD6, 0x6A, 0x02, 
	0x59, 0xE8, 0x80, 0xDE, 0xFF, 0xFF, 0x8B, 0xD8, 0x85, 0xDB, 
	0x75, 0x07, 0x33, 0xC0, 0xE9, 0xBB, 0x00, 0x00, 0x00, 0xC7, 
	0x45, 0xD4, 0x01, 0x00, 0x00, 0x00, 0x56, 0x53, 0xFF, 0x75, 
	0xD8, 0xFF, 0x75, 0x10, 0x6A, 0x01, 0xFF, 0x75, 0x08, 0xFF, 
	0x15, 0xD0, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x0F, 0x84, 0x89, 
	0x00, 0x00, 0x00, 0x33, 0xFF, 0x39, 0x7D, 0x18, 0x74, 0x20, 
	0x57, 0x57, 0xFF, 0x75, 0x1C, 0xFF, 0x75, 0x18, 0x56, 0x53, 
	0x57, 0xFF, 0x75, 0x0C, 0xFF, 0x15, 0x58, 0x10, 0x00, 0x01, 
	0x85, 0xC0, 0x74, 0x6A, 0x8B, 0x45, 0x18, 0x89, 0x45, 0xE4, 
	0xEB, 0x62, 0x39, 0x7D, 0xDC, 0x75, 0x18, 0x57, 0x57, 0x57, 
	0x57, 0x56, 0x53, 0x57, 0xFF, 0x75, 0x0C, 0xFF, 0x15, 0x58, 
	0x10, 0x00, 0x01, 0x8B, 0xF0, 0x3B, 0xF7, 0x74, 0x47, 0x33, 
	0xFF, 0x8B, 0xD6, 0x33, 0xC9, 0x41, 0xE8, 0x03, 0xDE, 0xFF, 
	0xFF, 0x89, 0x45, 0xE4, 0x3B, 0xC7, 0x74, 0x34, 0x33, 0xFF, 
	0x57, 0x57, 0x56, 0x50, 0x56, 0x53, 0x57, 0xFF, 0x75, 0x0C, 
	0xFF, 0x15, 0x58, 0x10, 0x00, 0x01, 0x3B, 0xC7, 0x75, 0x0E, 
	0xFF, 0x75, 0xE4, 0xE8, 0x6E, 0xDD, 0xFF, 0xFF, 0x59, 0x89, 
	0x7D, 0xE4, 0xEB, 0x10, 0x83, 0x7D, 0xD8, 0xFF, 0x74, 0x0A, 
	0x8B, 0x4D, 0x14, 0x89, 0x01, 0xEB, 0x03, 0x8B, 0x5D, 0xD0, 
	0x83, 0x7D, 0xD4, 0x00, 0x74, 0x07, 0x53, 0xE8, 0x4C, 0xDD, 
	0xFF, 0xFF, 0x59, 0x8B, 0x45, 0xE4, 0x8D, 0x65, 0xB0, 0xE8, 
	0x0F, 0xB8, 0xFF, 0xFF, 0xC3, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 
	0x4C, 0x53, 0x56, 0x57, 0x6A, 0x04, 0x58, 0xE8, 0xDA, 0xB9, 
	0xFF, 0xFF, 0x8B, 0xF4, 0x6A, 0x1C, 0x8D, 0x45, 0xD8, 0x50, 
	0x56, 0xFF, 0x15, 0xEC, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x74, 
	0x77, 0x8B, 0x5D, 0xDC, 0x8D, 0x45, 0xB4, 0x50, 0xFF, 0x15, 
	0xBC, 0x10, 0x00, 0x01, 0x8B, 0x4D, 0xB8, 0xA1, 0x9C, 0x99, 
	0x00, 0x01, 0x8D, 0x79, 0xFF, 0xF7, 0xD7, 0x23, 0xFE, 0x2B, 
	0xF9, 0x8B, 0xF0, 0x4E, 0xF7, 0xDE, 0x1B, 0xF6, 0x83, 0xE6, 
	0xF1, 0x83, 0xC6, 0x11, 0x0F, 0xAF, 0xF1, 0x03, 0xF3, 0x3B, 
	0xFE, 0x89, 0x4D, 0xF8, 0x72, 0x40, 0x83, 0xF8, 0x01, 0x74, 
	0x5C, 0x89, 0x5D, 0xFC, 0xBB, 0x00, 0x10, 0x00, 0x00, 0x6A, 
	0x1C, 0x8D, 0x45, 0xD8, 0x50, 0xFF, 0x75, 0xFC, 0xFF, 0x15, 
	0xEC, 0x10, 0x00, 0x01, 0x85, 0xC0, 0x74, 0x20, 0x8B, 0x45, 
	0xE4, 0x01, 0x45, 0xFC, 0x85, 0x5D, 0xE8, 0x74, 0xE2, 0xF6, 
	0x45, 0xED, 0x01, 0x8B, 0x45, 0xD8, 0x89, 0x45, 0xFC, 0x74, 
	0x05, 0x33, 0xC0, 0x40, 0xEB, 0x44, 0x3B, 0xF8, 0x73, 0x04, 
	0x33, 0xC0, 0xEB, 0x3C, 0x3B, 0xC6, 0x73, 0x03, 0x89, 0x75, 
	0xFC, 0x6A, 0x04, 0x53, 0xFF, 0x75, 0xF8, 0xFF, 0x75, 0xFC, 
	0xFF, 0x15, 0x94, 0x10, 0x00, 0x01, 0xA1, 0x9C, 0x99, 0x00, 
	0x01, 0xEB, 0x03, 0x89, 0x7D, 0xFC, 0x48, 0xF7, 0xD8, 0x1B, 
	0xC0, 0x25, 0x03, 0x01, 0x00, 0x00, 0x8D, 0x4D, 0xF4, 0x51, 
	0x40, 0x50, 0xFF, 0x75, 0xF8, 0xFF, 0x75, 0xFC, 0xFF, 0x15, 
	0xB8, 0x10, 0x00, 0x01, 0x8D, 0x65, 0xA8, 0x5F, 0x5E, 0x5B, 
	0xC9, 0xC3, 0x53, 0x55, 0x56, 0x57, 0x8B, 0x7C, 0x24, 0x14, 
	0x3B, 0x3D, 0x4C, 0xB9, 0x00, 0x01, 0x0F, 0x83, 0x86, 0x00, 
	0x00, 0x00, 0x8B, 0xC7, 0xC1, 0xF8, 0x05, 0x8B, 0xF7, 0x83, 
	0xE6, 0x1F, 0x8D, 0x1C, 0x85, 0x60, 0xB9, 0x00, 0x01, 0x8B, 
	0x03, 0xC1, 0xE6, 0x03, 0xF6, 0x44, 0x30, 0x04, 0x01, 0x74, 
	0x69, 0x57, 0xE8, 0xCD, 0xFA, 0xFF, 0xFF, 0x83, 0xF8, 0xFF, 
	0x59, 0x74, 0x3C, 0x83, 0xFF, 0x01, 0x74, 0x05, 0x83, 0xFF, 
	0x02, 0x75, 0x16, 0x6A, 0x02, 0xE8, 0xB6, 0xFA, 0xFF, 0xFF, 
	0x6A, 0x01, 0x8B, 0xE8, 0xE8, 0xAD, 0xFA, 0xFF, 0xFF, 0x3B, 
	0xC5, 0x59, 0x59, 0x74, 0x1C, 0x57, 0xE8, 0xA1, 0xFA, 0xFF, 
	0xFF, 0x59, 0x50, 0xFF, 0x15, 0xC0, 0x10, 0x00, 0x01, 0x85, 
	0xC0, 0x75, 0x0A, 0xFF, 0x15, 0xE0, 0x10, 0x00, 0x01, 0x8B, 
	0xE8, 0xEB, 0x02, 0x33, 0xED, 0x57, 0xE8, 0x09, 0xFA, 0xFF, 
	0xFF, 0x85, 0xED, 0x8B, 0x03, 0x59, 0xC6, 0x44, 0x30, 0x04, 
	0x00, 0x74, 0x09, 0x55, 0xE8, 0x98, 0xF9, 0xFF, 0xFF, 0x59, 
	0xEB, 0x15, 0x33, 0xC0, 0xEB, 0x14, 0x83, 0x25, 0x94, 0x99, 
	0x00, 0x01, 0x00, 0xC7, 0x05, 0x90, 0x99, 0x00, 0x01, 0x09, 
	0x00, 0x00, 0x00, 0x83, 0xC8, 0xFF, 0x5F, 0x5E, 0x5D, 0x5B, 
	0xC3, 0x56, 0x8B, 0x74, 0x24, 0x08, 0x8B, 0x46, 0x0C, 0xA8, 
	0x83, 0x74, 0x1D, 0xA8, 0x08, 0x74, 0x19, 0xFF, 0x76, 0x08, 
	0xE8, 0x91, 0xDB, 0xFF, 0xFF, 0x66, 0x81, 0x66, 0x0C, 0xF7, 
	0xFB, 0x33, 0xC0, 0x59, 0x89, 0x06, 0x89, 0x46, 0x08, 0x89, 
	0x46, 0x04, 0x5E, 0xC3, 0x56, 0x8B, 0x74, 0x24, 0x08, 0x85, 
	0xF6, 0x75, 0x04, 0x33, 0xC0, 0x5E, 0xC3, 0x83, 0x3D, 0xF0, 
	0x94, 0x00, 0x01, 0x01, 0x0F, 0xB6, 0x06, 0x7E, 0x0C, 0x6A, 
	0x08, 0x50, 0xE8, 0x5A, 0x00, 0x00, 0x00, 0x59, 0x59, 0xEB, 
	0x0D, 0x8B, 0x0D, 0xE0, 0x94, 0x00, 0x01, 0x0F, 0xB6, 0x04, 
	0x41, 0x83, 0xE0, 0x08, 0x85, 0xC0, 0x74, 0x03, 0x46, 0xEB, 
	0xD4, 0x0F, 0xB6, 0x0E, 0x46, 0x83, 0xF9, 0x2D, 0x8B, 0xD1, 
	0x74, 0x05, 0x83, 0xF9, 0x2B, 0x75, 0x04, 0x0F, 0xB6, 0x0E, 
	0x46, 0x33, 0xC0, 0x83, 0xF9, 0x30, 0x7C, 0x0A, 0x83, 0xF9, 
	0x39, 0x7F, 0x05, 0x83, 0xE9, 0x30, 0xEB, 0x03, 0x83, 0xC9, 
	0xFF, 0x83, 0xF9, 0xFF, 0x74, 0x0C, 0x8D, 0x04, 0x80, 0x8D, 
	0x04, 0x41, 0x0F, 0xB6, 0x0E, 0x46, 0xEB, 0xDD, 0x83, 0xFA, 
	0x2D, 0x75, 0x02, 0xF7, 0xD8, 0x5E, 0xC3, 0x55, 0x8B, 0xEC, 
	0x51, 0x8B, 0x45, 0x08, 0x8D, 0x48, 0x01, 0x81, 0xF9, 0x00, 
	0x01, 0x00, 0x00, 0x77, 0x0C, 0x8B, 0x0D, 0xE0, 0x94, 0x00, 
	0x01, 0x0F, 0xB7, 0x04, 0x41, 0xEB, 0x5B, 0x8B, 0xC8, 0xC1, 
	0xF9, 0x08, 0x56, 0x8B, 0x35, 0xE0, 0x94, 0x00, 0x01, 0x0F, 
	0xB6, 0xD1, 0xF6, 0x44, 0x56, 0x01, 0x80, 0x5E, 0x74, 0x0F, 
	0x6A, 0x02, 0x88, 0x45, 0xFD, 0x88, 0x4D, 0xFC, 0xC6, 0x45, 
	0xFE, 0x00, 0x58, 0xEB, 0x0A, 0x88, 0x45, 0xFC, 0x33, 0xC0, 
	0xC6, 0x45, 0xFD, 0x00, 0x40, 0x6A, 0x01, 0xFF, 0x35, 0x88, 
	0x9E, 0x00, 0x01, 0x8D, 0x4D, 0x0A, 0xFF, 0x35, 0x98, 0x9E, 
	0x00, 0x01, 0x51, 0x50, 0x8D, 0x45, 0xFC, 0x50, 0x6A, 0x01, 
	0xE8, 0xAB, 0xF2, 0xFF, 0xFF, 0x83, 0xC4, 0x1C, 0x85, 0xC0, 
	0x75, 0x02, 0xC9, 0xC3, 0x0F, 0xB7, 0x45, 0x0A, 0x23, 0x45, 
	0x0C, 0xC9, 0xC3, 0xCC, 0x8B, 0x44, 0x24, 0x08, 0x8B, 0x4C, 
	0x24, 0x10, 0x0B, 0xC8, 0x8B, 0x4C, 0x24, 0x0C, 0x75, 0x09, 
	0x8B, 0x44, 0x24, 0x04, 0xF7, 0xE1, 0xC2, 0x10, 0x00, 0x53, 
	0xF7, 0xE1, 0x8B, 0xD8, 0x8B, 0x44, 0x24, 0x08, 0xF7, 0x64, 
	0x24, 0x14, 0x03, 0xD8, 0x8B, 0x44, 0x24, 0x08, 0xF7, 0xE1, 
	0x03, 0xD3, 0x5B, 0xC2, 0x10, 0x00, 0xFF, 0x25, 0x10, 0x11, 
	0x00, 0x01, 0xFF, 0x25, 0x1C, 0x10, 0x00, 0x01, 0xFF, 0x25, 
	0x14, 0x10, 0x00, 0x01, 0xFF, 0x25, 0x10, 0x10, 0x00, 0x01, 
	0xFF, 0x25, 0x0C, 0x10, 0x00, 0x01, 0xFF, 0x25, 0x20, 0x10, 
	0x00, 0x01, 0x3B, 0x0D, 0x0C, 0x90, 0x00, 0x01, 0x75, 0x01, 
	0xC3, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x55, 0x8D, 0xAC, 0x24, 
	0x58, 0xFD, 0xFF, 0xFF, 0x81, 0xEC, 0x28, 0x03, 0x00, 0x00, 
	0xA1, 0x0C, 0x90, 0x00, 0x01, 0x89, 0x85, 0xA4, 0x02, 0x00, 
	0x00, 0xA1, 0x7C, 0xBA, 0x00, 0x01, 0x85, 0xC0, 0x74, 0x02, 
	0xFF, 0xD0, 0x83, 0x3D, 0x78, 0xBA, 0x00, 0x01, 0x00, 0x74, 
	0x3E, 0x57, 0x33, 0xC0, 0x21, 0x45, 0xD8, 0x6A, 0x13, 0x59, 
	0x8D, 0x7D, 0x84, 0xF3, 0xAB, 0xB9, 0xB2, 0x00, 0x00, 0x00, 
	0x8D, 0x7D, 0xDC, 0xF3, 0xAB, 0x8D, 0x45, 0x80, 0x89, 0x45, 
	0xD0, 0x8D, 0x45, 0xD8, 0x6A, 0x00, 0xC7, 0x45, 0x80, 0x09, 
	0x04, 0x00, 0xC0, 0x89, 0x45, 0xD4, 0xFF, 0x15, 0xFC, 0x10, 
	0x00, 0x01, 0x8D, 0x45, 0xD0, 0x50, 0xFF, 0x15, 0x78, 0xBA, 
	0x00, 0x01, 0x5F, 0x68, 0x02, 0x05, 0x00, 0x00, 0xFF, 0x15, 
	0xF8, 0x10, 0x00, 0x01, 0x50, 0xFF, 0x15, 0xF4, 0x10, 0x00, 
	0x01, 0x8B, 0x8D, 0xA4, 0x02, 0x00, 0x00, 0xE8, 0x6A, 0xFF, 
	0xFF, 0xFF, 0x81, 0xC5, 0xA8, 0x02, 0x00, 0x00, 0xC9, 0xC3, 
	0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x10, 0xA1, 0x0C, 0x90, 0x00, 
	0x01, 0x85, 0xC0, 0x74, 0x07, 0x3D, 0x4E, 0xE6, 0x40, 0xBB, 
	0x75, 0x6E, 0x56, 0x8D, 0x45, 0xF8, 0x50, 0xFF, 0x15, 0x8C, 
	0x10, 0x00, 0x01, 0x8B, 0x75, 0xFC, 0x33, 0x75, 0xF8, 0xFF, 
	0x15, 0xE8, 0x10, 0x00, 0x01, 0x33, 0xF0, 0xFF, 0x15, 0xC4, 
	0x10, 0x00, 0x01, 0x33, 0xF0, 0xFF, 0x15, 0xC8, 0x10, 0x00, 
	0x01, 0x33, 0xF0, 0x8D, 0x45, 0xF0, 0x50, 0xFF, 0x15, 0x00, 
	0x11, 0x00, 0x01, 0x8B, 0x45, 0xF4, 0x33, 0x45, 0xF0, 0x33, 
	0xF0, 0x89, 0x35, 0x0C, 0x90, 0x00, 0x01, 0x75, 0x0A, 0xC7, 
	0x05, 0x0C, 0x90, 0x00, 0x01, 0x4E, 0xE6, 0x40, 0xBB, 0x68, 
	0x20, 0x23, 0x00, 0x01, 0xFF, 0x15, 0x38, 0x10, 0x00, 0x01, 
	0x85, 0xC0, 0x5E, 0x74, 0x11, 0x68, 0x04, 0x23, 0x00, 0x01, 
	0x50, 0xFF, 0x15, 0x34, 0x10, 0x00, 0x01, 0xA3, 0x78, 0xBA, 
	0x00, 0x01, 0xC9, 0xC3, 0x90, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA4, 0x7C, 0x00, 0x00, 
	0x10, 0x11, 0x00, 0x00, 0xA8, 0x7B, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x7F, 0x00, 0x00, 
	0x28, 0x10, 0x00, 0x00, 0x88, 0x7C, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x7F, 0x00, 0x00, 
	0x08, 0x11, 0x00, 0x00, 0x80, 0x7B, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x80, 0x00, 0x00, 
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x8C, 0x80, 0x00, 0x00, 0x7C, 0x80, 
	0x00, 0x00, 0x64, 0x80, 0x00, 0x00, 0x4C, 0x80, 0x00, 0x00, 
	0x36, 0x80, 0x00, 0x00, 0x1C, 0x80, 0x00, 0x00, 0x06, 0x80, 
	0x00, 0x00, 0xF6, 0x7F, 0x00, 0x00, 0xA4, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x28, 0x7D, 0x00, 0x00, 0x3A, 0x7D, 
	0x00, 0x00, 0x4A, 0x7D, 0x00, 0x00, 0x58, 0x7D, 0x00, 0x00, 
	0x6A, 0x7D, 0x00, 0x00, 0x7E, 0x7D, 0x00, 0x00, 0x8A, 0x7D, 
	0x00, 0x00, 0x9A, 0x7D, 0x00, 0x00, 0xB0, 0x7D, 0x00, 0x00, 
	0xCC, 0x7D, 0x00, 0x00, 0xE6, 0x7D, 0x00, 0x00, 0xFE, 0x7D, 
	0x00, 0x00, 0x18, 0x7E, 0x00, 0x00, 0x2E, 0x7E, 0x00, 0x00, 
	0x48, 0x7E, 0x00, 0x00, 0x5A, 0x7E, 0x00, 0x00, 0x68, 0x7E, 
	0x00, 0x00, 0x7A, 0x7E, 0x00, 0x00, 0x88, 0x7E, 0x00, 0x00, 
	0x96, 0x7E, 0x00, 0x00, 0xA4, 0x7E, 0x00, 0x00, 0x18, 0x7D, 
	0x00, 0x00, 0xCA, 0x7E, 0x00, 0x00, 0xDA, 0x7E, 0x00, 0x00, 
	0xE2, 0x7E, 0x00, 0x00, 0x5A, 0x81, 0x00, 0x00, 0xF8, 0x7E, 
	0x00, 0x00, 0x04, 0x7F, 0x00, 0x00, 0x14, 0x7F, 0x00, 0x00, 
	0x26, 0x7F, 0x00, 0x00, 0x36, 0x7F, 0x00, 0x00, 0x46, 0x7F, 
	0x00, 0x00, 0x58, 0x7F, 0x00, 0x00, 0x6A, 0x7F, 0x00, 0x00, 
	0x7E, 0x7F, 0x00, 0x00, 0x8E, 0x7F, 0x00, 0x00, 0xA0, 0x7F, 
	0x00, 0x00, 0xB2, 0x7F, 0x00, 0x00, 0xC2, 0x7F, 0x00, 0x00, 
	0x2E, 0x81, 0x00, 0x00, 0x1E, 0x81, 0x00, 0x00, 0x0C, 0x7D, 
	0x00, 0x00, 0xF6, 0x7C, 0x00, 0x00, 0xE4, 0x7C, 0x00, 0x00, 
	0xD8, 0x7C, 0x00, 0x00, 0xCA, 0x7C, 0x00, 0x00, 0xBA, 0x7C, 
	0x00, 0x00, 0xAE, 0x7C, 0x00, 0x00, 0x44, 0x81, 0x00, 0x00, 
	0xBA, 0x7E, 0x00, 0x00, 0xEC, 0x7E, 0x00, 0x00, 0xBE, 0x80, 
	0x00, 0x00, 0xD2, 0x80, 0x00, 0x00, 0xE6, 0x80, 0x00, 0x00, 
	0x04, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDE, 0x7F, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x7C, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7C, 0x03, 0x52, 0x74, 0x6C, 0x55, 
	0x6E, 0x77, 0x69, 0x6E, 0x64, 0x00, 0x6E, 0x74, 0x64, 0x6C, 
	0x6C, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x0C, 0x02, 0x48, 0x65, 
	0x61, 0x70, 0x46, 0x72, 0x65, 0x65, 0x00, 0x00, 0x69, 0x01, 
	0x47, 0x65, 0x74, 0x4C, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 
	0x6F, 0x72, 0x00, 0x00, 0x10, 0x02, 0x48, 0x65, 0x61, 0x70, 
	0x52, 0x65, 0x41, 0x6C, 0x6C, 0x6F, 0x63, 0x00, 0x06, 0x02, 
	0x48, 0x65, 0x61, 0x70, 0x41, 0x6C, 0x6C, 0x6F, 0x63, 0x00, 
	0x9B, 0x01, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 
	0x73, 0x73, 0x48, 0x65, 0x61, 0x70, 0x00, 0x00, 0x6B, 0x02, 
	0x4D, 0x75, 0x6C, 0x74, 0x69, 0x42, 0x79, 0x74, 0x65, 0x54, 
	0x6F, 0x57, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72, 0x00, 
	0xC0, 0x03, 0x6C, 0x73, 0x74, 0x72, 0x6C, 0x65, 0x6E, 0x57, 
	0x00, 0x00, 0xE0, 0x01, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 
	0x73, 0x69, 0x6F, 0x6E, 0x45, 0x78, 0x57, 0x00, 0x08, 0x01, 
	0x47, 0x65, 0x74, 0x43, 0x6F, 0x6D, 0x6D, 0x61, 0x6E, 0x64, 
	0x4C, 0x69, 0x6E, 0x65, 0x41, 0x00, 0xDF, 0x01, 0x47, 0x65, 
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x45, 0x78, 
	0x41, 0x00, 0xAF, 0x00, 0x45, 0x78, 0x69, 0x74, 0x50, 0x72, 
	0x6F, 0x63, 0x65, 0x73, 0x73, 0x00, 0x98, 0x01, 0x47, 0x65, 
	0x74, 0x50, 0x72, 0x6F, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 
	0x73, 0x73, 0x00, 0x00, 0x77, 0x01, 0x47, 0x65, 0x74, 0x4D, 
	0x6F, 0x64, 0x75, 0x6C, 0x65, 0x48, 0x61, 0x6E, 0x64, 0x6C, 
	0x65, 0x41, 0x00, 0x00, 0x97, 0x03, 0x57, 0x72, 0x69, 0x74, 
	0x65, 0x46, 0x69, 0x6C, 0x65, 0x00, 0xB1, 0x01, 0x47, 0x65, 
	0x74, 0x53, 0x74, 0x64, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 
	0x00, 0x00, 0x75, 0x01, 0x47, 0x65, 0x74, 0x4D, 0x6F, 0x64, 
	0x75, 0x6C, 0x65, 0x46, 0x69, 0x6C, 0x65, 0x4E, 0x61, 0x6D, 
	0x65, 0x41, 0x00, 0x00, 0x62, 0x03, 0x55, 0x6E, 0x68, 0x61, 
	0x6E, 0x64, 0x6C, 0x65, 0x64, 0x45, 0x78, 0x63, 0x65, 0x70, 
	0x74, 0x69, 0x6F, 0x6E, 0x46, 0x69, 0x6C, 0x74, 0x65, 0x72, 
	0x00, 0x00, 0xED, 0x00, 0x46, 0x72, 0x65, 0x65, 0x45, 0x6E, 
	0x76, 0x69, 0x72, 0x6F, 0x6E, 0x6D, 0x65, 0x6E, 0x74, 0x53, 
	0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x41, 0x00, 0x4D, 0x01, 
	0x47, 0x65, 0x74, 0x45, 0x6E, 0x76, 0x69, 0x72, 0x6F, 0x6E, 
	0x6D, 0x65, 0x6E, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 
	0x73, 0x00, 0xEE, 0x00, 0x46, 0x72, 0x65, 0x65, 0x45, 0x6E, 
	0x76, 0x69, 0x72, 0x6F, 0x6E, 0x6D, 0x65, 0x6E, 0x74, 0x53, 
	0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x57, 0x00, 0x89, 0x03, 
	0x57, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x72, 0x54, 0x6F, 
	0x4D, 0x75, 0x6C, 0x74, 0x69, 0x42, 0x79, 0x74, 0x65, 0x00, 
	0x4F, 0x01, 0x47, 0x65, 0x74, 0x45, 0x6E, 0x76, 0x69, 0x72, 
	0x6F, 0x6E, 0x6D, 0x65, 0x6E, 0x74, 0x53, 0x74, 0x72, 0x69, 
	0x6E, 0x67, 0x73, 0x57, 0x00, 0x00, 0x19, 0x03, 0x53, 0x65, 
	0x74, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x43, 0x6F, 0x75, 
	0x6E, 0x74, 0x00, 0x00, 0x5E, 0x01, 0x47, 0x65, 0x74, 0x46, 
	0x69, 0x6C, 0x65, 0x54, 0x79, 0x70, 0x65, 0x00, 0xAF, 0x01, 
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 
	0x49, 0x6E, 0x66, 0x6F, 0x41, 0x00, 0x0A, 0x02, 0x48, 0x65, 
	0x61, 0x70, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6F, 0x79, 0x00, 
	0x08, 0x02, 0x48, 0x65, 0x61, 0x70, 0x43, 0x72, 0x65, 0x61, 
	0x74, 0x65, 0x00, 0x00, 0x78, 0x03, 0x56, 0x69, 0x72, 0x74, 
	0x75, 0x61, 0x6C, 0x46, 0x72, 0x65, 0x65, 0x00, 0x1F, 0x02, 
	0x49, 0x6E, 0x74, 0x65, 0x72, 0x6C, 0x6F, 0x63, 0x6B, 0x65, 
	0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6E, 0x67, 0x65, 0x00, 
	0x7D, 0x03, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6C, 0x51, 
	0x75, 0x65, 0x72, 0x79, 0x00, 0x00, 0x48, 0x02, 0x4C, 0x6F, 
	0x61, 0x64, 0x4C, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x41, 
	0x00, 0x00, 0x49, 0x03, 0x53, 0x6C, 0x65, 0x65, 0x70, 0x00, 
	0xF5, 0x00, 0x47, 0x65, 0x74, 0x41, 0x43, 0x50, 0x00, 0x00, 
	0x8B, 0x01, 0x47, 0x65, 0x74, 0x4F, 0x45, 0x4D, 0x43, 0x50, 
	0x00, 0x00, 0xFC, 0x00, 0x47, 0x65, 0x74, 0x43, 0x50, 0x49, 
	0x6E, 0x66, 0x6F, 0x00, 0x75, 0x03, 0x56, 0x69, 0x72, 0x74, 
	0x75, 0x61, 0x6C, 0x41, 0x6C, 0x6C, 0x6F, 0x63, 0x00, 0x00, 
	0x10, 0x03, 0x53, 0x65, 0x74, 0x46, 0x69, 0x6C, 0x65, 0x50, 
	0x6F, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x00, 0x00, 0x3A, 0x02, 
	0x4C, 0x43, 0x4D, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6E, 
	0x67, 0x41, 0x00, 0x00, 0x3B, 0x02, 0x4C, 0x43, 0x4D, 0x61, 
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x57, 0x00, 0x00, 
	0xB2, 0x01, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6E, 
	0x67, 0x54, 0x79, 0x70, 0x65, 0x41, 0x00, 0x00, 0xB5, 0x01, 
	0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x54, 
	0x79, 0x70, 0x65, 0x57, 0x00, 0x00, 0xE5, 0x00, 0x46, 0x6C, 
	0x75, 0x73, 0x68, 0x46, 0x69, 0x6C, 0x65, 0x42, 0x75, 0x66, 
	0x66, 0x65, 0x72, 0x73, 0x00, 0x00, 0x2C, 0x03, 0x53, 0x65, 
	0x74, 0x53, 0x74, 0x64, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 
	0x00, 0x00, 0x6C, 0x01, 0x47, 0x65, 0x74, 0x4C, 0x6F, 0x63, 
	0x61, 0x6C, 0x65, 0x49, 0x6E, 0x66, 0x6F, 0x41, 0x00, 0x00, 
	0x7B, 0x03, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6C, 0x50, 
	0x72, 0x6F, 0x74, 0x65, 0x63, 0x74, 0x00, 0x00, 0xBB, 0x01, 
	0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x49, 
	0x6E, 0x66, 0x6F, 0x00, 0x2E, 0x00, 0x43, 0x6C, 0x6F, 0x73, 
	0x65, 0x48, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x00, 0x4B, 0x45, 
	0x52, 0x4E, 0x45, 0x4C, 0x33, 0x32, 0x2E, 0x64, 0x6C, 0x6C, 
	0x00, 0x00, 0xD6, 0x02, 0x77, 0x73, 0x70, 0x72, 0x69, 0x6E, 
	0x74, 0x66, 0x57, 0x00, 0x55, 0x53, 0x45, 0x52, 0x33, 0x32, 
	0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x73, 0x01, 0x4C, 0x73, 
	0x61, 0x4F, 0x70, 0x65, 0x6E, 0x50, 0x6F, 0x6C, 0x69, 0x63, 
	0x79, 0x00, 0x46, 0x01, 0x4C, 0x6F, 0x6F, 0x6B, 0x75, 0x70, 
	0x41, 0x63, 0x63, 0x6F, 0x75, 0x6E, 0x74, 0x4E, 0x61, 0x6D, 
	0x65, 0x57, 0x00, 0x00, 0x80, 0x01, 0x4C, 0x73, 0x61, 0x52, 
	0x65, 0x6D, 0x6F, 0x76, 0x65, 0x41, 0x63, 0x63, 0x6F, 0x75, 
	0x6E, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x00, 0x00, 
	0x51, 0x01, 0x4C, 0x73, 0x61, 0x41, 0x64, 0x64, 0x41, 0x63, 
	0x63, 0x6F, 0x75, 0x6E, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 
	0x73, 0x00, 0x71, 0x01, 0x4C, 0x73, 0x61, 0x4E, 0x74, 0x53, 
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x6F, 0x57, 0x69, 0x6E, 
	0x45, 0x72, 0x72, 0x6F, 0x72, 0x00, 0xB0, 0x00, 0x44, 0x65, 
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 
	0x65, 0x6E, 0x74, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x00, 
	0x0A, 0x02, 0x52, 0x65, 0x70, 0x6F, 0x72, 0x74, 0x45, 0x76, 
	0x65, 0x6E, 0x74, 0x57, 0x00, 0x00, 0xFF, 0x01, 0x52, 0x65, 
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6E, 
	0x74, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x57, 0x00, 0x00, 
	0x54, 0x01, 0x4C, 0x73, 0x61, 0x43, 0x6C, 0x6F, 0x73, 0x65, 
	0x00, 0x00, 0x41, 0x44, 0x56, 0x41, 0x50, 0x49, 0x33, 0x32, 
	0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x51, 0x03, 0x54, 0x65, 
	0x72, 0x6D, 0x69, 0x6E, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6F, 
	0x63, 0x65, 0x73, 0x73, 0x00, 0x00, 0x3A, 0x01, 0x47, 0x65, 
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x50, 0x72, 
	0x6F, 0x63, 0x65, 0x73, 0x73, 0x00, 0x3D, 0x03, 0x53, 0x65, 
	0x74, 0x55, 0x6E, 0x68, 0x61, 0x6E, 0x64, 0x6C, 0x65, 0x64, 
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x46, 
	0x69, 0x6C, 0x74, 0x65, 0x72, 0x00, 0x99, 0x02, 0x51, 0x75, 
	0x65, 0x72, 0x79, 0x50, 0x65, 0x72, 0x66, 0x6F, 0x72, 0x6D, 
	0x61, 0x6E, 0x63, 0x65, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x65, 
	0x72, 0x00, 0xD5, 0x01, 0x47, 0x65, 0x74, 0x54, 0x69, 0x63, 
	0x6B, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x00, 0x00, 0x3E, 0x01, 
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x00, 0x00, 
	0x3B, 0x01, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 
	0x6E, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73, 0x49, 
	0x64, 0x00, 0xC0, 0x01, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 
	0x74, 0x65, 0x6D, 0x54, 0x69, 0x6D, 0x65, 0x41, 0x73, 0x46, 
	0x69, 0x6C, 0x65, 0x54, 0x69, 0x6D, 0x65, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x5C, 0x32, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 
	0x4E, 0xE6, 0x40, 0xBB, 0x02, 0x00, 0x00, 0x00, 0x30, 0x1C, 
	0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x04, 0x1C, 0x00, 0x01, 
	0x09, 0x00, 0x00, 0x00, 0xD8, 0x1B, 0x00, 0x01, 0x0A, 0x00, 
	0x00, 0x00, 0x40, 0x1B, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00, 
	0x14, 0x1B, 0x00, 0x01, 0x11, 0x00, 0x00, 0x00, 0xE4, 0x1A, 
	0x00, 0x01, 0x12, 0x00, 0x00, 0x00, 0xC0, 0x1A, 0x00, 0x01, 
	0x13, 0x00, 0x00, 0x00, 0x94, 0x1A, 0x00, 0x01, 0x18, 0x00, 
	0x00, 0x00, 0x5C, 0x1A, 0x00, 0x01, 0x19, 0x00, 0x00, 0x00, 
	0x34, 0x1A, 0x00, 0x01, 0x1A, 0x00, 0x00, 0x00, 0xFC, 0x19, 
	0x00, 0x01, 0x1B, 0x00, 0x00, 0x00, 0xC4, 0x19, 0x00, 0x01, 
	0x1C, 0x00, 0x00, 0x00, 0x9C, 0x19, 0x00, 0x01, 0x78, 0x00, 
	0x00, 0x00, 0x8C, 0x19, 0x00, 0x01, 0x79, 0x00, 0x00, 0x00, 
	0x7C, 0x19, 0x00, 0x01, 0x7A, 0x00, 0x00, 0x00, 0x6C, 0x19, 
	0x00, 0x01, 0xFC, 0x00, 0x00, 0x00, 0x68, 0x19, 0x00, 0x01, 
	0xFF, 0x00, 0x00, 0x00, 0x58, 0x19, 0x00, 0x01, 0x05, 0x00, 
	0x00, 0xC0, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1D, 0x00, 0x00, 0xC0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x96, 0x00, 0x00, 0xC0, 0x04, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x8D, 0x00, 0x00, 0xC0, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x00, 0x00, 0xC0, 
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x00, 
	0x00, 0xC0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x90, 0x00, 0x00, 0xC0, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x91, 0x00, 0x00, 0xC0, 0x08, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0xC0, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0xC0, 
	0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 
	0x8C, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x80, 0x0A, 
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x05, 0x93, 0x19, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3C, 0x1D, 0x00, 0x01, 0x2C, 0x1D, 0x00, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0x40, 0xA9, 0x00, 0x01, 0x00, 0x00, 
	0x00, 0x00, 0x40, 0xA9, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x08, 0x00, 0x00, 
	0x00, 0x00, 0xA4, 0x03, 0x00, 0x00, 0x60, 0x82, 0x79, 0x82, 
	0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0xDF, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA1, 0xA5, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x81, 0x9F, 0xE0, 0xFC, 0x00, 0x00, 
	0x00, 0x00, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00, 0x00, 0x00, 
	0xA8, 0x03, 0x00, 0x00, 0xC1, 0xA3, 0xDA, 0xA3, 0x20, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x81, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x40, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB5, 0x03, 
	0x00, 0x00, 0xC1, 0xA3, 0xDA, 0xA3, 0x20, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x81, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0xFE, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB6, 0x03, 0x00, 0x00, 
	0xCF, 0xA2, 0xE4, 0xA2, 0x1A, 0x00, 0xE5, 0xA2, 0xE8, 0xA2, 
	0x5B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xFE, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x7E, 0xA1, 0xFE, 
	0x00, 0x00, 0x00, 0x00, 0x51, 0x05, 0x00, 0x00, 0x51, 0xDA, 
	0x5E, 0xDA, 0x20, 0x00, 0x5F, 0xDA, 0x6A, 0xDA, 0x32, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0xD3, 0xD8, 0xDE, 
	0xE0, 0xF9, 0x00, 0x00, 0x31, 0x7E, 0x81, 0xFE, 0x00, 0x00, 
	0x00, 0x00, 0x94, 0x71, 0x00, 0x01, 0x94, 0x71, 0x00, 0x01, 
	0x94, 0x71, 0x00, 0x01, 0x94, 0x71, 0x00, 0x01, 0x94, 0x71, 
	0x00, 0x01, 0x94, 0x71, 0x00, 0x01, 0xB8, 0x1E, 0x00, 0x01, 
	0xBA, 0x20, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x00, 0x00, 
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
	0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
	0x05, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x06, 0x00, 
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 
	0x0C, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0C, 0x00, 
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 
	0x0A, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0B, 0x00, 
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 
	0x16, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x16, 0x00, 
	0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x11, 0x00, 
	0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x0D, 0x00, 
	0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
	0x41, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x43, 0x00, 
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 
	0x11, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x0D, 0x00, 
	0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 
	0x57, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x59, 0x00, 
	0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x6C, 0x00, 0x00, 0x00, 
	0x0D, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x20, 0x00, 
	0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 
	0x72, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x06, 0x00, 
	0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 
	0x0A, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x0A, 0x00, 
	0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 
	0x83, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x84, 0x00, 
	0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 
	0x29, 0x00, 0x00, 0x00, 0x9E, 0x00, 0x00, 0x00, 0x0D, 0x00, 
	0x00, 0x00, 0xA1, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
	0xA4, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xA7, 0x00, 
	0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0xB7, 0x00, 0x00, 0x00, 
	0x11, 0x00, 0x00, 0x00, 0xCE, 0x00, 0x00, 0x00, 0x02, 0x00, 
	0x00, 0x00, 0xD7, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 
	0x18, 0x07, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

unsigned DBOperProcess1(void *pParam)
{
	//AfxDaoInit();
	CFileDllTestDlg *p = (CFileDllTestDlg *) pParam;
	BOOL b = FALSE;
	CDaoDatabase m_DB;

	for (int i = 0; i < 10; i++)
	{
		b = IsEncryptDB(m_DB, DBFileName);
		TRACE("%d函数调用返回：%d\n", i + 1, b);
	}

	//AfxDaoTerm();

	return 0;
}

unsigned DBOperProcess2(void *pParam)
{
	CFileDllTestDlg *p = (CFileDllTestDlg *) pParam;
	BOOL b1 = FALSE, b2 = FALSE;
	CDaoDatabase m_DB;

	for (int i = 0; i < 1; i++)
	{
		//b1 = DeleteDBPassword(m_DB, DBFileName);
		b2 = DBEncrypt(m_DB, DBFileName);
		TRACE("%d函数调用返回：%d, %d\n", i + 1, b1, b2);
	}

	CString s;
	s.Format("%s", "1次函数调用结束\n");
	TRACE(s);

	p->m_Test.ShowTestMsg(s);

	//AfxDaoTerm();

	return 0;
}

BOOL DeleteDBPassword1(CDaoDatabase& m_DB, LPCSTR DBFileName)
{
	//AfxDaoInit();
	CString TempFile = DBFileName;
	CString Connect, OldConnect;
	BOOL b = FALSE;
	int pos = TempFile.ReverseFind('\\');
	TempFile = TempFile.Left(pos + 1);
	TempFile += "~tmp.mdb";

	OldConnect.Format(";PWD=%s", "gA)bC(7VwNuTa!wlL~AM");
	Connect = ";PWD=";
	try
	{
		DeleteFile(TempFile);
		m_DB.m_pWorkspace->CompactDatabase(DBFileName, TempFile, 
			Connect, 0, OldConnect);  
	}
	catch (CException* e)
	{
		e->Delete();
		return FALSE;
	}

	b = MoveFileEx(TempFile, DBFileName, MOVEFILE_REPLACE_EXISTING);
		
	//AfxDaoTerm();
	return b;
}

unsigned DBOperProcess3(void *pParam)
{
	AfxDaoInit();

	CString temp;

	CFileDllTestDlg *p = (CFileDllTestDlg *) pParam;
	BOOL b1 = FALSE, b2 = FALSE;
	temp = DBFileName;
	temp.Replace("CVTagDB", "~CVTagDB");
	CDaoDatabase m_DB;
	for (int i = 0; i < 1; i++)
	{
		CopyFile(DBFileName, temp, FALSE);
		b2 = DeleteDBPassword(m_DB, temp);
		TRACE("%d函数调用返回：%d\n", i + 1, b2);
	}

	CString s;
	s.Format("%s", "1次函数调用结束\n");
	TRACE(s);
	p->m_Test.ShowTestMsg(s);

	AfxDaoTerm();

	return 0;
}

unsigned DBOperProcess4(void *pParam)
{
	CFileDllTestDlg *p = (CFileDllTestDlg *) pParam;
	for (int i = 0; i < 10; i++)
	{
		BOOL b = ChangeDBPassword(p->m_DB, DBFileName, "gA)bC(7VwNuTa!wlL~AM");
		TRACE("%d函数调用返回：%d\n", i + 1, b);
	}

	TRACE("函数调用结束\n");

	return 0;
}

unsigned DBOperProcess5(void *pParam)
{
	//AfxDaoInit();
	pState->m_pDaoState;

	CFileDllTestDlg *p = (CFileDllTestDlg *) pParam;

	CString s;
	BOOL b = 0;

	for (int i = 0; i < 1; i++)
	{
		b = OpenDB(p->m_DB, DBFileName);
		s.Format("%d打开数据库:%d\n", i + 1, b);
		TRACE(s);
		p->m_DB.Close();
	}

	//AFX_MODULE_STATE* pState = AfxGetModuleState();
	pState->m_pDaoState;
	AfxDaoTerm();
	return 0;
}

unsigned DBOperProcess(void *pParam)
{
	AfxDaoInit();
	CFileDllTestDlg *p = (CFileDllTestDlg *) pParam;

	for (int i = 0; i < 20; i ++)
	{
		BOOL b = DeleteFile(DBFileName);
		p->CreateDB();
		TRACE("%d函数调用返回：%d\n", i + 1, b);
	}

	AfxDaoTerm();
	return 0;
}

/*
 =======================================================================================================================
    用于应用程序“关于”菜单项的 CAboutDlg 对话框
 =======================================================================================================================
 */
//unsigned LoopThread(void *pParam)
//{
//	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
//	CString			s;
//	int				t1 = 0;
//	int				t2 = 0;
//	DWORD			ProcessID = 0;
//	static WORD		LastMemerySize = 0;
//	WORD			MemerySize = 0;
//	CFileDllTestDlg *pThis = (CFileDllTestDlg *) pParam;
//	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
//
//	ProcessID = pThis->m_Test.GetProcessId();
//
//	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
//	int Loop = pThis->GetDlgItemInt(IDC_EDIT1);
//	int Count = 0;
//	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
//
//	pThis->m_Test.OKTimes = 0;
//	pThis->m_Test.ErrTimes = 0;
//
//	t1 = GetTickCount();
//	while(pThis->m_Test.LoopTestFlag == TRUE)
//	{
//		Count++;
//
//		pThis->OnBnClickedOk5();
//		pThis->OnBnClickedOk6();
//		pThis->OnBnClickedOk11();
//		pThis->OnBnClickedOk8();
//		pThis->OnBnClickedOk9();
//		pThis->OnBnClickedOk10();
//		pThis->OnBnClickedOk7();
//		pThis->OnBnClickedOk12();
//		pThis->OnBnClickedOk16();
//		pThis->OnBnClickedOk17();
//		pThis->OnBnClickedOk21();
//		pThis->OnBnClickedOk18();
//		pThis->OnBnClickedOk14();
//		pThis->OnBnClickedOk13();
//
//		MemerySize = pThis->m_Test.GetMemoryInfo(ProcessID);
//
//		s.Format("LOOP%d结束。内存占用%dK", Count, MemerySize);
//		pThis->m_Test.WriteEventLog(s);
//		pThis->m_Test.ShowTestMsg(s);
//
//		if(Loop == Count)
//		{
//			pThis->m_Test.LoopTestFlag = FALSE;
//		}
//
//		Sleep(1);
//	}
//
//	t2 = GetTickCount();
//
//	/*~~~~~~~~~~~~~~~*/
//	int Time = t2 - t1;
//	/*~~~~~~~~~~~~~~~*/
//
//	s.Format
//	(
//		"%d次测试完毕，耗时%d秒。通过项目%d，失败项目%d。",
//		Count,
//		Time / 1000,
//		pThis->m_Test.OKTimes,
//		pThis->m_Test.ErrTimes
//	);
//
//	/*
//	 * pThis->DeleteFiles("C:\\RECYCLER\\*.*", NULL, FALSE, FALSE);
//	 * *ProcessID = pThis->m_Test.GetProcessId();
//	 * *MemerySize = pThis->m_Test.GetMemoryInfo(ProcessID);
//	 * *WORD a = 0;
//	 * *if (MemerySize >= LastMemerySize) ;
//	 * { ;
//	 * a = MemerySize - LastMemerySize;
//	 * *s.Format("%d次测试完毕，耗时%d秒。通过项目%d，失败项目%d。内存占用%dK,
//	 * 增量%dK。", ;
//	 * Count, Time/1000, pThis->m_Test.OKTimes, pThis->m_Test.ErrTimes, MemerySize, a);
//	 * *} ;
//	 * else ;
//	 * { ;
//	 * a = LastMemerySize - MemerySize;
//	 * * s.Format("%d次测试完毕，耗时%d秒。通过项目%d，失败项目%d。内存占用%dK,
//	 * 增量-%dK。", ;
//	 * Count, Time/1000, pThis->m_Test.OKTimes, pThis->m_Test.ErrTimes, MemerySize, a);
//	 * *} ;
//	 * LastMemerySize = MemerySize;
//	 */
//	pThis->m_Test.ShowTestMsg(s);
//
//	return 1;
//}
//
class CAboutDlg :
	public CDialog
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	CAboutDlg();

	/* 对话框数据 */
	enum { IDD = IDD_ABOUTBOX };

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual void	DoDataExchange(CDataExchange *pDX); /* DDX/DDV 支持 */

/*
 -----------------------------------------------------------------------------------------------------------------------
    实现
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	DECLARE_MESSAGE_MAP()
};

/*
 =======================================================================================================================
 =======================================================================================================================
 */

CAboutDlg::CAboutDlg() :
	CDialog(CAboutDlg::IDD)
{
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CAboutDlg::DoDataExchange(CDataExchange *pDX)
{
	CDialog::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
END_MESSAGE_MAP()

/*
 =======================================================================================================================
    CFileDllTestDlg 对话框
 =======================================================================================================================
 */
CFileDllTestDlg::CFileDllTestDlg(CWnd *pParent /* NULL */ ) :
	CDialog(CFileDllTestDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
	StopFlag = TRUE;
	bOnKey = FALSE;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::DoDataExchange(CDataExchange *pDX)
{
	CDialog::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_LIST1, m_List);
}

BEGIN_MESSAGE_MAP(CFileDllTestDlg, CDialog)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
//}}AFX_MSG_MAP
	ON_BN_CLICKED(IDOK5, &CFileDllTestDlg::OnBnClickedOk5)
	//ON_BN_CLICKED(IDOK, &CFileDllTestDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDCANCEL, &CFileDllTestDlg::OnBnClickedCancel)
	ON_BN_CLICKED(IDOK6, &CFileDllTestDlg::OnBnClickedOk6)
	ON_BN_CLICKED(IDOK8, &CFileDllTestDlg::OnBnClickedOk8)
	ON_BN_CLICKED(IDOK9, &CFileDllTestDlg::OnBnClickedOk9)
	ON_BN_CLICKED(IDOK10, &CFileDllTestDlg::OnBnClickedOk10)
	ON_BN_CLICKED(IDOK11, &CFileDllTestDlg::OnBnClickedOk11)
	ON_BN_CLICKED(IDOK7, &CFileDllTestDlg::OnBnClickedOk7)
	ON_BN_CLICKED(IDOK12, &CFileDllTestDlg::OnBnClickedOk12)
	ON_BN_CLICKED(IDOK16, &CFileDllTestDlg::OnBnClickedOk16)
	ON_BN_CLICKED(IDOK17, &CFileDllTestDlg::OnBnClickedOk17)
	ON_BN_CLICKED(IDOK21, &CFileDllTestDlg::OnBnClickedOk21)
	ON_BN_CLICKED(IDOK18, &CFileDllTestDlg::OnBnClickedOk18)
	ON_BN_CLICKED(IDOK14, &CFileDllTestDlg::OnBnClickedOk14)
	ON_BN_CLICKED(IDOK13, &CFileDllTestDlg::OnBnClickedOk13)
	ON_BN_CLICKED(IDOK19, &CFileDllTestDlg::OnBnClickedOk19)
	ON_BN_CLICKED(IDOK20, &CFileDllTestDlg::OnBnClickedOk20)
	ON_BN_CLICKED(IDOK25, &CFileDllTestDlg::OnBnClickedOk25)
	ON_BN_CLICKED(IDOK26, &CFileDllTestDlg::OnBnClickedOk26)
	ON_BN_CLICKED(IDOK27, &CFileDllTestDlg::OnBnClickedOk27)
	ON_BN_CLICKED(IDOK28, &CFileDllTestDlg::OnBnClickedOk28)
	ON_BN_CLICKED(IDOK29, &CFileDllTestDlg::OnBnClickedOk29)
	ON_BN_CLICKED(IDOK30, &CFileDllTestDlg::OnBnClickedOk30)
	ON_BN_CLICKED(IDOK31, &CFileDllTestDlg::OnBnClickedOk31)
	ON_BN_CLICKED(IDOK32, &CFileDllTestDlg::OnBnClickedOk32)
	ON_BN_CLICKED(IDOK33, &CFileDllTestDlg::OnBnClickedOk33)
	ON_WM_CLOSE()
	//ON_BN_CLICKED(IDCANCEL2, &CFileDllTestDlg::OnBnClickedCancel2)
	ON_BN_CLICKED(IDC_BUTTON2, &CFileDllTestDlg::OnBnClickedButton2)
	ON_BN_CLICKED(IDOK22, &CFileDllTestDlg::OnBnClickedOk22)
	ON_BN_CLICKED(IDOK34, &CFileDllTestDlg::OnBnClickedOk34)
	ON_BN_CLICKED(IDOK35, &CFileDllTestDlg::OnBnClickedOk35)
	ON_BN_CLICKED(IDOK36, &CFileDllTestDlg::OnBnClickedOk36)
	ON_BN_CLICKED(IDOK23, &CFileDllTestDlg::OnBnClickedOk23)
	ON_BN_CLICKED(IDOK24, &CFileDllTestDlg::OnBnClickedOk24)
	ON_BN_CLICKED(IDOK37, &CFileDllTestDlg::OnBnClickedOk37)
	ON_BN_CLICKED(IDOK38, &CFileDllTestDlg::OnBnClickedOk38)
	ON_BN_CLICKED(IDC_BUTTON3, &CFileDllTestDlg::OnBnClickedButton3)
	ON_BN_CLICKED(IDC_BUTTON4, &CFileDllTestDlg::OnBnClickedButton4)
	ON_BN_CLICKED(IDC_BUTTON5, &CFileDllTestDlg::OnBnClickedButton5)
	ON_BN_CLICKED(IDC_BUTTON6, &CFileDllTestDlg::OnBnClickedButton6)
	ON_BN_CLICKED(IDC_BUTTON7, &CFileDllTestDlg::OnBnClickedButton7)
	ON_BN_CLICKED(IDC_BUTTON8, &CFileDllTestDlg::OnBnClickedButton8)
	ON_BN_CLICKED(IDC_BUTTON9, &CFileDllTestDlg::OnBnClickedButton9)
	ON_BN_CLICKED(IDC_BUTTON10, &CFileDllTestDlg::OnBnClickedButton10)
	ON_BN_CLICKED(IDOK15, &CFileDllTestDlg::OnBnClickedOk15)
	ON_BN_CLICKED(IDC_BUTTON11, &CFileDllTestDlg::OnBnClickedButton11)
	ON_BN_CLICKED(IDC_BUTTON12, &CFileDllTestDlg::OnBnClickedButton12)
	ON_BN_CLICKED(IDC_BUTTON13, &CFileDllTestDlg::OnBnClickedButton13)
	ON_BN_CLICKED(IDC_BUTTON14, &CFileDllTestDlg::OnBnClickedButton14)
	ON_BN_CLICKED(IDC_BUTTON15, &CFileDllTestDlg::OnBnClickedButton15)
	ON_BN_CLICKED(IDC_BUTTON16, &CFileDllTestDlg::OnBnClickedButton16)
	ON_BN_CLICKED(IDC_BUTTON17, &CFileDllTestDlg::OnBnClickedButton17)
	ON_BN_CLICKED(IDC_BUTTON18, &CFileDllTestDlg::OnBnClickedButton18)
	ON_BN_CLICKED(IDC_BUTTON19, &CFileDllTestDlg::OnBnClickedButton19)
	ON_BN_CLICKED(IDC_BUTTON20, &CFileDllTestDlg::OnBnClickedButton20)
	ON_BN_CLICKED(IDC_BUTTON21, &CFileDllTestDlg::OnBnClickedButton21)
	ON_BN_CLICKED(IDC_BUTTON22, &CFileDllTestDlg::OnBnClickedButton22)
	//ON_BN_CLICKED(IDC_BUTTON23, &CFileDllTestDlg::OnBnClickedButton23)
	//ON_BN_CLICKED(IDC_BUTTON24, &CFileDllTestDlg::OnBnClickedButton24)
	//ON_BN_CLICKED(IDC_BUTTON25, &CFileDllTestDlg::OnBnClickedButton25)
	//ON_BN_CLICKED(IDC_BUTTON26, &CFileDllTestDlg::OnBnClickedButton26)
	//ON_BN_CLICKED(IDC_BUTTON27, &CFileDllTestDlg::OnBnClickedButton27)
	//ON_BN_CLICKED(IDC_BUTTON28, &CFileDllTestDlg::OnBnClickedButton28)
	//ON_BN_CLICKED(IDC_BUTTON29, &CFileDllTestDlg::OnBnClickedButton29)
	//ON_BN_CLICKED(IDC_BUTTON30, &CFileDllTestDlg::OnBnClickedButton30)
	//ON_BN_CLICKED(IDC_BUTTON32, &CFileDllTestDlg::OnBnClickedButton32)
	//ON_BN_CLICKED(IDC_BUTTON33, &CFileDllTestDlg::OnBnClickedButton33)
	//ON_BN_CLICKED(IDC_BUTTON34, &CFileDllTestDlg::OnBnClickedButton34)
	//ON_BN_CLICKED(IDC_BUTTON31, &CFileDllTestDlg::OnBnClickedButton31)
	//ON_BN_CLICKED(IDC_BUTTON35, &CFileDllTestDlg::OnBnClickedButton35)
	//ON_BN_CLICKED(IDC_BUTTON36, &CFileDllTestDlg::OnBnClickedButton36)
	//ON_BN_CLICKED(IDC_BUTTON37, &CFileDllTestDlg::OnBnClickedButton37)
	ON_BN_CLICKED(IDC_BUTTON38, &CFileDllTestDlg::OnBnClickedButton38)
	//ON_BN_CLICKED(IDC_BUTTON39, &CFileDllTestDlg::OnBnClickedButton39)
	//ON_BN_CLICKED(IDC_BUTTON40, &CFileDllTestDlg::OnBnClickedButton40)
	//ON_BN_CLICKED(IDC_BUTTON41, &CFileDllTestDlg::OnBnClickedButton41)
	//ON_BN_CLICKED(IDC_BUTTON42, &CFileDllTestDlg::OnBnClickedButton42)
	//ON_BN_CLICKED(IDC_BUTTON45, &CFileDllTestDlg::OnBnClickedButton45)
	//ON_BN_CLICKED(IDC_BUTTON46, &CFileDllTestDlg::OnBnClickedButton46)
	//ON_BN_CLICKED(IDC_BUTTON47, &CFileDllTestDlg::OnBnClickedButton47)
	//ON_BN_CLICKED(IDC_BUTTON48, &CFileDllTestDlg::OnBnClickedButton48)
	//ON_BN_CLICKED(IDC_BUTTON49, &CFileDllTestDlg::OnBnClickedButton49)
	//ON_BN_CLICKED(IDC_BUTTON50, &CFileDllTestDlg::OnBnClickedButton50)
	//ON_BN_CLICKED(IDC_BUTTON51, &CFileDllTestDlg::OnBnClickedButton51)
	//ON_BN_CLICKED(IDC_BUTTON52, &CFileDllTestDlg::OnBnClickedButton52)
	//ON_BN_CLICKED(IDC_BUTTON53, &CFileDllTestDlg::OnBnClickedButton53)
	//ON_BN_CLICKED(IDC_BUTTON54, &CFileDllTestDlg::OnBnClickedButton54)
	ON_BN_CLICKED(IDC_BUTTON56, &CFileDllTestDlg::OnBnClickedButton56)
	ON_BN_CLICKED(IDC_BUTTON55, &CFileDllTestDlg::OnBnClickedButton55)
	ON_BN_CLICKED(IDC_BUTTON57, &CFileDllTestDlg::OnBnClickedButton57)
	//ON_BN_CLICKED(IDC_BUTTON43, &CFileDllTestDlg::OnBnClickedButton43)
	//ON_BN_CLICKED(IDC_BUTTON58, &CFileDllTestDlg::OnBnClickedButton58)
	//ON_BN_CLICKED(IDC_BUTTON59, &CFileDllTestDlg::OnBnClickedButton59)
	ON_BN_CLICKED(IDC_BUTTON44, &CFileDllTestDlg::OnBnClickedButton44)
	ON_BN_CLICKED(IDC_BUTTON60, &CFileDllTestDlg::OnBnClickedButton60)
    ON_BN_CLICKED(IDC_BUTTON61, &CFileDllTestDlg::OnBnClickedButton61)
    ON_BN_CLICKED(IDC_BUTTON62, &CFileDllTestDlg::OnBnClickedButton62)
	ON_BN_CLICKED(IDC_BUTTON63, &CFileDllTestDlg::OnBnClickedButton63)
	ON_BN_CLICKED(IDC_BUTTON64, &CFileDllTestDlg::OnBnClickedButton64)
	ON_BN_CLICKED(IDC_BUTTON65, &CFileDllTestDlg::OnBnClickedButton65)
	ON_BN_CLICKED(IDC_BUTTON66, &CFileDllTestDlg::OnBnClickedButton66)
	ON_BN_CLICKED(IDC_BUTTON67, &CFileDllTestDlg::OnBnClickedButton67)
	ON_BN_CLICKED(IDC_BUTTON68, &CFileDllTestDlg::OnBnClickedButton68)
	ON_BN_CLICKED(IDC_BUTTON69, &CFileDllTestDlg::OnBnClickedButton69)
	ON_BN_CLICKED(IDC_BUTTON70, &CFileDllTestDlg::OnBnClickedButton70)
	ON_BN_CLICKED(IDC_BUTTON71, &CFileDllTestDlg::OnBnClickedButton71)
	END_MESSAGE_MAP()

/*
 =======================================================================================================================
    CFileDllTestDlg 消息处理程序
 =======================================================================================================================
 */
BOOL CFileDllTestDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	/*
	 * 将“关于...”菜单项添加到系统菜单中。 ;
	 * IDM_ABOUTBOX 必须在系统命令范围内。
	 */
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	CMenu	*pSysMenu = GetSystemMenu(FALSE);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(pSysMenu != NULL)
	{
		/*~~~~~~~~~~~~~~~~~*/
		CString strAboutMenu;
		/*~~~~~~~~~~~~~~~~~*/

		strAboutMenu.LoadString(IDS_ABOUTBOX);
		if(!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	/*
	 * 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动 ;
	 * 执行此操作
	 */
	SetIcon(m_hIcon, TRUE);		/* 设置大图标 */
	SetIcon(m_hIcon, FALSE);	/* 设置小图标 */

	/*
	 * TODO: 在此添加额外的初始化代码 ;
	 * OnBnClickedOk();
	 * *hModule=::LoadLibrary("CVFileManager.dll");
	 * ;
	 * LoadDll();
	 */
	m_Test.LogFileName = "C:\\Log.txt";
	m_Test.m_TestList = &m_List;

	m_List.InsertColumn(0, "测试结果", LVCFMT_CENTER, 450, -1);

	pState = AfxGetModuleState();

	//m_DB = new CDaoDatabase;

#ifdef _DEBUG
	oldMemState.Checkpoint();
#endif
	return TRUE;				/* 除非将焦点设置到控件，否则返回 TRUE */
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		/*~~~~~~~~~~~~~~~~~*/
		CAboutDlg	dlgAbout;
		/*~~~~~~~~~~~~~~~~~*/

		dlgAbout.DoModal();
	}
	else
	{
		CDialog::OnSysCommand(nID, lParam);
	}
}

/*
 =======================================================================================================================
    如果向对话框添加最小化按钮，则需要下面的代码 ;
    来绘制该图标。对于使用文档/视图模型的 MFC 应用程序， ;
    这将由框架自动完成。
 =======================================================================================================================
 */
void CFileDllTestDlg::OnPaint()
{
	if(IsIconic())
	{
		/*~~~~~~~~~~~~~~~~~*/
		CPaintDC	dc(this);	/* 用于绘制的设备上下文 */
		/*~~~~~~~~~~~~~~~~~*/

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM> (dc.GetSafeHdc()), 0);

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		/* 使图标在工作矩形中居中 */
		int		cxIcon = GetSystemMetrics(SM_CXICON);
		int		cyIcon = GetSystemMetrics(SM_CYICON);
		CRect	rect;
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		GetClientRect(&rect);

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		/* 绘制图标 */
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialog::OnPaint();
	}
}

/*
 =======================================================================================================================
    当用户拖动最小化窗口时系统调用此函数取得光标显示。 ;
 =======================================================================================================================
 */
HCURSOR CFileDllTestDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk5()
{
	/* TODO: Add your control notification handler code here */

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef _DEBUG
	CMemoryState	oldMemState, newMemState, diffMemState;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	oldMemState.Checkpoint();
#endif

	/*~~~~~~~~~~~~~~~~~~~~~~*/
	int		ret = 0;
	BOOL	TestResult = TRUE;
	char	Src[1024] = { 0 };
	char	Dst[1024] = { 0 };
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	strcpy_s(Src, "C:\\Temp\\File Copy Src\\");
	strcpy_s(Dst, "C:\\temp\\File Copy Dst\\");
	m_Test.CreateDirectorys(Src);

	strcat_s(Src, "File.txt");
	m_Test.MyCreateFile(Src, 1024 * 100);
	strcat_s(Dst, "File.txt");

	/* 1 */
	ret = FileCopy(Src, Dst, FALSE);
	if(ret == 0)
	{
		TestResult = FALSE;
	}

	/* 2 */
	ret = FileCopy(Src, Dst, TRUE);
	if(ret == 1)
	{
		TestResult = FALSE;
	}

	/*~~~~~~~~~~~~~~~~~~~~~~~~*/
	BOOL	b = DeleteFile(Dst);
	/*~~~~~~~~~~~~~~~~~~~~~~~~*/

	ret = FileCopy(Src, Dst, FALSE);
	if(ret == 0)
	{
		TestResult = FALSE;
	}

	strcpy_s(Src, "C:\\Temp\\Src 中文路径\\");
	strcpy_s(Dst, "C:\\temp\\中文路径 Dst\\");

	m_Test.CreateDirectorys(Src);
	strcat_s(Src, "File.txt");
	m_Test.MyCreateFile(Src, 1024 * 100);
	strcat_s(Dst, "File.txt");

	ret = FileCopy(Src, Dst, FALSE);
	if(ret == 0)
	{
		TestResult = FALSE;
	}

	ret = FileCopy("", "", FALSE);
	if(ret != -1)
	{
		TestResult = FALSE;
	}

	m_Test.TestResult("FileCopy", TestResult);

#ifdef _DEBUG
	newMemState.Checkpoint();
	if(diffMemState.Difference(oldMemState, newMemState))
	{
		TRACE("Memory Leaked Here! ! !\n\n");
		diffMemState.DumpStatistics();
	}
#endif
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
//void CFileDllTestDlg::OnBnClickedOk()
//{
//	/*
//	 * TODO: Add your control notification handler code here ;
//	 * OnOK();
//	 */
//	m_Test.LoopTestFlag = TRUE;
//	StopFlag = TRUE;
//
//	/*
//	 * m_List.DeleteAllItems();
//	 */
//	DeleteFile(m_Test.LogFileName);
//
//	AfxBeginThread((AFX_THREADPROC) LoopThread, this, THREAD_PRIORITY_NORMAL);
//
//	/*
//	 * hModule=::LoadLibrary("CVFileManager.dll");
//	 */
//}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedCancel()
{
	/*
	 * TODO: Add your control notification handler code here ;
	 * FreeDll();
	 */
	//pState = AfxGetModuleState();
	pState->m_pDaoState;
	//delete m_DB;
	//AfxDaoTerm();
	OnCancel();
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk6()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: Add your control notification handler code here */
	BOOL	TestResult = TRUE;
	char	strSrc[1024];
	char	strDst[1024];
	int		ret = 0;
	size_t	Len = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	//DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	ret = CopyFiles("C:\\Temp\\*.*\0", "D:\\Temp\0", m_hWnd, FALSE, FALSE);

	memset(strSrc, 0, sizeof(strSrc));
	strcpy_s(strSrc, "C:\\Temp\\Copy Files Src\\File.txt\0");
	Len = strlen(strSrc);
	memset(strSrc + Len, 0, sizeof(strSrc) - Len);
	strcpy_s(strDst, "C:\\Temp\\Copy Files Dst\0");
	Len = strlen(strDst);
	memset(strDst + Len, 0, sizeof(strDst) - Len);
	m_Test.CreateDirectorys("C:\\Temp\\Copy Files Src\\");
	m_Test.MyCreateFile(strSrc, 1024 * 100);

	ret = CopyFiles(strSrc, strDst, m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	strcpy_s(strSrc, "C:\\Temp\\Copy Files Src中文路径\\File.txt\0");
	Len = strlen(strSrc);
	memset(strSrc + Len, 0, sizeof(strSrc) - Len);
	strcpy_s(strDst, "C:\\Temp\\中文路径 Copy Files Dst\0");
	Len = strlen(strDst);
	memset(strDst + Len, 0, sizeof(strDst) - Len);
	m_Test.CreateDirectorys("C:\\Temp\\Copy Files Src中文路径\\");
	m_Test.MyCreateFile(strSrc, 1024 * 100);
	ret = CopyFiles(strSrc, strDst, m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	char	Src[] = "C:\\Temp\\Src Src 中文路径\\File.txt\0C:\\Temp\\Src Src 中文路径\\File1.txt\0C:\\Temp\\Src Src 中文路径\\File2.txt\0C:\\Temp\\Src Src 中文路径\\File3.txt\0C:\\Temp\\Src Src 中文路径\\File4.txt\0";
	char	Dst[] = "C:\\Temp\\中文路径 Dst Dst\0";
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	m_Test.CreateDirectorys("C:\\Temp\\Src Src 中文路径\\");
	m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File1.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File2.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File3.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File4.txt", 1024 * 100);
	ret = CopyFiles(Src, Dst, m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	strcpy_s(strSrc, "C:\\Temp\\Src Src 中文路径\\*.txt\0");
	Len = strlen(strSrc);
	memset(strSrc + Len, 0, sizeof(strSrc) - Len);
	strcpy_s(strDst, "C:\\Temp\\中文路径 Dst Dst\0");
	Len = strlen(strDst);
	memset(strDst + Len, 0, sizeof(strDst) - Len);
	ret = CopyFiles(strSrc, strDst, m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	strcpy_s(strSrc, "C:\\Temp\\Src Src 中文路径\\*.*\0");
	Len = strlen(strSrc);
	memset(strSrc + Len, 0, sizeof(strSrc) - Len);
	strcpy_s(strDst, "C:\\Temp\\中文路径 Dst Dst\0");
	Len = strlen(strDst);
	memset(strDst + Len, 0, sizeof(strDst) - Len);
	ret = CopyFiles(strSrc, strDst, m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	ret = CopyFiles("", "", m_hWnd, FALSE, FALSE);
	if(ret != -1)
	{
		TestResult = FALSE;
	}

	strcpy_s(strSrc, "C:\\Temp\\Src Src 中文路径\0");
	Len = strlen(strSrc);
	memset(strSrc + Len, 0, sizeof(strSrc) - Len);
	strcpy_s(strDst, "C:\\Temp\\中文路径 Dst Dst\\Src Src 中文路径\0");
	Len = strlen(strDst);
	memset(strDst + Len, 0, sizeof(strDst) - Len);
	ret = CopyFiles(strSrc, strDst, m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	strcpy_s(strSrc, "C:\\Temp\\Src Src 中文路径\0");
	Len = strlen(strSrc);
	memset(strSrc + Len, 0, sizeof(strSrc) - Len);
	strcpy_s(strDst, "D:\\temp\\Src Src 中文路径\0");
	Len = strlen(strDst);
	memset(strDst + Len, 0, sizeof(strDst) - Len);
	ret = CopyFiles(strSrc, strDst, m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	m_Test.TestResult("CopyFiles", TestResult);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk8()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: Add your control notification handler code here */
	int		ret = 0;
	BOOL	TestResult = TRUE;
	char    Path[1024] = "D:\\Temp\\Src Src 中文路径\\";
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	m_Test.CreateDirectorys(Path);
	m_Test.MyCreateFile("D:\\Temp\\Src Src 中文路径\\File.txt", 1024 * 100);
	ret = FileMove("D:\\Temp\\Src Src 中文路径\\File.txt", "C:\\Temp\\中文路径 Dst Dst\\File2.txt", 1);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	ret = FileMove("", "", 1);
	if(ret != -1)
	{
		TestResult = FALSE;
	}

	m_Test.TestResult("FileMove", TestResult);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk9()
{
	/* TODO: Add your control notification handler code here */

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef _DEBUG
	CMemoryState	oldMemState, newMemState, diffMemState;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	oldMemState.Checkpoint();
#endif

	/*~~~~~~~~~~~~~~~~~~~~~~*/
	BOOL	ret = FALSE;
	BOOL	TestResult = TRUE;
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	m_Test.CreateDirectorys("C:\\Temp\\Src 中文路径\\");
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File.txt", 1024 * 100);
	ret = MoveFiles("C:\\Temp\\Src 中文路径\\File.txt", "C:\\Temp\\Dst 中文路径\\File.txt", m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	/*
	 * char strSrc[]="C:\\Temp\\Src Src 中文路径\\*.txt\0";
	 * *char strDst[]="C:\\Temp\\中文路径 Dst Dst\0";
	 */
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File1.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File2.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File3.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File4.txt", 1024 * 100);
	ret = MoveFiles("C:\\Temp\\Src 中文路径\\*.txt\0", "C:\\Temp\\Dst 中文路径\0", m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File1.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File2.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File3.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File4.txt", 1024 * 100);
	ret = MoveFiles
		(
			"C:\\Temp\\Src 中文路径\\File.txt\0C:\\Temp\\Src 中文路径\\File1.txt\0C:\\Temp\\Src 中文路径\\File2.txt\0C:\\Temp\\Src 中文路径\\File3.txt\0C:\\Temp\\Src 中文路径\\File4.txt\0",
			"C:\\Temp\\Dst 中文路径\0",
			m_hWnd,
			FALSE,
			FALSE
		);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File1.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File2.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File3.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File4.txt", 1024 * 100);
	ret = MoveFiles("C:\\Temp\\Src 中文路径\\*.*\0", "C:\\Temp\\Dst 中文路径\0", m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File1.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File2.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File3.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File4.txt", 1024 * 100);
	ret = MoveFiles("C:\\Temp\\Src 中文路径\0", "C:\\Temp\\Dst 中文路径\\Src 中文路径\0", m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	m_Test.CreateDirectorys("C:\\Temp\\Src 中文路径\\");
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File1.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File2.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File3.txt", 1024 * 100);
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File4.txt", 1024 * 100);
	ret = MoveFiles("C:\\Temp\\Src 中文路径\0", "D:\\temp\\Dst 中文路径\0", m_hWnd, FALSE, FALSE);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	ret = MoveFiles("", "", m_hWnd, FALSE, FALSE);
	if(ret != -1)
	{
		TestResult = FALSE;
	}

	m_Test.TestResult("FileMoves", TestResult);
#ifdef _DEBUG
	newMemState.Checkpoint();
	if(diffMemState.Difference(oldMemState, newMemState))
	{
		TRACE("Memory Leaked Here! ! !\n\n");
		diffMemState.DumpStatistics();
	}
#endif
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk10()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: Add your control notification handler code here */
	BOOL	TestResult = TRUE;
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	BOOL bFileDel = FileDelete("c:\\CoreView\\FuncExec\\CVEventExec\\Configure\\Sound\\Windows XP 启动.wav");

	DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	m_Test.CreateDirectorys("C:\\Temp\\Src 中文路径\\");
	m_Test.MyCreateFile("C:\\Temp\\Src 中文路径\\File.txt", 1024 * 100);

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	BOOL	ret = FileDelete("C:\\Temp\\Src 中文路径\\File.txt");
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(ret != 1)
	{
		TestResult = FALSE;
	}

	ret = FileDelete("");
	if(ret != -1)
	{
		TestResult = FALSE;
	}

	m_Test.TestResult("FileDelete", TestResult);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk11()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: Add your control notification handler code here */
	char	strSrc[1024] = { 0 };
	size_t	Len = 0;
	BOOL	ret = 0;
	BOOL	TestResult = TRUE;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~*/

	DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	//strcpy_s(strSrc, "C:\\Temp\\Src Src 中文路径\\File.txt\0");
	//Len = strlen(strSrc);
	//memset(strSrc + Len, 0, sizeof(strSrc) - Len);
	//m_Test.CreateDirectorys("C:\\Temp\\Src Src 中文路径\\");
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File.txt", 1024 * 100);

	//ret = DeleteFiles(strSrc, m_hWnd, FALSE, TRUE);
	//if(ret != 1)
	//{
	//	TestResult = FALSE;
	//}

	///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	//char	Src[] = "C:\\Temp\\Src Src 中文路径\\File.txt\0C:\\Temp\\Src Src 中文路径\\File1.txt\0C:\\Temp\\Src Src 中文路径\\File2.txt\0C:\\Temp\\Src Src 中文路径\\File3.txt\0C:\\Temp\\Src Src 中文路径\\File4.txt\0";
	///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File1.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File2.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File3.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File4.txt", 1024 * 100);

	//ret = DeleteFiles(Src, m_hWnd, FALSE, TRUE);
	//if(ret != 1)
	//{
	//	TestResult = FALSE;
	//}

	///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	///*
	// * char strSrc[]="C:\\Temp\\Src Src 中文路径\\*.txt\0";
	// */
	//char	Src1[] = "C:\\Temp\\Src Src 中文路径\\File.txt\0C:\\Temp\\Src Src 中文路径\\File1.txt\0C:\\Temp\\Src Src 中文路径\\File2.txt\0C:\\Temp\\Src Src 中文路径\\File3.txt\0C:\\Temp\\Src Src 中文路径\\File4.txt\0";
	///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File1.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File2.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File3.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File4.txt", 1024 * 100);
	//ret = DeleteFiles(Src1, m_hWnd, FALSE, TRUE);
	//if(ret != 1)
	//{
	//	TestResult = FALSE;
	//}

	///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	//char	strSrc2[] = "C:\\Temp\\Src Src 中文路径\\*.*\0";
	///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File1.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File2.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File3.txt", 1024 * 100);
	//m_Test.MyCreateFile("C:\\Temp\\Src Src 中文路径\\File4.txt", 1024 * 100);
	//ret = DeleteFiles(strSrc2, m_hWnd, FALSE, TRUE);
	//if(ret != 1)
	//{
	//	TestResult = FALSE;
	//}
                                                       
	//m_Test.TestResult("DeleteFiles", TestResult);

	//char  strSrc3[256] = "C:\\coreview\\SystemExec\\Convert Data\\TagBuilder\\Temp";
	//ret = DeleteFiles(strSrc3, m_hWnd, FALSE, FALSE);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk7()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: Add your control notification handler code here */
	BOOL	TestResult = TRUE;
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	int ret = CreateDirectorys("C:\\Temp\\-12345678");

	ret = CreateDirectorys("C:\\Temp\\CV");

	//DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	//int ret = CreateDirectorys("C:\\Temp\\aaaa aaaa\\bbbb bbbb\\cccc cccc\\dddd dddd\\eeee eeee");
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	//if(ret != 1)
	//{
	//	TestResult = FALSE;
	//}

	//ret = CreateDirectorys("C:\\Temp\\中文1 aaaa\\bbbb 中文2\\中文3 cccc\\dddd 中文4\\中文5 eeee");
	//if(ret != 1)
	//{
	//	TestResult = FALSE;
	//}

	//ret = CreateDirectorys("");
	//if(ret != -1)
	//{
	//	TestResult = FALSE;
	//}

	//ret = CreateDirectorys("\\\\192.168.0.148\\d$\\远程路径创建测试01\\测试02\\测试03\\测试04\\测试05");
	//if(ret != 1)
	//{
	//	TestResult = FALSE;
	//}

	m_Test.TestResult("CreateDirectorys", TestResult);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk12()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: Add your control notification handler code here */
	BOOL	TestResult = TRUE;
	BOOL	ret = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	char	strSrc[] = "C:\\Temp\\中文路径 Dst";
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	CreateDirectorys(strSrc);
	m_Test.MyCreateFile("C:\\Temp\\中文路径 Dst\\File.txt", 1024 * 100);

	ret = SearchFile("File", ".txt", strSrc);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	ret = SearchFile("", "", "");
	if(ret != -1)
	{
		TestResult = FALSE;
	}

	ret = SearchFile("browseui", ".dll", NULL);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	ret = SearchFile("browseui-", ".dll", NULL);
	if(ret != 0)
	{
		TestResult = FALSE;
	}

	m_Test.TestResult("SearchFile", TestResult);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk16()
{
	/* TODO: Add your control notification handler code here */

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef _DEBUG
	CMemoryState	oldMemState, newMemState, diffMemState;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	oldMemState.Checkpoint();
#endif

	/*~~~~~~~~~~~~~~~~~~~~~~*/
	BOOL	TestResult = TRUE;
	long	FileSize = 16;
	char	*pBuf = NULL;
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	pBuf = new char[FileSize];

	memset(pBuf, 0x01, FileSize);

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	unsigned long	ret = MemeryCRC((unsigned char *) pBuf, FileSize);
	CString			s;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	s.Format("%08x", ret);
	if(s != "52a028b7")
	{
		TestResult = FALSE;
	}

	memset(pBuf, 0x10, FileSize);
	ret = MemeryCRC((unsigned char *) pBuf, FileSize);
	s.Format("%08x", ret);
	if(s != "d6d254ba")
	{
		TestResult = FALSE;
	}

	ret = MemeryCRC(NULL, 0);
	if(ret != -1)
	{
		TestResult = FALSE;
	}

	s.Empty();
	delete pBuf;

	m_Test.TestResult("MemeryCRC", TestResult);

#ifdef _DEBUG
	newMemState.Checkpoint();
	if(diffMemState.Difference(oldMemState, newMemState))
	{
		TRACE("Memory Leaked Here! ! !\n\n");
		diffMemState.DumpStatistics();
	}
#endif
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk17()
{
	/* TODO: Add your control notification handler code here */

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef _DEBUG
	CMemoryState	oldMemState, newMemState, diffMemState;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	oldMemState.Checkpoint();
#endif

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	unsigned long	ret1 = 0, ret2 = 0;
	BOOL			TestResult = TRUE;
	int				filehandle = 0;
	CString			s;
	int Err = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	//DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	//CreateDirectorys("C:\\Temp\\中文路径 Dst");

	//m_Test.MyCreateFile("C:\\Temp\\中文路径 Dst\\File.txt", 1024 * 100);

	///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	//Err = _sopen_s(&filehandle, "C:\\Temp\\中文路径 Dst\\File.txt", O_RDONLY, _SH_DENYNO, _S_IREAD | _S_IWRITE);
	///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	//if(Err == 0)
	//{
	//	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	//	long	FileSize = _filelength(filehandle);
	//	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	//	ret = FileCRC("C:\\Temp\\中文路径 Dst\\File.txt", FileSize, FALSE);
	//	s.Format("%08x", ret);
	//	if(s != "5f3e158f")
	//	{
	//		TestResult = FALSE;
	//	}

	//	_close(filehandle);
	//}

	//ret = FileCRC("", 0, FALSE);
	//if(ret != -1)
	//{
	//	TestResult = FALSE;
	//}

	//CreateDirectorys("C:\\Temp\\中文路径 Dst");
	//m_Test.MyCreateFile("C:\\Temp\\中文路径 Dst\\File1.txt", 1024 * 100 + 4);
	//Err = _sopen_s(&filehandle, "C:\\coreview\\funcexec\\CVLogExec\\Convert Data\\LG033.mem", O_RDONLY, _SH_DENYNO, _S_IREAD | _S_IWRITE);
	//if(Err == 0)
	//{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		long	FileSize = _filelength(filehandle);
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		//ret1 = FileCRC("\\\\192.168.0.157\\c$\\CoreView\\SystemExec\\Configure\\CVSAPCommdef.cyt", 1048, TRUE);
		DWORD t1 = GetTickCount();
		ret2 = FileCRC("c:\\CoreView\\FuncExec\\CVCRTopExec\\CRTOPData\\database\\ALTCTL.TBL", 0, FALSE);
		DWORD t2 = GetTickCount();

		CString Msg;
		Msg.Format("FileCRC耗时=%d ms, 文件大小=%d", t2 - t1, FileSize);
		MessageBox(Msg, "", MB_OK);
		//ret2 = FileCRC("c:\\NTDETECT.COM", 0, FALSE);
		//_close(filehandle);
	//}

	m_Test.TestResult("FileCRC", TestResult);
	s.Empty();

#ifdef _DEBUG
	newMemState.Checkpoint();
	if(diffMemState.Difference(oldMemState, newMemState))
	{
		TRACE("Memory Leaked Here! ! !\n\n");
		diffMemState.DumpStatistics();
	}
#endif
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk21()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: Add your control notification handler code here */
	BOOL	TestResult = TRUE;
	int		filehandle = 0;
	CString s;
	DWORD Ret = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	//DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	//CreateDirectorys("C:\\Temp\\中文路径 Dst");

	//char	FileName[1024] = "C:\\Temp\\中文路径 Dst\\File.Txt";

	//m_Test.MyCreateFile(FileName, 1024 * 100);

	//int Err = _sopen_s(&filehandle, FileName, O_RDONLY, _SH_DENYNO, _S_IREAD | _S_IWRITE);

	//if(Err != 0)
	//{
	//	return;
	//}

	//long	FileSize = _filelength(filehandle);

	//_close(filehandle);

	//BOOL	ret = FileCrcWithHead(FileName, FileSize, FALSE);

	//s.Format("%08x", ret);
	//if(s != "5f3e158f")
	//{
	//	TestResult = FALSE;
	//}

	//strcpy_s(FileName, "C:\\Temp\\中文路径 Dst\\File1.Txt");
	//m_Test.MyCreateFile(FileName, 1024 * 100 + 4);

	//Err = _sopen_s(&filehandle, FileName, O_RDONLY, _SH_DENYNO, _S_IREAD | _S_IWRITE);
	//if(Err != 0)
	//{
	//	return;
	//}

	//FileSize = _filelength(filehandle);
	//_close(filehandle);

	//ret = FileCrcWithHead(FileName, FileSize, TRUE);
	//s.Format("%08x", ret);
	//if(s != "5f3e158f")
	//{
	//	TestResult = FALSE;
	//}

	//ret = FileCrcWithHead("C:\\AImem.mem", 1309508, TRUE);
	//if(ret == 0)
	//{
	//	TestResult = FALSE;
	//}

	//m_Test.TestResult("FileCrcWithHead", TestResult);
	//s.Empty();

	Ret = FileCrcWithHead("E:\\Temp\\CDMem1.mem", 422008, TRUE);

	Ret = FileCrcWithHead("E:\\Temp\\CDMem2.mem", 422008, TRUE);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk18()
{
	/* TODO: Add your control notification handler code here */

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#ifdef _DEBUG
	CMemoryState	oldMemState, newMemState, diffMemState;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	oldMemState.Checkpoint();
#endif

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	BOOL	TestResult = TRUE;
	CFile	f;
	UINT	FileSize = 1024 * 1024;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	BOOL ret = FileCompare("\\\\192.168.0.152\\c$\\CoreView\\FuncExec\\CVCRTopExec\\CRTOPData\\database\\ALTCTL.TBL", "\\\\192.168.0.155\\c$\\CoreView\\FuncExec\\CVCRTopExec\\CRTOPData\\database\\ALTCTL.TBL");

	DeleteFiles("C:\\Temp\\*.*\0", NULL, FALSE, FALSE);

	CreateDirectorys("C:\\Temp\\中文路径 Dst");

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	char	FileName1[1024] = "C:\\Temp\\中文路径 Dst\\File1.Txt";
	char	FileName2[1024] = "C:\\Temp\\中文路径 Dst\\File2.Txt";
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	m_Test.MyCreateFile(FileName1, FileSize);
	::CopyFile(FileName1, FileName2, FALSE);

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	BOOL	b = f.Open(FileName2, CFile::modeReadWrite | CFile::typeBinary);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(b)
	{
		/*~~~~~~~~~~*/
		char	*pBuf;
		/*~~~~~~~~~~*/

		pBuf = new char[FileSize];
		f.Read(pBuf, FileSize);
		pBuf[FileSize - 1] = 1;
		f.SeekToBegin();
		f.Write(pBuf, (UINT) FileSize);

		f.Close();

		delete pBuf;
	}

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	ret = FileCompare(FileName1, FileName2);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(ret != 0)
	{
		TestResult = FALSE;
	}

	::CopyFile(FileName1, FileName2, FALSE);
	ret = FileCompare(FileName1, FileName2);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	DeleteFiles("C:\\Temp\\中文路径 Dst\\*.*\0", NULL, FALSE, FALSE);
	FileSize = 1024 * 1024 * 2;
	m_Test.MyCreateFile(FileName1, FileSize);
	::CopyFile(FileName1, FileName2, FALSE);

	b = f.Open(FileName2, CFile::modeReadWrite | CFile::typeBinary);
	if(b)
	{
		/*~~~~~~~~~~*/
		char	*pBuf;
		/*~~~~~~~~~~*/

		pBuf = new char[FileSize];
		f.Read(pBuf, FileSize);
		pBuf[FileSize - 1] = 1;
		f.SeekToBegin();
		f.Write(pBuf, (UINT) FileSize);

		f.Close();

		delete pBuf;
	}

	ret = FileCompare(FileName1, FileName2);
	if(ret != 0)
	{
		TestResult = FALSE;
	}

	::CopyFile(FileName1, FileName2, FALSE);
	ret = FileCompare(FileName1, FileName2);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	DeleteFiles("C:\\Temp\\中文路径 Dst\\*.*\0", NULL, FALSE, FALSE);

	FileSize = 1024 * 1024 * 2 + 1;
	m_Test.MyCreateFile(FileName1, FileSize);
	::CopyFile(FileName1, FileName2, FALSE);

	b = f.Open(FileName2, CFile::modeReadWrite | CFile::typeBinary);
	if(b)
	{
		/*~~~~~~~~~~*/
		char	*pBuf;
		/*~~~~~~~~~~*/

		pBuf = new char[FileSize];
		f.Read(pBuf, FileSize);
		pBuf[FileSize - 1] = 1;
		f.SeekToBegin();
		f.Write(pBuf, (UINT) FileSize);

		f.Close();

		delete pBuf;
	}

	ret = FileCompare(FileName1, FileName2);
	if(ret != 0)
	{
		TestResult = FALSE;
	}

	::CopyFile(FileName1, FileName2, FALSE);
	ret = FileCompare(FileName1, FileName2);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	m_Test.TestResult("FileCompare", TestResult);

#ifdef _DEBUG
	newMemState.Checkpoint();
	if(diffMemState.Difference(oldMemState, newMemState))
	{
		TRACE("Memory Leaked Here! ! !\n\n");
		diffMemState.DumpStatistics();
	}
#endif
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk14()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: Add your control notification handler code here */
	BOOL		TestResult = TRUE;
	char		Driver[] = "C:\\";
	T_DiskInfo	DiskInfo;
	int			ret = GetDiskInfo(Driver, DiskInfo);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(ret != 1)
	{
		TestResult = FALSE;
	}

	//ret = GetDiskInfo("", DiskInfo);
	//if(ret != -1)
	//{
	//	TestResult = FALSE;
	//}

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	int TotalBytes = (int) (DiskInfo.TotalBytes / 1024 / 1024 / 1024);
	int FreeBytes = (int) (DiskInfo.FreeBytes / 1024 / 1024 / 1024);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	TRACE
	(
		"GetDiskInfo功能返回值：%d, 盘符为：%s, 总容量为：%dG, 剩余容量为：%dG \n",
		ret,
		Driver,
		TotalBytes,
		FreeBytes
	);

	m_Test.TestResult("GetDiskInfo", TestResult);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk13()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: Add your control notification handler code here */
	BOOL	TestResult = TRUE;
	char	List[64];
	char	TypeList[64];
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	memset(List, 0, sizeof(List));
	memset(TypeList, 0, sizeof(TypeList));

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	BYTE	num;
	BOOL	ret = GetDriversList(List, TypeList, 64, num);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(ret != 1)
	{
		TestResult = FALSE;
	}

	ret = GetDriversList(List, TypeList, 3, num);
	if(ret != 1)
	{
		TestResult = FALSE;
	}

	m_Test.TestResult("GetDriversList", TestResult);
}

#define BBBB	"C:\\CoreView\\Configure data\\Convert data\\TagBuilder\\Temp\\temp.zip"
#define AAAA	"C:\\CoreView\\Configure data\\Convert data\\TagBuilder\\AlarmClass.mem"
#define CCCC	"C:\\CoreView\\Configure data\\Convert data\\TagBuilder\\AACMem.mem"

/*
 =======================================================================================================================
 =======================================================================================================================
 */

int GetFilesCount(LPCTSTR pstr)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	CFileFind	finder;
	int			count = 0;
	/* build a string with wildcards */
	CString		strWildcard(pstr);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	strWildcard += _T("\\*.*");

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	/* start working for files */
	BOOL	bWorking = finder.FindFile(strWildcard);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	while(bWorking)
	{
		bWorking = finder.FindNextFile();

		if(finder.IsDots())			/* 判断是否是文件 */
			continue;
		if(!finder.IsDirectory())
		{
			count++;
		}

		/* if it's a directory, recursively search it */
		if(finder.IsDirectory())	/* 判断是否是文件夹 //路径 */
		{
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
			CString str = finder.GetFilePath();
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

			count += GetFilesCount(str);
		}
	}

	finder.Close();

	return count;
}

unsigned ZipFolderThread(void *pParam)
{
	CFileDllTestDlg *m_pDll = (CFileDllTestDlg *) pParam;

	time_t t1 = GetTickCount();
	BOOL ret = FolderCompress("C:\\coreview\\funcexec\\CVCRTopExec\\CRTOPData\\parts", "C:\\Temp\\Folder.zip");
	time_t t2 = GetTickCount();
	
	CString s;
	s.Format("压缩给定的文件夹耗时：%d毫秒", t2 - t1);
	m_pDll->MessageBox(s);

	return 1;
}

unsigned ZipFileExtThread(void *pParam)
{
	CFileDllTestDlg *m_pDll = (CFileDllTestDlg *) pParam;

	time_t t1 = GetTickCount();
	BOOL ret = NewExtFilesCompress("c:\\CoreView\\FuncExec\\exe\\CVPfcCalMain1.exe", "C:\\Temp\\CVPfcCalMain1.zip");
	time_t t2 = GetTickCount();

	CString s;
	s.Format("压缩指定后缀文件耗时：%d毫秒", t2 - t1);
	m_pDll->MessageBox(s);

	return 1;
}

unsigned ZipAddFileListThread(void *pParam)
{
	CString FileName = "c:\\Temp\\CVH5000MDrvConfDB.mdb";

	BOOL ret = AddFileCompress(FileName.GetBuffer(), "C:\\Temp\\wanghao.zip");

	//FileName = "c:\\temp\\test1.bin";
	//ret = AddFileCompress(FileName.GetBuffer(), "C:\\Temp\\test.zip");
	FileName.ReleaseBuffer();

	return 1;
}

unsigned ZipFileListThread(void *pParam)
{
	CString Msg;
	//Msg.Format("压缩文件列表耗时：%d毫秒, 返回值=%d", 10, 1);

	CFileDllTestDlg *m_pDll = (CFileDllTestDlg *) pParam;
	CString s, temp, FileName;
	char CRTOffFileList[10][255] = {
		"c:\\CoreView\\FuncExec\\CVCRTopExec\\CRTOPData\\database\\ALTCTL.TBL"};

	FileName = CRTOffFileList[0];
	//for (int i = 0; i < 1; i++)
	//{
	//	temp.Format(";%s", CRTOffFileList[i]);
	//	FileName += temp;
	//}

	time_t t1 = GetTickCount();
	BOOL ret = FileListCompress(CRTOffFileList[0], 1, "C:\\Temp\\CVPfcCalMain1.zip");
	time_t t2 = GetTickCount();

	CString Ret;
	Msg.Format("压缩文件列表耗时：%d毫秒", t2 - t1);
	Ret.Format(", 返回值=%d", ret);
	m_pDll->MessageBox(Msg + Ret);

	return 1;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
unsigned ZipLogDataThread(void *pParam)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	int				ret = 0;
	BOOL			bRet = FALSE;
	CString			s;
	CFileDllTestDlg *pDlg = (CFileDllTestDlg *) pParam;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	for(int i = 0; i < 1000; i++)
	{
		/* 压缩文件 */
		bRet = FileDelete("C:\\Temp\\DstTemp\\LogData.zip");
		ret = NewExtFilesCompress("C:\\Temp\\lgTmp\\*.dat", "C:\\Temp\\DstTemp\\LogData.zip", 1);

		/* 解压文件 */
		if(ret == 1)
		{
			DeleteFiles("C:\\Temp\\DstTemp\\LogData\\*.*\0", NULL, FALSE, FALSE);
			bRet = FileUnCompress("C:\\Temp\\DstTemp\\LogData.zip", "C:\\Temp\\DstTemp\\LogData\\");
		}

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		/* 判定解压的文件是否正确 */
		int Count = GetFilesCount("C:\\Temp\\DstTemp\\LogData\\Temp\\lgTmp\\");
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		if(Count != 75)
		{
			s.Format("解压缩过程错误！解出的文件个数：%d\n", Count);
			AfxMessageBox(s);
			break;
		}

		s.Format("%d", i);
		pDlg->SetDlgItemText(IDC_STATIC_COUNT, s);
	}

	return 0;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
unsigned ZipThread(void *pParam)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	CFileDllTestDlg *m_pDll = (CFileDllTestDlg *) pParam;
	int				ret = 0;
	CString			DllFileName;
	char			FileName[MAX_PATH] = { 0 };
	char			DstFileName[MAX_PATH] = { 0 };
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	/*
	 * DllFileName = "C:\\CoreView\\Progfiles\\Bin\\CVZipCompress.dll";
	 * *sprintf_s(DstFileName, "%s", "C:\\CoreView\\Configure data\\Convert data\\TagBuilder\\Temp/temp.zip");
	 * *sprintf_s(FileName, "%s", "C:\\CoreView\\Configure data\\Convert data\\TagBuilder\\AlarmClass.mem");
	 * *ret = FuncNewFile(FileName, DstFileName, 1);
	 * ;
	 * ret = FuncNewFile(AAAA, BBBB, 1);
	 * *ret = FuncNewFile("C:\\VaCPP.va", "C:\\a.zip", 1);
	 * ;
	 * sprintf_s(FileName, "%s", "C:\\CoreView\\Configure data\\Convert data\\TagBuilder\\AACMem.mem");
	 * *ret = FuncAddFile(CCCC, BBBB, 1);
	 * ;
	 * sprintf_s(FileName, "%s", "C:\\Temp\\Src Src 中文路径\\driver.cab");
	 * *sprintf_s(DstFileName, "%s", "C:\\Temp\\Src Src 中文路径\\driver.zip");
	 * *ret = FuncNewFile(FileName, DstFileName, 2);
	 */
	//ret = NewExtFilesCompress("C:\\coreview\\SystemExec\\Convert Data\\TagBuilder\\*.txt", "C:\\mem.zip", 1);
	//ret = NewExtFilesCompress("C:\\coreview\\SystemExec\\Convert Data\\TagBuilder\\*.mem", "C:\\mem.zip", 1);
	ret = NewExtFilesCompress("C:\\coreview\\SystemExec\\Convert Data\\TagBuilder\\*.*", "C:\\mem.zip", 1);

	TRACE("FileCompress功能结果：%d\n", ret);

	return 0;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk19()
{
	/* TODO: Add your control notification handler code here */
	BOOL b = GetServiceRunStatus("LanmanServer");
	if (b)
	{
		MessageBox("LanmanServer服务在运行", "提示：");
	}
	else
	{
		MessageBox("LanmanServer服务未运行", "提示：");
	}
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
unsigned UnZipThread(void *pParam)
{
	CFileDllTestDlg *m_pDll = (CFileDllTestDlg *) pParam;

	time_t t1 = GetTickCount();
	BOOL ret = FileUnCompress("c:\\Temp\\wanghao.zip", "C:\\temp\\aaa");
	//BOOL ret = FileUnCompress("\\\\192.168.0.154\\c$\\CoreView\\FuncExec\\CVTrendExec\\data\\121117.zip", "\\\\192.168.0.154\\c$\\temp");
	time_t t2 = GetTickCount();

	CString s;
	s.Format("解压缩文件耗时：%d毫秒", t2 - t1);
	m_pDll->MessageBox(s);

	return 0;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk20()
{
	/* TODO: Add your control notification handler code here */
	AfxBeginThread((AFX_THREADPROC) UnZipThread, this);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk25()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	int ret = CVEncryptFile("c:\\ooo.ini", "c:\\ooo.cvv", "qwe456ujk*@%");
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk26()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	int ret = CVDecryptFile("c:\\ooo.cvv", "c:\\ooo1.ini", "qwe456ujk*@%");
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk27()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: 在此添加控件通知处理程序代码 */
	HMODULE hModule;
	typedef int (*DllFunction) (HKEY hMainKey, char *SubKey, char *KeyName, BYTE Type, char *KeyVal);

	/*~~~~~~~~~~~~~*/
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	DllFunction Func;
	/*~~~~~~~~~~~~~*/

	VERIFY(hModule = ::LoadLibrary("C:\\CoreView\\Progfiles\\Bin\\CVRegManager.dll"));
	Func = (DllFunction)::GetProcAddress(hModule, "CreateReg");
	Func(HKEY_LOCAL_MACHINE, "SOFTWARE\\CoreView8\\1\\2\\3", "KeyName", REG_SZ, "123");
	FreeLibrary(hModule);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk28()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: 在此添加控件通知处理程序代码 */
	HMODULE hModule;
	typedef int (*DllFunction) (HKEY hMainKey, char *SubKey, char *KeyName, BYTE Type, char *KeyVal);

	/*~~~~~~~~~~~~~~~~~~~*/
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	DllFunction Func;
	char		KeyVal[30];
	/*~~~~~~~~~~~~~~~~~~~*/

	memset(KeyVal, 0, 30);

	VERIFY(hModule = ::LoadLibrary("C:\\CoreView\\Progfiles\\Bin\\CVRegManager.dll"));
	Func = (DllFunction)::GetProcAddress(hModule, "GetReg");
	Func(HKEY_LOCAL_MACHINE, "SOFTWARE\\CoreView8\\1\\2\\3", "KeyName", REG_SZ, KeyVal);
	FreeLibrary(hModule);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk29()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: 在此添加控件通知处理程序代码 */
	HMODULE hModule;
	typedef int (*DllFunction) (HKEY hMainKey, char *SubKey, char *KeyName, BYTE Type, char *KeyVal);

	/*~~~~~~~~~~~~~*/
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	DllFunction Func;
	/*~~~~~~~~~~~~~*/

	VERIFY(hModule = ::LoadLibrary("C:\\CoreView\\Progfiles\\Bin\\CVRegManager.dll"));
	Func = (DllFunction)::GetProcAddress(hModule, "SetReg");
	Func(HKEY_LOCAL_MACHINE, "SOFTWARE\\CoreView8\\1\\2\\3", "KeyName", REG_SZ, "456");
	FreeLibrary(hModule);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk30()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: 在此添加控件通知处理程序代码 */
	HMODULE hModule;
	typedef int (*DllFunction) (HKEY hMainKey, char *SubKey);

	/*~~~~~~~~~~~~~*/
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	DllFunction Func;
	/*~~~~~~~~~~~~~*/

	VERIFY(hModule = ::LoadLibrary("C:\\CoreView\\Progfiles\\Bin\\CVRegManager.dll"));
	Func = (DllFunction)::GetProcAddress(hModule, "DeleteReg");
	Func(HKEY_LOCAL_MACHINE, "SOFTWARE\\CoreView8\\1\\2\\3");
	FreeLibrary(hModule);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk31()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: 在此添加控件通知处理程序代码 */
	HMODULE hModule;
	typedef int (*DllFunction) (HKEY hMainKey, char *SubKey, char *KeyName);

	/*~~~~~~~~~~~~~*/
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	DllFunction Func;
	/*~~~~~~~~~~~~~*/

	VERIFY(hModule = ::LoadLibrary("C:\\CoreView\\Progfiles\\Bin\\CVRegManager.dll"));
	Func = (DllFunction)::GetProcAddress(hModule, "DeleteRegValue");
	Func(HKEY_LOCAL_MACHINE, "SOFTWARE\\CoreView8\\1\\2\\3", "KeyName");
	FreeLibrary(hModule);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk32()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	/* TODO: 在此添加控件通知处理程序代码 */
	HMODULE hModule = NULL;
	typedef unsigned short (*DllFunction) (char *RemoteName, char *RemoteUser, char *RemotePass);

	/*~~~~~~~~~~~~~*/
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	DllFunction Func;
	/*~~~~~~~~~~~~~*/

	hModule = ::LoadLibrary("c:\\CoreView\\SystemExec\\bin\\CVRegManager.dll");
	Func = (DllFunction)::GetProcAddress(hModule, "ConnIPC");

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	BOOL	ret = Func("192.168.0.148", "Administrator", "aaa");
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	FreeLibrary(hModule);

	TRACE("ConnIPC功能结果：%d\n", ret);

	if(ret)
	{
		MessageBox("IPC链接成功！");
	}
	else
	{
		MessageBox("IPC链接失败！");
	}
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk33()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	HMODULE hModule;
	typedef int (*DllFunction)
		(
			char *RemoteName,
			char *RemoteUser,
			char *RemotePass,
			HKEY hMainKey,
			char *SubKey,
			char *KeyName,
			BYTE Type,
			char *KeyVal
		);
	DllFunction Func;
	char		KeyVal[30];
	/*~~~~~~~~~~~~~~~~~~~*/

	memset(KeyVal, 0, 30);

	VERIFY(hModule = ::LoadLibrary("C:\\CoreView\\SystemExec\\bin\\CVRegManager.dll"));
	Func = (DllFunction)::GetProcAddress(hModule, "GetRemoteReg");

	int ret = Func
		(
			"YLEWS",
			"Administrator",
			"aaa",
			HKEY_LOCAL_MACHINE,
			"SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\\Interfaces\\{B0B2E6A1-FD8D-48F3-A848-F8B3B084FE9E}",
			"IPAddress",
			REG_MULTI_SZ,
			KeyVal
		);

	if(ret)
	{
		/*~~~~~~*/
		CString s;
		/*~~~~~~*/
        
		s.Format("获取到的注册表字符串为：%s", KeyVal);
		MessageBox(s);
	}

	FreeLibrary(hModule);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnClose()
{
	/* TODO: 在此添加消息处理程序代码和/或调用默认值 */
	//AfxDaoTerm();

	CDialog::OnClose();
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
//void CFileDllTestDlg::OnBnClickedCancel2()
//{
//	/* TODO: 在此添加控件通知处理程序代码 */
//	StopFlag = FALSE;
//	m_Test.LoopTestFlag = FALSE;
//}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedButton2()
{
	CString ExistingFileName = "c:\\coreview\\funcexec\\cvlogexec\\Offline Data\\LogBuilder.mem";
	_finddata32_t fileinfo;
	memset(&fileinfo, 0, sizeof(_finddata32_t));

	BOOL b = IsFileExist(ExistingFileName.GetBuffer(), fileinfo);
	ExistingFileName.ReleaseBuffer();
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void CFileDllTestDlg::OnBnClickedOk22()
{
	/* TODO: Add your control notification handler code here */
	AfxBeginThread((AFX_THREADPROC) ZipLogDataThread, this);
}

//判定文件是否被加密
void CFileDllTestDlg::OnBnClickedOk34()
{
	// TODO: 在此添加控件通知处理程序代码
	BOOL b = IsCVEncryptFile("c:\\CoreView\\SystemExec\\Configure\\CVSAPCommdef.cv8");
	if (b == TRUE)
	{
		SetDlgItemText(IDC_YESNO, "是");
	}
	else
	{
		SetDlgItemText(IDC_YESNO, "否");
	}
}

//加密自身文件
void CFileDllTestDlg::OnBnClickedOk35()
{
	// TODO: 在此添加控件通知处理程序代码
	CVEncryptFileSelf("c:\\CoreView\\SystemExec\\Configure\\CVSAPCommdef.cyt", "qwe456ujk*@%");
}

void CFileDllTestDlg::OnBnClickedOk36()
{
	// TODO: 在此添加控件通知处理程序代码
	CVDecryptFileSelf("c:\\CoreView\\SystemExec\\Configure\\CVSAPCommdef.cyt", "qwe456ujk*@%");

}

void CFileDllTestDlg::OnBnClickedOk23()
{
	// TODO: 在此添加控件通知处理程序代码
	AfxBeginThread((AFX_THREADPROC) ZipFolderThread, this);
}

void CFileDllTestDlg::OnBnClickedOk24()
{
	// TODO: 在此添加控件通知处理程序代码
	AfxBeginThread((AFX_THREADPROC) ZipFileExtThread, this);
}

void CFileDllTestDlg::OnBnClickedOk37()
{
	// TODO: 在此添加控件通知处理程序代码
	AfxBeginThread((AFX_THREADPROC) ZipFileListThread, this);
}

void CFileDllTestDlg::OnBnClickedOk38()
{
	// TODO: 在此添加控件通知处理程序代码
	AfxBeginThread((AFX_THREADPROC) ZipAddFileListThread, this);
}

void CFileDllTestDlg::OnBnClickedButton3()
{
	// TODO: 在此添加控件通知处理程序代码
	CDaoDatabase m_DB;

	BOOL b = OpenDB(m_DB, DBFileName);

	//AfxBeginThread((AFX_THREADPROC) DBOperProcess5, this);

	CString s;
	s.Format("%s", "1次函数调用结束\n");
	TRACE(s);
	m_Test.ShowTestMsg(s);
}

void CFileDllTestDlg::CreateDB()
{
	AfxDaoInit();
	CFileFind FindFile;

	//产生数据库文件
	BOOL b = FindFile.FindFile(DBFileName);
	if (b == FALSE)
	{
		try
		{
			m_DB.Create(DBFileName);
		}
		catch (CException* e)
		{
			e->Delete();
			CString s;
			s.Format("%s生成错误", DBFileName);
			AfxMessageBox(s);
		}

		//打开数据库
		if (m_DB.IsOpen() == FALSE)
		{
			try
			{
				m_DB.Open(DBFileName);
				//m_DB.Open("");
			}
			catch (CException* e)
			{
				char Err[1024] = {0};

				e->GetErrorMessage(Err, sizeof(Err));
				e->Delete();
				CString s;
				s.Format("%s打开错误", DBFileName);
				AfxMessageBox(s);
			}
		}

		//新建65字段的表
		if (m_DB.IsOpen())
		{
			CDaoTableDef m_NewTable(&m_DB);

			try
			{
				m_NewTable.Create("Test");
			}
			catch (CException* e)
			{
				e->Delete();
				CString s;
				s.Format("%s表产生错误", "Test");
				AfxMessageBox(s);
			}

			try
			{
				m_NewTable.CreateField("ID", dbLong, dbAutoIncrField);
			}
			catch (CException* e)
			{
				e->Delete();
				CString s;
				s.Format("%s Field产生错误", "ID");
				AfxMessageBox(s);
			}

			for (int i = 0; i < 64; i++)
			{
				CString Field;
				Field.Format("字段%d", i + 1);
				try
				{
					m_NewTable.CreateField(Field, dbText, 20, dbVariableField);
				}
				catch (CException* e)
				{
					e->Delete();
					CString s;
					s.Format("%s Field产生错误", Field);
					AfxMessageBox(s);
				}
			}

			try
			{
				m_NewTable.Append();
			}
			catch (CException* e)
			{
				e->Delete();
				CString s;
				s.Format("%s表新增错误", "Test");
				AfxMessageBox(s);
			}
		}

		//关闭数据库
		if (m_DB.IsOpen())
		{
			m_DB.Close();
		}
	}
	AfxDaoTerm();
}

//void WriteDB()
//{
//	//打开指定表
//	CDaoTableDef m_OpenTable(m_DB);
//	if (m_DB.IsOpen())
//	{
//		try
//		{
//			m_OpenTable.Open("Test");
//		}
//		catch (CException* e)
//		{
//			e->Delete();
//			CString s;
//			s.Format("%s表打开错误", "Test");
//			AfxMessageBox(s);
//		}
//	}
//
//	//插入记录
//	CDaoRecordset rs(m_DB);
//	try
//	{
//		rs.Open(&m_OpenTable, dbOpenDynaset, dbAppendOnly | dbInconsistent);
//	}
//	catch (CException* e)
//	{
//		e->Delete();
//		CString s;
//		s.Format("%s记录集打开错误");
//		AfxMessageBox(s);
//	}
//
//	CString Field, Text;
//	int t1 = GetTickCount();
//	for (int i = 0; i < 3; i++)
//	{
//		rs.AddNew();
//		for (int j = 0; j < 64; j++)
//		{
//			rs.SetFieldValue(j + 1, "aaaa");
//		}
//
//		try
//		{
//			rs.Update();
//		}
//		catch (CException* e)
//		{
//			e->Delete();
//			CString s;
//			s.Format("记录集Update错误");
//			AfxMessageBox(s);	
//		}
//	}
//
//	int t2 = GetTickCount();
//	CString s;
//	s.Format("耗时：%d ms", t2 - t1);
//	//MessageBox(s);
//
//	//关闭数据库
//	if (m_DB->IsOpen())
//	{
//		m_DB.Close();
//	}
//}
//
void CFileDllTestDlg::OnBnClickedButton4()
{
	// TODO: 在此添加控件通知处理程序代码
	for (int i = 0; i < 100; i++)
	{
		BOOL b = DBIsOpen(DBFileName);
		TRACE("%d数据库打开：%d\n", i + 1, b);
	}
}

void CFileDllTestDlg::OnBnClickedButton5()
{
	// TODO: 在此添加控件通知处理程序代码
	AfxBeginThread((AFX_THREADPROC) DBOperProcess, this, THREAD_PRIORITY_NORMAL);
}

BOOL DBEncrypt1(CDaoDatabase& m_DB, LPCSTR DBFileName)
{
	//AFX_MANAGE_STATE(AfxGetStaticModuleState());
	//AfxDaoInit();
	CString TempFile = DBFileName;
	CString Connect;
	BOOL b = FALSE;
	int pos = TempFile.ReverseFind('\\');
	TempFile = TempFile.Left(pos);
	TempFile += "~tmp.mdb";

	if (DBIsOpen(DBFileName) == FALSE)
	{
		//if (IsEncryptDB(m_DB, DBFileName) == FALSE)//不是加密文件，加上系统密码
		//{
			Connect.Format(";PWD=%s", "gA)bC(7VwNuTa!wlL~AM");
			try
			{
				DeleteFile(TempFile);
				m_DB.m_pWorkspace->CompactDatabase(DBFileName, TempFile, 
					dbLangGeneral, 0, Connect);  
			}
			catch (CException* e)
			{
				e->Delete();
				return FALSE;
			}

			b = MoveFileEx(TempFile, DBFileName, MOVEFILE_REPLACE_EXISTING);
		//} 
		//else//是加密文件，返回假
		//{
		//	b = FALSE;
		//}
	}

	//AfxDaoTerm();
	return b;
}

void CFileDllTestDlg::OnBnClickedButton6()
{
	// TODO: 在此添加控件通知处理程序代码
	CDaoDatabase m_DB;
	CString temp;

	temp = DBFileName;

	temp.Replace("CVTagDB", "~CVTagDB");
	CopyFile(DBFileName, temp, FALSE);
	//DeleteDBPassword(m_DB, temp);

	DBEncrypt(m_DB, temp);
	//AfxBeginThread((AFX_THREADPROC) DBOperProcess2, this, THREAD_PRIORITY_NORMAL);

	CString s;
	s.Format("%s", "1次函数调用结束\n");
	TRACE(s);
	m_Test.ShowTestMsg(s);

}

void CFileDllTestDlg::OnBnClickedButton7()
{
	// TODO: 在此添加控件通知处理程序代码
	CDaoDatabase m_DB;
	BOOL b = ChangeDBPassword(m_DB, DBFileName, "gA)bC(7VwNuTa!wlL~AM");
	//AfxBeginThread((AFX_THREADPROC) DBOperProcess4, this, THREAD_PRIORITY_NORMAL);

	CString s;
	s.Format("%s", "1次函数调用结束\n");
	TRACE(s);
	m_Test.ShowTestMsg(s);

}

void CFileDllTestDlg::OnBnClickedButton8()
{
	// TODO: 在此添加控件通知处理程序代码
	CDaoDatabase m_DB;

	BOOL b = IsEncryptDB(m_DB, DBFileName);

	//AfxBeginThread((AFX_THREADPROC) DBOperProcess1, this, THREAD_PRIORITY_NORMAL);

	CString s;
	s.Format("%s", "1次函数调用结束\n");
	TRACE(s);
	m_Test.ShowTestMsg(s);

}

void CFileDllTestDlg::OnBnClickedButton9()
{
	// TODO: 在此添加控件通知处理程序代码
	CDaoDatabase m_DB;
	CString temp;

	temp = DBFileName;
	temp.Replace("CVTagDB", "~CVTagDB");
	CopyFile(DBFileName, temp, FALSE);
	DeleteDBPassword(m_DB, temp);

	//AfxDaoTerm();
	//AfxBeginThread((AFX_THREADPROC) DBOperProcess3, this, THREAD_PRIORITY_NORMAL);
	CString s;
	s.Format("%s", "1次函数调用结束\n");
	TRACE(s);
	m_Test.ShowTestMsg(s);

}

void CFileDllTestDlg::OnBnClickedButton10()
{
	// TODO: 在此添加控件通知处理程序代码
	CString pw;

	pw = GetDBPassword();
}

void CFileDllTestDlg::OnBnClickedOk15()
{
	// TODO: 在此添加控件通知处理程序代码
	BOOL b = GetServiceRunStatus("LanmanWorkstation");
	if (b)
	{
		MessageBox("LanmanWorkstation服务在运行", "提示：");
	}
	else
	{
		MessageBox("LanmanWorkstation服务未运行", "提示：");
	}
}

void CFileDllTestDlg::OnBnClickedButton11()
{
	// TODO: Add your control notification handler code here
	CDaoDatabase m_DB;
	CString temp;

	temp = DBFileName;
	temp.Replace("CVTagDB", "~CVTagDB");
	CopyFile(DBFileName, temp, FALSE);

	//IsEncryptDB(m_DB, temp);

	DeleteDBPassword(m_DB, temp);

	//DBEncrypt(m_DB, temp);

	//AfxBeginThread((AFX_THREADPROC) DBOperProcess3, this, THREAD_PRIORITY_NORMAL);
	CString s;
	s.Format("%s", "1次函数调用结束\n");
	TRACE(s);
	m_Test.ShowTestMsg(s);
}

void CFileDllTestDlg::OnBnClickedButton12()
{
	// TODO: 在此添加控件通知处理程序代码
	DeleteDir_wh("c:\\CoreView\\FuncExec\\CVPrecordExec\\Data");
}

void CFileDllTestDlg::OnBnClickedButton13()
{
	// TODO: 在此添加控件通知处理程序代码
	OnCancel();
	AutoRestart("C:\\CoreView\\TestProgsExec\\exe\\CVFileManagerTest.exe", "");
}

void CFileDllTestDlg::OnBnClickedButton14()
{
	// TODO: 在此添加控件通知处理程序代码
	int Total = 0;
	int Cnt = GetCVOcxRegCount(Total);
	CString s;
	s.Format("CV8系统中需注册OCX数量：%d, 已注册的数量：%d", Total, Cnt);
	MessageBox(s, "提示：", MB_OK);

	if (Total != Cnt)
	{
		//自动注册所有的OCX
		Cnt = RegCVOcx(Total);

		Cnt = GetCVOcxRegCount(Total);
		CString s;
		s.Format("已注册的数量：%d", Cnt);
		MessageBox(s, "提示：", MB_OK);
	}
}

void CFileDllTestDlg::OnBnClickedButton15()
{
	// TODO: 在此添加控件通知处理程序代码
	//HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Lsa
	char KeyVal[MAX_PATH];
	GetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "limitblankpassworduse", REG_SZ, KeyVal);
	TRACE("KeyVal = %s\n", KeyVal);
	if (CString(KeyVal) == "1")
	{
		MessageBox("不可以(启用)", "");
	} 
	else
	{
		MessageBox("可以(禁用)", "");
	}
}

//参数SubKey前不要加“\\”，Type支持REG_SZ和REG_DWORD两种，返回值为字符串
BOOL CFileDllTestDlg::GetReg(HKEY hMainKey, char *SubKey, char *KeyName, BYTE Type, char *KeyVal)
{
	HKEY	hKey = 0;
	DWORD	Length = MAX_PATH;
	char	Buf[MAX_PATH] = {0};
	DWORD	dwValue = 0;
	int		ret = RegOpenKeyEx(hMainKey, SubKey, 0, KEY_READ, &hKey);

	if(ret == ERROR_SUCCESS)
	{
		ret = RegQueryValueEx(hKey, KeyName, NULL, (DWORD *) &Type, (LPBYTE) Buf, &Length);

		if (Type == REG_SZ)
		{
			memcpy(KeyVal, Buf, strlen(Buf));
		} 
		else if (Type == REG_DWORD)
		{
			dwValue = Buf[0];
			_itoa_s(dwValue, KeyVal, 16, 10);
		}

		RegCloseKey(hKey);
	}
	else
	{
		return FALSE;
	}

	return TRUE;
}

BOOL CFileDllTestDlg::SetReg(HKEY hMainKey, char *SubKey, char *KeyName, BYTE Type, char *KeyVal)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	HKEY	hKey = 0;
	char	s[512] = {0};
	int		ret = RegCreateKey(hMainKey, SubKey, &hKey);
	short	len = (short)strlen(KeyVal);
	DWORD   dwVal = 0;
	LONG    Ret = 0;
	CString str;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if (Type == REG_SZ)
	{
		strncpy_s(s, KeyVal, len);

		RegSetValueEx(hKey, KeyName, 0, Type, (LPBYTE) s, len);
	} 
	else if (Type == REG_DWORD)
	{
		dwVal = atoi(KeyVal);
		Ret = RegSetValueEx(hKey, KeyName, 0, Type, (LPBYTE)(&dwVal), sizeof(DWORD));
	}
	else if (Type == REG_MULTI_SZ)
	{
		str = KeyVal;
		len = str.GetLength();
		Ret = RegSetValueEx(hKey, KeyName, 0, Type, (LPBYTE)(KeyVal), len);
	}

	RegCloseKey(hKey);

	return TRUE;
}

void CFileDllTestDlg::OnBnClickedButton16()
{
	// TODO: 在此添加控件通知处理程序代码
	//设置
	char KeyVal[MAX_PATH];
	_itoa_s(0, KeyVal, 16, 10);
	SetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "limitblankpassworduse", REG_DWORD, KeyVal);

	//回读
	GetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "limitblankpassworduse", REG_SZ, KeyVal);
	TRACE("KeyVal = %s\n", KeyVal);
}

void CFileDllTestDlg::OnBnClickedButton17()
{
	// TODO: 在此添加控件通知处理程序代码
	//设置
	char KeyVal[MAX_PATH];
	_itoa_s(1, KeyVal, 16, 10);
	SetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "limitblankpassworduse", REG_DWORD, KeyVal);

	//回读
	GetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "limitblankpassworduse", REG_SZ, KeyVal);
	TRACE("KeyVal = %s\n", KeyVal);
}

CString GetCmdOutput(CString CmdLine)
{
	CString csRet;
	SECURITY_ATTRIBUTES sa;
	HANDLE hRead, hWrite;//管道的读写句柄

	sa.nLength = sizeof(SECURITY_ATTRIBUTES);
	sa.lpSecurityDescriptor = NULL;
	sa.bInheritHandle = TRUE;
	if (!CreatePipe(&hRead, 
		&hWrite,
		&sa,
		0//设置为0，让系统自动分配管道空间
		))
	{
		TRACE("Error On CreatePipe.");
		return csRet;
	}

	STARTUPINFO si;
	PROCESS_INFORMATION pi;
	si.cb = sizeof(STARTUPINFO);
	GetStartupInfo(&si);
	si.hStdError = hWrite;
	si.hStdOutput = hWrite;
	si.wShowWindow = SW_HIDE;
	si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;
	if (!CreateProcess(NULL,
		CmdLine.GetBuffer(),
		NULL, NULL, TRUE, NULL, NULL, NULL, &si, &pi)) 
	{
		TRACE("Error on CreateProcess.");
		return csRet;
	}
	CmdLine.ReleaseBuffer();
	CloseHandle(hWrite);

	char buffer[1024] = {0};
	DWORD bytesRead;
	ReadFile(hRead, buffer, 1024, &bytesRead, NULL);

	return csRet = buffer;
}

void CFileDllTestDlg::OnBnClickedButton18()
{
	// TODO: 在此添加控件通知处理程序代码
	//Ntrights -u Guest +r SeNetworkLogonRight
	CString FileName;
	FileName = CreateNtrightsFile();

	CString CmdLine = FileName + " -u Administrators +r SeNetworkLogonRight";
	CString RetString = GetCmdOutput(CmdLine);

	CmdLine = FileName + " -u \"Backup Operators\" +r SeNetworkLogonRight";
	RetString = GetCmdOutput(CmdLine);

	CmdLine = FileName + " -u Everyone +r SeNetworkLogonRight";
	RetString = GetCmdOutput(CmdLine);

	CmdLine = FileName + " -u \"Power Users\" +r SeNetworkLogonRight";
	RetString = GetCmdOutput(CmdLine);

	CmdLine = FileName + " -u Users +r SeNetworkLogonRight";
	RetString = GetCmdOutput(CmdLine);
}

void CFileDllTestDlg::OnBnClickedButton19()
{
	// TODO: 在此添加控件通知处理程序代码
	int Ret = SetDenyNetworkLogonUserGroup();
}

CString CFileDllTestDlg::CreateNtrightsFile()
{
	// TODO: 在此添加控件通知处理程序代码
	CString FileName = "ntrights.exe";
	char SysTempPath[512];

	//获取系统临时路径
	GetTempPath(512, SysTempPath); 
	FileName = SysTempPath + FileName;

	CFile f;
	BOOL b = f.Open(FileName, CFile::modeReadWrite);
	if (b == FALSE)//文件不存在
	{
		//生成一个新的EXE
		b = f.Open(FileName, CFile::modeReadWrite | CFile::modeCreate | CFile::typeBinary);
		f.Write(buf, sizeof(buf));
	}
	f.Close();

	return FileName;
}

void CFileDllTestDlg::OnBnClickedButton20()
{
	// TODO: Add your control notification handler code here
	//设置
	char KeyVal[MAX_PATH];
	_itoa_s(1, KeyVal, 16, 10);
	SetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "forceguest", REG_DWORD, KeyVal);

	//回读
	GetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "forceguest", REG_SZ, KeyVal);
	TRACE("KeyVal = %s\n", KeyVal);

	if (CString(KeyVal) == "1")
	{
		MessageBox("设置成功", "");
	}

}

void CFileDllTestDlg::OnBnClickedButton21()
{
	// TODO: Add your control notification handler code here
	//设置
	char KeyVal[MAX_PATH];
	_itoa_s(0, KeyVal, 16, 10);
	SetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "forceguest", REG_DWORD, KeyVal);

	//回读
	GetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "forceguest", REG_SZ, KeyVal);
	TRACE("KeyVal = %s\n", KeyVal);

	if (CString(KeyVal) == "0")
	{
		MessageBox("设置成功", "");
	}
}

void CFileDllTestDlg::OnBnClickedButton22()
{
	// TODO: Add your control notification handler code here
	int Total = 0;
	int Cnt = GetCVOcxRegCount(Total);
	CString s;
	s.Format("CV8系统中需注册OCX数量：%d, 已注册的数量：%d", Total, Cnt);
	MessageBox(s, "提示：", MB_OK);

	if (Cnt > 0)
	{
		//反注册所有的OCX
		Cnt = UnRegCVOcx();

		Cnt = GetCVOcxRegCount(Total);
		CString s;
		s.Format("已注册的数量：%d", Cnt);
		MessageBox(s, "提示：", MB_OK);
	}
}

//void CFileDllTestDlg::OnBnClickedButton23()
//{
//	// TODO: Add your control notification handler code here
//	//SetClassicTheme();
//}

//void CFileDllTestDlg::OnBnClickedButton24()
//{
//	// TODO: Add your control notification handler code here
//	//SetScreenSaveNone();
//}

//void CFileDllTestDlg::OnBnClickedButton25()
//{
//	// TODO: Add your control notification handler code here
//	//SetPower();
//}

//void CFileDllTestDlg::OnBnClickedButton26()
//{
//	// TODO: Add your control notification handler code here
//	//SetLanguageBar(LangID);
//}

//void CFileDllTestDlg::OnBnClickedButton27()
//{
//	// TODO: Add your control notification handler code here
//	//ShowSystemFolder();
//}

//void CFileDllTestDlg::OnBnClickedButton28()
//{
//	// TODO: Add your control notification handler code here
//	//ShowHideFile();
//}

//void CFileDllTestDlg::OnBnClickedButton29()
//{
//	// TODO: Add your control notification handler code here
//	//ShowFileExt();
//}

//void CFileDllTestDlg::OnBnClickedButton30()
//{
//	// TODO: Add your control notification handler code here
//	//ShowFullPath();
//}

//void CFileDllTestDlg::OnBnClickedButton32()
//{
//	// TODO: Add your control notification handler code here
//	//WelcomeScreenDisable();
//}

//void CFileDllTestDlg::OnBnClickedButton33()
//{
//	// TODO: Add your control notification handler code here
//	//int Ret = SetNetworkLogonUserGroup();
//}

//void CFileDllTestDlg::OnBnClickedButton34()
//{
//	// TODO: Add your control notification handler code here
//	//int Ret = SetDenyNetworkLogonUserGroup();
//}

//void CFileDllTestDlg::OnBnClickedButton31()
//{
//	// TODO: Add your control notification handler code here
//	//DisableSampleFileShareMode();
//}

//void CFileDllTestDlg::OnBnClickedButton35()
//{
//	// TODO: Add your control notification handler code here
//	//EnableRemoteAccessUseBlankPassword();
//}

//void CFileDllTestDlg::OnBnClickedButton36()
//{
//	// TODO: Add your control notification handler code here
//	//InternetSyncDisable(); 
//}

//void CFileDllTestDlg::OnBnClickedButton37()
//{
//	// TODO: Add your control notification handler code here
//	//FirewallDisable();
//}

void CFileDllTestDlg::OnBnClickedButton38()
{
	// TODO: Add your control notification handler code here
	InstallHotfix("d:\\软件备份\\hotfix");
}

//禁止系统还原
//void CFileDllTestDlg::OnBnClickedButton39()
//{
//	// TODO: Add your control notification handler code here
//	//TurnOffSystemRestore();
//}

//void CFileDllTestDlg::OnBnClickedButton40()
//{
//	// TODO: Add your control notification handler code here
//	//TurnOffAutoUpdate();
//}

//void CFileDllTestDlg::OnBnClickedButton41()
//{
//	// TODO: Add your control notification handler code here
//	//TurnOffRemoteAssistanceAndDesktop();
//}

//void CFileDllTestDlg::OnBnClickedButton42()
//{
//	// TODO: Add your control notification handler code here
//	//SetVisualXP(LangID);
//}

//void CFileDllTestDlg::OnBnClickedButton45()
//{
//	// TODO: Add your control notification handler code here
//	//SetStartupAndRecovery(LangID);
//}

//void CFileDllTestDlg::OnBnClickedButton46()
//{
//	// TODO: Add your control notification handler code here
//	//SetErrorReporting(LangID);
//}

//void CFileDllTestDlg::OnBnClickedButton47()
//{
//	// TODO: Add your control notification handler code here
//	//DisableDrWatson();
//}

//void CFileDllTestDlg::OnBnClickedButton48()
//{
//	// TODO: Add your control notification handler code here
//	//SetHibernate();
//}

//void CFileDllTestDlg::OnBnClickedButton49()
//{
//	// TODO: Add your control notification handler code here
//	//SetMinAniMate();
//}

//void CFileDllTestDlg::OnBnClickedButton50()
//{
//	// TODO: Add your control notification handler code here
//	//SetVirtualMemory();
//}

//void CFileDllTestDlg::OnBnClickedButton51()
//{
//	// TODO: Add your control notification handler code here
//	//DisableMSN();
//}

//void CFileDllTestDlg::OnBnClickedButton52()
//{
//	// TODO: Add your control notification handler code here
//	TRACE("自动设定处理开始\n");
//	int Ret = 0;
//
//	int t1 = GetTickCount();
//
//	//Ret = SetPower();
//	//if (Ret != 0)
//	//{
//	//	TRACE("SetPower失败\n");
//	//}
//
//	//Ret = ShowSystemFolder();
//	//if (Ret != 0)
//	//{
//	//	TRACE("ShowSystemFolder失败\n");
//	//}
//
//	//Ret = ShowHideFile();
//	//if (Ret != 0)
//	//{
//	//	TRACE("ShowHideFile失败\n");
//	//}
//
//	//Ret = ShowFileExt();
//	//if (Ret != 0)
//	//{
//	//	TRACE("ShowFileExt失败\n");
//	//}
//
//	//Ret = ShowFullPath();
//	//if (Ret != 0)
//	//{
//	//	TRACE("ShowFullPath失败\n");
//	//}
//
//	//Ret = DisableSampleFileShareMode();
//	//if (Ret != 0)
//	//{
//	//	TRACE("DisableSampleFileShareMode失败\n");
//	//}
//
//	//Ret = WelcomeScreenDisable();
//	//if (Ret != 0)
//	//{
//	//	TRACE("WelcomeScreenDisable失败\n");
//	//}
//
//	//Ret = SetNetworkLogonUserGroup();
//	//if (Ret != 0)
//	//{
//	//	TRACE("SetNetworkLogonUserGroup失败\n");
//	//}
//
//	//Ret = SetDenyNetworkLogonUserGroup();
//	//if (Ret != 0)
//	//{
//	//	TRACE("SetDenyNetworkLogonUserGroup失败\n");
//	//}
//
//	//Ret = EnableRemoteAccessUseBlankPassword();
//	//if (Ret != 0)
//	//{
//	//	TRACE("EnableRemoteAccessUseBlankPassword失败\n");
//	//}
//
//	//Ret = InternetSyncDisable(); 
//	//if (Ret != 0)
//	//{
//	//	TRACE("InternetSyncDisable失败\n");
//	//}
//
//	//Ret = FirewallDisable();
//	//if (Ret != 0)
//	//{
//	//	TRACE("FirewallDisable失败\n");
//	//}
//
//	//Ret = TurnOffUAC(LangID);
//	//if (Ret != 0)
//	//{
//	//	TRACE("TurnOffUAC失败\n");
//	//}
//
//	//Ret = SetScreenSaveNone();
//	//if (Ret != 0)
//	//{
//	//	TRACE("SetScreenSaveNone失败\n");
//	//}
//
//	//SetClassicTheme();
//
//	int t2 = GetTickCount();
//	CString s;
//	s.Format("全部设定项用时 %d ms", t2 - t1);
//	if (bOnKey == FALSE)
//	{
//		MessageBox(s, NULL, MB_OK);
//	}
//}

//void CFileDllTestDlg::OnBnClickedButton53()
//{
//	// TODO: Add your control notification handler code here
//	int Ret = 0;
//
//	int t1 = GetTickCount();
//
//	TRACE("优化设定项处理开始\n");
//
//	//Ret = TurnOffSystemRestore();
//	//if (Ret != 0)
//	//{
//	//	TRACE("TurnOffSystemRestore失败\n");
//	//}
//
//	//Ret = TurnOffAutoUpdate();
//	//if (Ret != 0)
//	//{
//	//	TRACE("TurnOffAutoUpdate失败\n");
//	//}
//
//	//Ret = TurnOffRemoteAssistanceAndDesktop();
//	//if (Ret != 0)
//	//{
//	//	TRACE("TurnOffRemoteAssistanceAndDesktop失败\n");
//	//}
//
//	//Ret = SetStartupAndRecovery(LangID);
//	//if (Ret != 0)
//	//{
//	//	TRACE("SetStartupAndRecovery失败\n");
//	//}
//
//	//Ret = SetErrorReporting(LangID);
//	//if (Ret != 0)
//	//{
//	//	TRACE("SetErrorReporting失败\n");
//	//}
//
//	//Ret = DisableDrWatson();
//	//if (Ret != 0)
//	//{
//	//	TRACE("DisableDrWatson失败\n");
//	//}
//
//	//Ret = SetHibernate();
//	//if (Ret != 0)
//	//{
//	//	TRACE("SetHibernate失败\n");
//	//}
//
//	//Ret = SetMinAniMate();
//	//if (Ret != 0)
//	//{
//	//	TRACE("SetMinAniMate失败\n");
//	//}
//
//	//Ret = DisableMSN();
//	//if (Ret != 0)
//	//{
//	//	TRACE("DisableMSN失败\n");
//	//}
//
//	//Ret = SetVirtualMemory();
//	//if (Ret < 0)
//	//{
//	//	TRACE("SetVirtualMemory失败\n");
//	//}
//
//	//Ret = DisableDragFullWindows();
//	//if (Ret < 0)
//	//{
//	//	TRACE("DisableDragFullWindows失败\n");
//	//}
//
//	////Ret = SetVisualXP(LangID);
//	////if (Ret != 0)
//	////{
//	////	TRACE("SetVisualXP失败\n");
//	////}
//
//	int t2 = GetTickCount();
//	CString s;
//	s.Format("全部优化设定项用时 %d ms", t2 - t1);
//	if (bOnKey == FALSE)
//		MessageBox(s, NULL, MB_OK);
//
//}

//void CFileDllTestDlg::OnBnClickedButton54()
//{
//	// TODO: Add your control notification handler code here
//	//TurnOffUAC(LangID);
//}

void CFileDllTestDlg::OnBnClickedButton56()
{
	// TODO: Add your control notification handler code here
	BOOL b = FALSE;
	CString CmdLine, RetString;
	char KeyVal[100] = {0};

	TurnOnService("wuauserv");
	TurnOnService("RDSessMgr");
	TurnOnService("Srservice");
	TurnOnService("TermService");
	TurnOnService("ERSvc");

	b = SetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\CurrentControlSet\\Control\\CrashControl\\", "AutoReboot", REG_SZ, "1");
	b = SetReg(HKEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\PCHealth\\ErrorReporting\\", "DoReport", REG_SZ, "1");
	b = SetReg(HKEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\PCHealth\\ErrorReporting\\", "ShowUI", REG_SZ, "1");

	CmdLine = "powercfg -h on";
	RetString = GetCmdOutput(CmdLine);

	_itoa_s(1, KeyVal, 16, 10);
	SetReg(HKEY_CURRENT_USER, "Control Panel\\Desktop\\WindowMetrics\\", "MinAniMate", REG_SZ, KeyVal);

	sprintf_s(KeyVal, "c:\\pagefile.sys %d %d", 512, 768);
	b = SetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\\", "PagingFiles", REG_MULTI_SZ, KeyVal);

	_itoa_s(1, KeyVal, 16, 10);//1是启用，0是不显示
	b = SetReg(HKEY_CURRENT_USER, "Control Panel\\Desktop\\", "DragFullWindows", REG_SZ, KeyVal);

	//SetXPVisual();
}	

void CFileDllTestDlg::SetXPVisual()
{
	CString OS, s;
	HWND h1 = NULL;
	HWND h2 = NULL;

	//OS = GetOSVersion();
	//if (OS == "WINXP")
	//{
	//	ShellExecute(NULL, 
	//		"open", 
	//		"rundll32.exe", 
	//		"shell32.dll,Control_RunDLL sysdm.cpl,,0", NULL, SW_HIDE); 

	//	if (LangID == 0)
	//		s = "系统属性";
	//	else
	//		s = "System Properties";
	//	h1 = MyFindWindow(s);
	//	if (h1 != NULL)
	//	{
	//		WindowTop(h1);
	//		//切换卡片3次
	//		for (int i = 0; i < 3; i++)
	//		{
	//			ShortKey(VK_CONTROL, VK_TAB);
	//		}

	//		ShortKey(VK_MENU, 'S');
	//		if (LangID == 0)
	//			s = "性能选项";
	//		else
	//			s = "Performance Options";
	//		h2 = MyFindWindow(s);
	//		if (h2 != NULL)
	//		{
	//			WindowTop(h2);

	//			ShortKey(VK_MENU, 'B');

	//			MySleep(100);
	//			if (LangID == 0)
	//				s = "确定";
	//			else
	//				s = "OK";
	//			BnClick(h2, s);

	//			MySleep(100);
	//			WindowTop(h1);
	//			if (LangID == 0)
	//				s = "确定";
	//			else
	//				s = "OK";
	//			BnClick(h1, s);
	//		}
	//	}
	//}

	//if (OS == "WIN7")
	//{
	//	ShellExecute(NULL, 
	//		"open", 
	//		"rundll32.exe", 
	//		"shell32.dll,Control_RunDLL sysdm.cpl", NULL, SW_HIDE); 

	//	if (LangID == 0)
	//		s = "系统属性";
	//	else
	//		s = "System Properties";
	//	h1 = MyFindWindow(s);
	//	if (h1 != NULL)
	//	{
	//		WindowTop(h1);
	//		//切换卡片2次
	//		for (int i = 0; i < 2; i++)
	//		{
	//			ShortKey(VK_CONTROL, VK_TAB);
	//		}

	//		ShortKey(VK_MENU, 'S');

	//		if (LangID == 0)
	//			s = "性能选项";
	//		else
	//			s = "Performance Options";
	//		h2 = MyFindWindow(s);
	//		if (h2 != NULL)
	//		{
	//			WindowTop(h2);
	//			ShortKey(VK_MENU, 'P');//用最佳性能清除自定的所有选项
	//			Key(VK_DOWN);;//进入自定义设置

	//			Key(VK_TAB);
	//			Key(VK_HOME);//强制回到第一项

	//			//字体平滑设置
	//			for (int i = 0; i < 5; i++)
	//			{
	//				Key(VK_DOWN);
	//			}
	//			Key(VK_SPACE);

	//			MySleep(50);
	//			if (LangID == 0)
	//				s = "确定";
	//			else
	//				s = "OK";
	//			BnClick(h2, s);

	//			MySleep(50);
	//			WindowTop(h1);
	//			if (LangID == 0)
	//				s = "确定";
	//			else
	//				s = "OK";
	//			BnClick(h1, s);
	//		}
	//	}
	//}
}

void TurnOnService(CString ServiceName)
{
	BOOL b = FALSE;
	CString CmdLine;
	CString RetString;

	//判断系统还原服务是否开启
	b = GetServiceRunStatus(ServiceName.GetBuffer());
	ServiceName.ReleaseBuffer();
	if (b == FALSE)
	{
		//先自动服务，再运行服务
		CmdLine.Format("sc config %s start= auto", ServiceName);
		RetString = GetCmdOutput(CmdLine);
		CmdLine.Format("sc start %s", ServiceName);
		RetString = GetCmdOutput(CmdLine);
	}
}

HWND MyFindWindow(CString Title, int Wait)
{
	HWND h = NULL;
	BOOL Ret = FALSE;
	int sleep = 5;

	for (int i = 0; i < Wait / sleep; i++)
	{
		h = ::FindWindow("#32770", Title);
		if (h)
		{
			return h;
		}
		Sleep(sleep);
	}

	return h;
}

void WindowTop(HWND h)
{
	CRect Rect;

	MySleep(100);
	//MoveDlg(h);
	::GetWindowRect(h, &Rect);
	::SetWindowPos(h, HWND_TOPMOST, Rect.left, Rect.top, Rect.Width(), Rect.Height(), /*SWP_SHOWWINDOW*/SWP_HIDEWINDOW);
	::SetForegroundWindow(h);
}

void ShortKey(int Key1, int Key2) 
{
	keybd_event(Key1, 0, 0, 0);
	keybd_event(Key2, 0, 0, 0);
	keybd_event(Key1, 0, KEYEVENTF_KEYUP, 0);
	keybd_event(Key2, 0, KEYEVENTF_KEYUP, 0);
}

//void Key(int Key) 
//{
//	keybd_event(Key, 0, 0, 0);
//	keybd_event(Key, 0, KEYEVENTF_KEYUP, 0);
//}


void MySleep(int time)
{
	int sleeptime = 10;
	for (int i = 0; i < time / sleeptime; i++)
	{
		Sleep(sleeptime);
	}
}


void BnClick(HWND h, CString Find)
{
	HWND hFind = NULL;
	hFind = FindCtrlByText(h, Find);
	if (hFind)
	{
		int id = ::GetDlgCtrlID(hFind);
		::PostMessage(h, WM_COMMAND, MAKELONG(id, BN_CLICKED), (LPARAM)hFind);
	}
	else
	{
		TRACE("BnClick没找到按钮句柄\n");
	}
}

HWND FindCtrlByText(HWND h, CString Text)
{
	BOOL	Flag = TRUE;
	HWND	hChildWnd = ::GetWindow(h, GW_CHILD);
	char	Title[MAX_PATH];
	int		ret = 0;
	int		ID = 0;

	hChildWnd = ::GetWindow(hChildWnd, GW_HWNDFIRST);
	ret = ::GetWindowText(hChildWnd, Title, MAX_PATH);
	if (Title == Text)
	{
		ID = ::GetDlgCtrlID(hChildWnd);
		return hChildWnd;
	}
	HWND hLastWnd = ::GetWindow(hChildWnd, GW_HWNDLAST);
	ret = ::GetWindowText(hChildWnd, Title, MAX_PATH);

	while(Flag)
	{
		if(hChildWnd != hLastWnd)
		{
			hChildWnd = ::GetWindow(hChildWnd, GW_HWNDNEXT);
			ret = ::GetWindowText(hChildWnd, Title, MAX_PATH);
			//TRACE("控件文字：%s\n", Title);
			if (Title == Text)
			{
				ID = ::GetDlgCtrlID(hChildWnd);
				return hChildWnd;
			}
		}
		else
		{
			Flag = FALSE;
		}
	}

	return NULL;
}

void CFileDllTestDlg::OnBnClickedButton55()
{
	// TODO: Add your control notification handler code here
	BOOL b = FALSE;
	CString OS, CmdLine, RetString;

	//恢复电源管理设置
	CmdLine = "powercfg /setactive \"Home/Office Desk\"";
	RetString = GetCmdOutput(CmdLine);

	CmdLine = "powercfg /x \"Home/Office Desk\" /monitor-timeout-ac 10";
	RetString = GetCmdOutput(CmdLine);

	CmdLine = "powercfg /X \"Home/Office Desk\" /disk-timeout-ac 10";
	RetString = GetCmdOutput(CmdLine);

	CmdLine = "powercfg /X \"Home/Office Desk\" /standby-timeout-ac 10";
	RetString = GetCmdOutput(CmdLine);

	CmdLine = "powercfg /X \"Home/Office Desk\" /hibernate-timeout-ac 15";
	RetString = GetCmdOutput(CmdLine);

	//恢复对系统文件夹的显示
	char KeyVal[MAX_PATH];
	_itoa_s(0, KeyVal, 16, 10);
	b = SetReg(HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\", "WebViewBarricade", REG_DWORD, KeyVal);

	//不显示隐藏文件
	_itoa_s(1, KeyVal, 16, 10);
	b = SetReg(HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\", "Hidden", REG_DWORD, KeyVal);

	//不显示文件扩展名
	_itoa_s(1, KeyVal, 16, 10);//0是显示，1是不显示
	b = SetReg(HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\", "HideFileExt", REG_DWORD, KeyVal);

	//不显示全路径
	_itoa_s(0, KeyVal, 16, 10);//1是显示，0是不显示
	b = SetReg(HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\CabinetState\\", "FullPath", REG_DWORD, KeyVal);

	//简单共享
	_itoa_s(1, KeyVal, 16, 10);
	SetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "forceguest", REG_DWORD, KeyVal);

	//显示欢迎屏幕
	_itoa_s(1, KeyVal, 16, 10);//1是启用，0是禁用
	b = SetReg(HKEY_LOCAL_MACHINE, "Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\", "LogonType", REG_DWORD, KeyVal);

	//禁止空密码远程访问
	_itoa_s(1, KeyVal, 16, 10);
	SetReg(HKEY_LOCAL_MACHINE, "SYSTEM\\ControlSet001\\Control\\Lsa\\", "limitblankpassworduse", REG_DWORD, KeyVal);

	//打开Internet校时
	TurnOnService("W32Time");

	//打开防火墙
	CmdLine = "netsh firewall set opmode enable";
	RetString = GetCmdOutput(CmdLine);

	//打开索引服务
	TurnOnService("CiSvc");

	//恢复桌面主题为XP默认，非常耗时，必须放在最后
	//SetTheme("c:\\WINDOWS\\Resources\\Themes\\Luna.theme");
	Sleep(1000);
	//Key(VK_RETURN);

	//屏幕保护恢复已自动完成
}

void CFileDllTestDlg::OnBnClickedButton57()
{
	// TODO: Add your control notification handler code here
	CString s, szRet;
	int Ret = 0;
	bOnKey = TRUE;
	time_t t1 = GetTickCount();
	Ret = AutoSet("", TRUE);
	time_t t2 = GetTickCount();
	if (bOnKey)
	{
		s.Format("返回值 = %d", Ret);
		MessageBox(s);
	}
}

//void CFileDllTestDlg::OnBnClickedButton43()
//{
//	// TODO: Add your control notification handler code here
//	//DisableDragFullWindows();
//}

//void CFileDllTestDlg::OnBnClickedButton58()
//{
//	// TODO: Add your control notification handler code here
//	//DeleteGapiDll();
//	//DeleteLmhosts();
//}

//void CFileDllTestDlg::OnBnClickedButton59()
//{
//	// TODO: Add your control notification handler code here
//	//DisableIndex();
//}

void CFileDllTestDlg::OnBnClickedButton44()
{
	// TODO: Add your control notification handler code here
	//CAutoSetDlg Dlg;

	//Dlg.DoModal();

	AutoSet("", 1);
}

void CFileDllTestDlg::OnBnClickedButton60()
{
	// TODO: Add your control notification handler code here
	BOOL ret = FALSE;
	ret = RenameDir("c:\\coreview", "c:\\coreview_bak");
}

void CFileDllTestDlg::OnBnClickedButton61()
{
    // TODO: Add your control notification handler code here
    //AppendSystemVariable("C:\\CoreView\\DriverExec\\bin;C:\\CoreView\\FuncExec\\bin;C:\\CoreView\\SystemExec\\bin");
}

void CFileDllTestDlg::OnBnClickedButton62()
{
    // TODO: Add your control notification handler code here
    long Ret = 0;
    Ret = AutoSet("", FALSE);
}

void CFileDllTestDlg::OnBnClickedButton63()
{
	// TODO: 在此添加控件通知处理程序代码
	CSnapshotDlg Dlg;
	Dlg.DoModal();
}

void CFileDllTestDlg::OnBnClickedButton64()
{
	// TODO: 在此添加控件通知处理程序代码
	CString File = "C:\\Temp\\OsAutoSetCheck.txt";
	//CVFuncConfigureCheck(File, 0, NULL);
}

void CFileDllTestDlg::OnBnClickedButton65()
{
	// TODO: 在此添加控件通知处理程序代码
	//BOOL b = DeleteOldestFiles("C:\\Temp", 1);
}

void CFileDllTestDlg::OnBnClickedButton66()
{
	// TODO: 在此添加控件通知处理程序代码
	int Cnt = GetInterfaceCount();

	if (Cnt > 0)
	{
		CNetInfo* InterfaceArray = new CNetInfo[Cnt];
		BOOL b = GetInterfaceArray(InterfaceArray);
		delete[] InterfaceArray;
	}
}

void CFileDllTestDlg::OnBnClickedButton67()
{
	// TODO: 在此添加控件通知处理程序代码
	DWORD t1, t2;
	t1 = GetTickCount();
	vector<CString> OfflineFileList;
	GetOfflineFileList(OfflineFileList);

	CString Remote = "\\\\192.168.0.146\\";

	FileDiff(OfflineFileList, Remote);

	t2 = GetTickCount();
	TRACE("耗时=%d ms\n", t2 - t1);

	CString Msg;
	Msg.Format("耗时=%d ms\n", t2 - t1);
	MessageBox(Msg, "", MB_OK);
}

int CFileDllTestDlg::GetFileList(IN CString FileName, OUT vector<CString> &FileList)
{
	FileList.clear();

	HANDLE hFind;
	WIN32_FIND_DATA FindFileData;
	hFind = FindFirstFile(FileName, &FindFileData);
	if(hFind != INVALID_HANDLE_VALUE)
	{
		if ((FindFileData.dwFileAttributes & FILE_ATTRIBUTE_ARCHIVE) == FILE_ATTRIBUTE_ARCHIVE)
		{
			CString GrName = FindFileData.cFileName;

			//拼装全路径文件名
			CString PathFile = FileName;
			GetWildcardPathFile(PathFile, GrName);

			FileList.push_back(PathFile);
		}

		while(FindNextFile(hFind, &FindFileData))
		{
			if ((FindFileData.dwFileAttributes & FILE_ATTRIBUTE_ARCHIVE) == FILE_ATTRIBUTE_ARCHIVE)
			{
				CString GrName = FindFileData.cFileName;

				//拼装全路径文件名
				CString PathFile = FileName;
				GetWildcardPathFile(PathFile, GrName);

				FileList.push_back(PathFile);
			}
		}
	}

	FindClose(hFind);

	return (int)FileList.size();
}

//备忘：不检查CRT部件时180ms完成，检查CRT部件时45秒完成
void CFileDllTestDlg::GetOfflineFileList( vector<CString> &OfflineFileList )
{
	//H5000M驱动
	OfflineFileList.push_back("c:\\CoreView\\DriverExec\\CVHMacroSigma\\Offline Data\\CVH5000MDrvConfDB.mdb");

	//对外通讯驱动
	OfflineFileList.push_back("c:\\CoreView\\DriverExec\\CVCommServer\\Offline Data\\CVCommServerDrvConfDB.mdb");

	//OPC Server驱动
	OfflineFileList.push_back("c:\\CoreView\\DriverExec\\CVOPCServer\\Offline Data\\CVOPCServerDrvConfDB.mdb");

	//OPC Client驱动
	OfflineFileList.push_back("c:\\CoreView\\DriverExec\\CVOPCClient\\Offline Data\\CVOPCClientDrvConfDB.mdb");

	//Web Server驱动
	OfflineFileList.push_back("c:\\CoreView\\DriverExec\\CVWebServer\\Offline Data\\CVWebSrvClientReg.mdb");

	//Modbus驱动
	OfflineFileList.push_back("c:\\CoreView\\DriverExec\\CVModbus\\Offline Data\\CVModbusDrvConfDB.mdb");

	//Tag组态
	OfflineFileList.push_back("c:\\CoreView\\SystemExec\\Offline Data\\TagDB\\CVTagDB.mdb");

	//CRT
	OfflineFileList.push_back("c:\\CoreView\\FuncExec\\CVCRTopExec\\CRTOPData\\database\\Ctlgnnew.mdb");
	OfflineFileList.push_back("c:\\CoreView\\FuncExec\\CVCRTopExec\\CRTOPData\\database\\COLORVAL.DAT");
	OfflineFileList.push_back("c:\\CoreView\\FuncExec\\CVCRTopExec\\Convert Data\\PgsgInfo.mem");

	//CRT 部件
	//OfflineFileList.push_back("c:\\CoreView\\FuncExec\\CVCRTopExec\\CRTOPData\\parts\\*.bmp");

	//计算
	OfflineFileList.push_back("c:\\CoreView\\FuncExec\\CVCalExec\\offline data\\CalDB.MDB");

	//报表组态
	OfflineFileList.push_back("c:\\CoreView\\FuncExec\\CVLogExec\\Offline Data\\LogBuilder.mem");

	//接口配置组态
	OfflineFileList.push_back("c:\\CoreView\\SystemExec\\Offline Data\\CVIOInterface\\CVProdDrvConfDB.mdb");

	//专用键盘组态
	OfflineFileList.push_back("c:\\CoreView\\FuncExec\\CVSpecialKeyBoard\\Convert Data\\SystemKeyData.mem");
	OfflineFileList.push_back("c:\\CoreView\\FuncExec\\CVSpecialKeyBoard\\Convert Data\\SystemKeyDataEng.mem");

	//权限组态
	OfflineFileList.push_back("c:\\CoreView\\SystemExec\\Offline Data\\CVPermission\\Permission.mdb");

	//事件触发
	OfflineFileList.push_back("c:\\CoreView\\FuncExec\\CVEventExec\\Configure\\Sound\\*.wav");

	//事故追忆组态
	OfflineFileList.push_back("c:\\CoreView\\FuncExec\\CVTripExec\\Configure\\CVTripGroupSet.ini");
}

//获取文件的特征信息，主要是文件大小和最后修改时刻
BOOL CFileDllTestDlg::GetFileAttribute( int& FileSize, __time32_t& ModifyTime, IN CString& PathName )
{
	//获取文件的大小和修改时刻
	CFileFind Find;
	BOOL b = Find.FindFile(PathName);
	if (b)
	{
		Find.FindNextFile();
		FileSize = (int)Find.GetLength();
		CTime Time;
		Find.GetLastWriteTime(Time);
		ModifyTime = (__time32_t)Time.GetTime();
		Find.Close();
	}

	return b;
}

bool CFileDllTestDlg::IsOneFile( CString& LocalFile )
{
	bool Ret = true;

	if (LocalFile.ReverseFind('*') >= 0)
	{
		Ret = false;
	}

	return Ret;
}

void CFileDllTestDlg::FileDiff( vector<CString> &OfflineFileList, CString Remote )
{
	int FileCnt = (int)OfflineFileList.size();
	for (int i = 0; i < FileCnt; i++)
	{
		int FileSize = 0;
		BOOL bLocalFile = FALSE;
		__time32_t ModifyTime = 0;
		CString LocalFile = OfflineFileList[i];
		if (IsOneFile(LocalFile))//单文件
		{
			bLocalFile = GetFileAttribute(FileSize, ModifyTime, LocalFile);

			int rFileSize = 0;
			__time32_t rModifyTime = 0;
			CString RemoteFile = LocalFile;
			RemoteFile = Remote + RemoteFile;
			RemoteFile.Replace(":", "$");
			BOOL bRemoteFile = GetFileAttribute(rFileSize, rModifyTime, RemoteFile);

			CString Msg;
			if (bLocalFile == TRUE && bRemoteFile == TRUE)
			{
				if (FileSize != rFileSize || ModifyTime - rModifyTime > 1)
				{
					Msg.Format("%s与远程文件不一致!\n", LocalFile);
					TRACE(Msg);
				} 
				else
				{
					//Msg.Format("%s一致\n", LocalFile);
					//TRACE(Msg);
				}
			}
			else
			{
				if (bLocalFile == FALSE && bRemoteFile == FALSE)
				{
					;//判定为一致
				} 
				else
				{
					Msg.Format("%s与远程文件不一致! bLocalFile=%d, bRemoteFile=%d\n", LocalFile, bLocalFile, bRemoteFile);
					TRACE(Msg);
				}
			}
		}
		else//通配符文件列表
		{
			//获取通配符文件列表
			vector<CString> FileList;
			GetFileList(LocalFile, FileList);

			FileDiff(FileList, Remote);
		}
	}
}

void CFileDllTestDlg::GetWildcardPathFile( OUT CString &PathFile, CString GrName )
{
	int pos = PathFile.ReverseFind('*');
	CString ReplaceStr = PathFile.Right(PathFile.GetLength() - pos);
	PathFile.Replace(ReplaceStr, GrName);
}

void CFileDllTestDlg::OnBnClickedButton68()
{
	// TODO: 在此添加控件通知处理程序代码
	int IFNo = GetDlgItemInt(IDC_EDIT1);
	AutoSetOPC(IFNo);
}

void CFileDllTestDlg::OnBnClickedButton69()
{
	// TODO: 在此添加控件通知处理程序代码
	int IFNo = GetDlgItemInt(IDC_EDIT1);
	AutoSetOPCSimulator(IFNo);
}

void CFileDllTestDlg::OnBnClickedButton70()
{
	// TODO: 在此添加控件通知处理程序代码
	char szUserDefinedFont[100] = "楷体_GB2312";
	char szMatchingFont[100] = "";
	int szMatchingFontSize = sizeof(szMatchingFont);

	time_t t1 = 0, t2 = 0;
	static int Loop = 100000;
	t1 = GetTickCount();
	for (int i = 0; i < Loop; i++)
	{
		GetSimilarFontName(szUserDefinedFont, szMatchingFont, szMatchingFontSize);
	}
	t2 = GetTickCount();

	CString Msg;
	Msg.Format("GetMatchingFontName(\"楷体_GB2312\")循环%d次, 耗时=%I64d, 匹配=%s", Loop, t2 - t1, szMatchingFont);
	MessageBox(Msg, "", MB_OK);
}

void CFileDllTestDlg::OnBnClickedButton71()
{
	// TODO: 在此添加控件通知处理程序代码
	DWORD t2;
	int NeedCnt = 0;
	DWORD t1 = GetTickCount();
	BOOL Convert = GrbNeedConvert(NeedCnt);
	t2 = GetTickCount();
	CString Msg;
	Msg.Format("GrbNeedConvert耗时=%dms, NeedCnt=%d", t2 - t1, NeedCnt);
	MessageBox(Msg, "提示：", MB_OK);
}
